!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=45)}([function(e,t,n){"use strict";e.exports=n(46)},function(e,t,n){"use strict";var r=["Out_of_memory",0],i=["Sys_error",-1],a=["Failure",-2],o=["Invalid_argument",-3],u=["End_of_file",-4],l=["Division_by_zero",-5],c=["Not_found",-6],s=["Match_failure",-7],f=["Stack_overflow",-8],d=["Sys_blocked_io",-9],p=["Assert_failure",-10],g=["Undefined_recursive_module",-11];r.tag=248,i.tag=248,a.tag=248,o.tag=248,u.tag=248,l.tag=248,c.tag=248,s.tag=248,f.tag=248,d.tag=248,p.tag=248,g.tag=248,t.out_of_memory=r,t.sys_error=i,t.failure=a,t.invalid_argument=o,t.end_of_file=u,t.division_by_zero=l,t.not_found=c,t.match_failure=s,t.stack_overflow=f,t.sys_blocked_io=d,t.assert_failure=p,t.undefined_recursive_module=g},function(e,t,n){"use strict";var r=n(15);function i(e,t){for(;;){var n=t,a=e,o=a.length,u=0===o?1:o,l=u-n.length|0;if(0===l)return a.apply(null,n);if(!(l<0))return function(e,t){return function(n){return i(e,t.concat([n]))}}(a,n);t=r.caml_array_sub(n,u,0|-l),e=a.apply(null,r.caml_array_sub(n,0,u))}}function a(e,t,n){switch(n){case 1:return e(t);case 2:return function(n){return e(t,n)};case 3:return function(n,r){return e(t,n,r)};case 4:return function(n,r,i){return e(t,n,r,i)};case 5:return function(n,r,i,a){return e(t,n,r,i,a)};case 6:return function(n,r,i,a,o){return e(t,n,r,i,a,o)};case 7:return function(n,r,i,a,o,u){return e(t,n,r,i,a,o,u)};default:return i(e,[t])}}function o(e,t){var n=e.length;return 1===n?e(t):a(e,t,n)}function u(e,t,n,r){switch(r){case 1:return i(e(t),[n]);case 2:return e(t,n);case 3:return function(r){return e(t,n,r)};case 4:return function(r,i){return e(t,n,r,i)};case 5:return function(r,i,a){return e(t,n,r,i,a)};case 6:return function(r,i,a,o){return e(t,n,r,i,a,o)};case 7:return function(r,i,a,o,u){return e(t,n,r,i,a,o,u)};default:return i(e,[t,n])}}function l(e,t,n){var r=e.length;return 2===r?e(t,n):u(e,t,n,r)}function c(e,t,n,r,a){switch(a){case 1:return i(e(t),[n,r]);case 2:return i(e(t,n),[r]);case 3:return e(t,n,r);case 4:return function(i){return e(t,n,r,i)};case 5:return function(i,a){return e(t,n,r,i,a)};case 6:return function(i,a,o){return e(t,n,r,i,a,o)};case 7:return function(i,a,o,u){return e(t,n,r,i,a,o,u)};default:return i(e,[t,n,r])}}function s(e,t,n,r){var i=e.length;return 3===i?e(t,n,r):c(e,t,n,r,i)}function f(e,t,n,r,a,o){switch(o){case 1:return i(e(t),[n,r,a]);case 2:return i(e(t,n),[r,a]);case 3:return i(e(t,n,r),[a]);case 4:return e(t,n,r,a);case 5:return function(i){return e(t,n,r,a,i)};case 6:return function(i,o){return e(t,n,r,a,i,o)};case 7:return function(i,o,u){return e(t,n,r,a,i,o,u)};default:return i(e,[t,n,r,a])}}function d(e,t,n,r,i){var a=e.length;return 4===a?e(t,n,r,i):f(e,t,n,r,i,a)}function p(e,t,n,r,a,o,u){switch(u){case 1:return i(e(t),[n,r,a,o]);case 2:return i(e(t,n),[r,a,o]);case 3:return i(e(t,n,r),[a,o]);case 4:return i(e(t,n,r,a),[o]);case 5:return e(t,n,r,a,o);case 6:return function(i){return e(t,n,r,a,o,i)};case 7:return function(i,u){return e(t,n,r,a,o,i,u)};default:return i(e,[t,n,r,a,o])}}function g(e,t,n,r,i,a){var o=e.length;return 5===o?e(t,n,r,i,a):p(e,t,n,r,i,a,o)}function h(e,t,n,r,a,o,u,l){switch(l){case 1:return i(e(t),[n,r,a,o,u]);case 2:return i(e(t,n),[r,a,o,u]);case 3:return i(e(t,n,r),[a,o,u]);case 4:return i(e(t,n,r,a),[o,u]);case 5:return i(e(t,n,r,a,o),[u]);case 6:return e(t,n,r,a,o,u);case 7:return function(i){return e(t,n,r,a,o,u,i)};default:return i(e,[t,n,r,a,o,u])}}function m(e,t,n,r,i,a,o){var u=e.length;return 6===u?e(t,n,r,i,a,o):h(e,t,n,r,i,a,o,u)}function v(e,t,n,r,a,o,u,l,c){switch(c){case 1:return i(e(t),[n,r,a,o,u,l]);case 2:return i(e(t,n),[r,a,o,u,l]);case 3:return i(e(t,n,r),[a,o,u,l]);case 4:return i(e(t,n,r,a),[o,u,l]);case 5:return i(e(t,n,r,a,o),[u,l]);case 6:return i(e(t,n,r,a,o,u),[l]);case 7:return e(t,n,r,a,o,u,l);default:return i(e,[t,n,r,a,o,u,l])}}function y(e,t,n,r,i,a,o,u){var l=e.length;return 7===l?e(t,n,r,i,a,o,u):v(e,t,n,r,i,a,o,u,l)}function b(e,t,n,r,a,o,u,l,c,s){switch(s){case 1:return i(e(t),[n,r,a,o,u,l,c]);case 2:return i(e(t,n),[r,a,o,u,l,c]);case 3:return i(e(t,n,r),[a,o,u,l,c]);case 4:return i(e(t,n,r,a),[o,u,l,c]);case 5:return i(e(t,n,r,a,o),[u,l,c]);case 6:return i(e(t,n,r,a,o,u),[l,c]);case 7:return i(e(t,n,r,a,o,u,l),[c]);default:return i(e,[t,n,r,a,o,u,l,c])}}function _(e,t,n,r,i,a,o,u,l){var c=e.length;return 8===c?e(t,n,r,i,a,o,u,l):b(e,t,n,r,i,a,o,u,l,c)}t.app=i,t.curry_1=a,t._1=o,t.__1=function(e){return 1===e.length?e:function(t){return o(e,t)}},t.curry_2=u,t._2=l,t.__2=function(e){return 2===e.length?e:function(t,n){return l(e,t,n)}},t.curry_3=c,t._3=s,t.__3=function(e){return 3===e.length?e:function(t,n,r){return s(e,t,n,r)}},t.curry_4=f,t._4=d,t.__4=function(e){return 4===e.length?e:function(t,n,r,i){return d(e,t,n,r,i)}},t.curry_5=p,t._5=g,t.__5=function(e){return 5===e.length?e:function(t,n,r,i,a){return g(e,t,n,r,i,a)}},t.curry_6=h,t._6=m,t.__6=function(e){return 6===e.length?e:function(t,n,r,i,a,o){return m(e,t,n,r,i,a,o)}},t.curry_7=v,t._7=y,t.__7=function(e){return 7===e.length?e:function(t,n,r,i,a,o,u){return y(e,t,n,r,i,a,o,u)}},t.curry_8=b,t._8=_,t.__8=function(e){return 8===e.length?e:function(t,n,r,i,a,o,u,l){return _(e,t,n,r,i,a,o,u,l)}}},function(e,t,n){"use strict";var r=[];function i(e){if(void 0===e){var t=[r,0];return t.tag=256,t}if(null!==e&&e[0]===r){var n=e[1]+1|0,i=[r,n];return i.tag=256,i}return e}function a(e){if(null!==e&&e[0]===r){var t=e[1];return 0===t?void 0:[r,t-1|0]}return e}t.nullable_to_opt=function(e){return null==e?void 0:i(e)},t.undefined_to_opt=function(e){return void 0===e?void 0:i(e)},t.null_to_opt=function(e){return null===e?void 0:i(e)},t.valFromOption=a,t.some=i,t.option_get=function(e){return void 0===e?void 0:a(e)},t.option_get_unwrap=function(e){return void 0===e?void 0:a(e)[1]}},function(e,t,n){"use strict";var r=n(28),i=n(78),a=n(17),o=n(2),u=n(34),l=n(81),c=n(112),s=n(35),f=n(83),d=n(84),p=n(85),g=n(36);function h(e,t){switch(0|t.tag){case 0:var n=t[1],r=t[0];if("content"===r){var i=""===n;e[r]=i?'""':n}else e[r]=n;break;case 1:e[t[0]]=m(t[1]);break;case 2:e[":"+t[0]]=m(t[1]);break;case 3:e[":"+t[0]+"("+t[1]+")"]=m(t[2])}return e}function m(e){return s.reduce(e,{},h)}function v(e,t){for(var n=e,r="";;){var i=r,a=n;if(a){var o=a[1],u=a[0];if(o){r=i+(u+t),n=o;continue}return i+u}return i}}function y(e){return g.Percentage.toString(e)}function b(e){return v(s.map(e,(function(e){return g.Color.toString(e[1])+" "+g.Length.toString(e[0])})),", ")}function _(e){if("number"==typeof e)return 292050538!==e?e>=582626130?"transparent":"none":"currentColor";var t=e[0];if(t>=5197569){if(5692173!==t){if(t>=119548911){if(t>=616379637){var n=e[1];return"linear-gradient("+g.Angle.toString(n[0])+", "+b(n[1])+")"}return"radial-gradient("+b(e[1])+")"}if(t>=5843823)return"url("+e[1]+")";var r=e[1],i=r[0],a=r[1],o=r[2];return"hsl("+g.Angle.toString(i)+", "+y(a)+", "+y(o)+")"}var u=e[1];return"rgb("+u[0].toString()+", "+u[1].toString()+", "+u[2].toString()+")"}if(-878128972!==t){if(t>=-160280644){if(t>=5194459)return"#"+e[1];var l=e[1];return"repeating-linear-gradient("+g.Angle.toString(l[0])+", "+b(l[1])+")"}if(t>=-657111370)return"repeating-radial-gradient("+b(e[1])+")";var c=e[1],s=c[0],f=c[1],d=c[2],p=c[3];return"hsla("+g.Angle.toString(s)+", "+y(f)+", "+y(d)+", "+(((h=p)[0]>=5496390?h[1].toString():h[1].toString()+"%")+")")}var h,m=e[1];return"rgba("+m[0].toString()+", "+m[1].toString()+", "+m[2].toString()+", "+m[3].toString()+")"}var k=c.cache;function w(e){if("number"==typeof e)return-789508312!==e?e>=-445061397?e>=653193961?g.Cascading.toString(e):g.BackgroundPosition.toString(e):e>=-944764920?g.Cascading.toString(e):g.BackgroundPosition.toString(e):g.Length.toString(e);if(23310!==e[0])return g.Length.toString(e);var t=e[1],n=t[1],r=t[0];return("number"==typeof r&&-789508312!==r?o._1(g.BackgroundPosition.X.toString,r):g.Length.toString(r))+" "+("number"==typeof n&&n>=-445061397?o._1(g.BackgroundPosition.Y.toString,n):g.Length.toString(n))}function S(e){return"number"==typeof e&&e<-789508312?g.Margin.toString(e):g.Length.toString(e)}function x(e){return a.__(0,["overflowWrap",e>=812216871?g.OverflowWrap.toString(e):g.Cascading.toString(e)])}function C(e){return a.__(2,["default",e])}function E(e){if("number"==typeof e)return e>=5542319?"odd":"even";if(e[0]>=4846113){var t=e[1];return t[0].toString()+"n+"+t[1].toString()}return e[1].toString()+"n"}var T={toString:E};var A=g.Cascading.initial,P=g.Cascading.inherit_,O=g.Cascading.unset,F=g.Percentage.pct,R=g.Length.ch,L=g.Length.cm,z=g.Length.em,N=g.Length.ex,D=g.Length.mm,j=g.Length.pt,I=g.Length.px,B=g.Length.pxFloat,M=g.Length.rem,q=g.Length.vh,U=g.Length.vmin,$=g.Length.vmax,W=g.Length.zero,V=g.Angle.deg,H=g.Angle.rad,G=g.Angle.grad,Q=g.Angle.turn,K=g.Direction.ltr,Y=g.Direction.rtl,X=g.Position.absolute,Z=g.Position.relative,J=g.Position.$$static,ee=g.Position.sticky,te=g.Resize.horizontal,ne=g.Resize.vertical,re=g.FontVariant.smallCaps,ie=g.FontStyle.italic,ae=g.FontStyle.oblique,oe=g.Color.rgb,ue=g.Color.rgba,le=g.Color.hsl,ce=g.Color.hsla,se=g.Color.hex,fe=g.Color.currentColor,de=g.Color.transparent,pe=g.TimingFunction.linear,ge=g.TimingFunction.ease,he=g.TimingFunction.easeIn,me=g.TimingFunction.easeInOut,ve=g.TimingFunction.easeOut,ye=g.TimingFunction.stepStart,be=g.TimingFunction.stepEnd,_e=g.TimingFunction.steps,ke=g.TimingFunction.cubicBezier,we=g.GeometyBox.marginBox,Se=g.GeometyBox.fillBox,xe=g.GeometyBox.strokeBox,Ce=g.GeometyBox.viewBox,Ee=g.Transform.translate,Te=g.Transform.translate3d,Ae=g.Transform.translateX,Pe=g.Transform.translateY,Oe=g.Transform.translateZ,Fe=g.Transform.scaleX,Re=g.Transform.scaleY,Le=g.Transform.scaleZ,ze=g.Transform.rotateX,Ne=g.Transform.rotateY,De=g.Transform.rotateZ,je=g.Transform.scale,Ie=g.Transform.scale3d,Be=g.Transform.skew,Me=g.Transform.skewX,qe=g.Transform.skewY,Ue=g.FontWeight.thin,$e=g.FontWeight.extraLight,We=g.FontWeight.light,Ve=g.FontWeight.medium,He=g.FontWeight.semiBold,Ge=g.FontWeight.bold,Qe=g.FontWeight.extraBold,Ke=g.FontWeight.lighter,Ye=g.FontWeight.bolder,Xe=g.Gradient.linearGradient,Ze=g.Gradient.repeatingLinearGradient,Je=g.Gradient.radialGradient,et=g.Gradient.repeatingRadialGradient;var tt={$neg:function(e,t){return[-1044768619,[5745024,e,t]]},$plus:function(e,t){return[-1044768619,[4846113,e,t]]}};function nt(e){if("number"==typeof e)return e>=-550577721?e>=60557045?"max-content":"min-content":e>=-789508312?"0":"auto";var t=e[0];if(t>=22643)return t>=25092?25096!==t?t>=26433?t>=5691738?e[1].toString()+"rem":e[1].toString()+"vw":t>=26418?e[1].toString()+"vh":e[1].toString()+"pt":e[1].toString()+"px":t>=24416?t>=25075?e[1].toString()+"pc":e[1].toString()+"mm":t>=22860?e[1].toString()+"fr":e[1].toString()+"ex";if(t>=-833470756)return-119887163!==t?t>=22186?t>=22632?e[1].toString()+"em":e[1].toString()+"cm":t>=22181?e[1].toString()+"ch":e[1].toString()+"vmin":e[1].toString()+"%";if(t>=-977586742)return t>=-833472530?e[1].toString()+"vmax":e[1].toString()+"in";if(t>=-1040484748)return e[1].toString()+"px";var n=e[1];return n[0]>=5745024?"calc("+g.Length.toString(n[1])+" - "+g.Length.toString(n[2])+")":"calc("+g.Length.toString(n[1])+" + "+g.Length.toString(n[2])+")"}function rt(e){if("number"==typeof e)return e>=-789508312?e>=-195805336?e>=60557045?"max-content":"fit-content":e>=-550577721?"min-content":"0":e>=-922086728?"none":"auto";var t=e[0];if(t>=22632)return t>=25092?25096!==t?t>=26433?t>=5691738?e[1].toString()+"rem":e[1].toString()+"vw":t>=26418?e[1].toString()+"vh":e[1].toString()+"pt":e[1].toString()+"px":22643!==t?t>=24416?t>=25075?e[1].toString()+"pc":e[1].toString()+"mm":t>=22860?e[1].toString()+"fr":e[1].toString()+"em":e[1].toString()+"ex";if(t>=-833470756){if(-754859950!==t)return t>=22181?t>=22186?e[1].toString()+"cm":e[1].toString()+"ch":t>=-119887163?e[1].toString()+"%":e[1].toString()+"vmin";var n=e[1];return"minmax("+nt(n[0])+","+nt(n[1])+")"}if(t>=-977586742)return t>=-833472530?e[1].toString()+"vmax":e[1].toString()+"in";if(t>=-1040484748)return e[1].toString()+"px";var r=e[1];return r[0]>=5745024?"calc("+g.Length.toString(r[1])+" - "+g.Length.toString(r[2])+")":"calc("+g.Length.toString(r[1])+" + "+g.Length.toString(r[2])+")"}function it(e){if("number"==typeof e)return e>=-550577721?e>=60557045?"max-content":"min-content":e>=-789508312?"0":"auto";var t=e[0];if(t>=22643){if(t>=25096){if(26418!==t){if(t>=5691738){if(t>=108828507){var n=e[1];return"repeat("+g.RepeatValue.toString(n[0])+", "+rt(n[1])+")"}return e[1].toString()+"rem"}return t>=26433?e[1].toString()+"vw":e[1].toString()+"px"}return e[1].toString()+"vh"}return 22860!==t?t>=25075?t>=25092?e[1].toString()+"pt":e[1].toString()+"pc":t>=24416?e[1].toString()+"mm":e[1].toString()+"ex":e[1].toString()+"fr"}if(t>=-754859950){if(-119887163!==t){if(t>=22186)return t>=22632?e[1].toString()+"em":e[1].toString()+"cm";if(t>=22181)return e[1].toString()+"ch";var r=e[1];return"minmax("+nt(r[0])+","+nt(r[1])+")"}return e[1].toString()+"%"}if(-1040484748!==t){if(t>=-833472530)return t>=-833470756?e[1].toString()+"vmin":e[1].toString()+"vmax";if(t>=-977586742)return e[1].toString()+"in";var i=e[1];return i[0]>=5745024?"calc("+g.Length.toString(i[1])+" - "+g.Length.toString(i[2])+")":"calc("+g.Length.toString(i[1])+" + "+g.Length.toString(i[2])+")"}return e[1].toString()+"px"}function at(e){return u.concat(" ",r.map(it,e))}function ot(e){if("number"==typeof e)return e>=-601204732?e>=653193961?"unset":"inherit":e>=-878767996?"initial":"none";var t=e[0];if(t>=-97740042)return t>=5843823?t>=934407426?t>=1036870963?"hue-rotate("+g.Angle.toString(e[1])+")":"contrast("+e[1].toString()+"%)":t>=534308630?"invert("+e[1].toString()+"%)":"url("+e[1]+")":t>=-29929489?"saturate("+e[1].toString()+"%)":"sepia("+e[1].toString()+"%)";if(-594525841!==t)return t>=-345678389?t>=-214464569?"grayscale("+e[1].toString()+"%)":"opacity("+e[1].toString()+"%)":t>=-445542959?"brightness("+e[1].toString()+"%)":"blur("+g.Length.toString(e[1])+")";var n=e[1];return"drop-shadow("+g.Length.toString(n[0])+" "+g.Length.toString(n[1])+" "+g.Length.toString(n[2])+" "+g.Color.toString(n[3])+")"}function ut(e){return"number"==typeof e?"none":e[1]}var lt={box:function(e,t,n,r,i,a){var o=void 0!==e?e:W,u=void 0!==t?t:W,l=void 0!==n?n:W,c=void 0!==r?r:W,s=void 0!==i&&i;return[488687584,g.Length.toString(o)+" "+g.Length.toString(u)+" "+g.Length.toString(l)+" "+g.Length.toString(c)+" "+g.Color.toString(a)+(s?" inset":"")]},text:function(e,t,n,r){var i=void 0!==e?e:W,a=void 0!==t?t:W,o=void 0!==n?n:W;return[488687584,g.Length.toString(i)+" "+g.Length.toString(a)+" "+g.Length.toString(o)+" "+g.Color.toString(r)]},toString:ut};function ct(e){return-878767996!==e&&-601204732!==e&&653193961!==e?g.BorderStyle.toString(e):g.Cascading.toString(e)}function st(e,t,n,r){var i=void 0!==t?t:0,a=void 0!==n?n:-1022587922;return[834174833,(void 0!==e?e:0).toString()+"ms "+g.TimingFunction.toString(a)+" "+i.toString()+"ms "+r]}function ft(e){return e[1]}var dt={shorthand:st,toString:ft};function pt(e){return a.__(0,["transition",v(s.map(e,ft),", ")])}function gt(e,t,n,r,i,a,o,u){var l=void 0!==t?t:0,c=void 0!==n?n:812216871,s=void 0!==r?r:-1022587922,f=void 0!==i?i:-922086728,d=void 0!==a?a:-345412097,p=void 0!==o?o:[-899463985,1];return[834174833,u+" "+(void 0!==e?e:0).toString()+"ms "+g.TimingFunction.toString(s)+" "+l.toString()+"ms "+g.AnimationIterationCount.toString(p)+" "+g.AnimationDirection.toString(c)+" "+g.AnimationFillMode.toString(f)+" "+g.AnimationPlayState.toString(d)]}function ht(e){return e[1]}var mt={shorthand:gt,toString:ht};var vt=function(e){return c.cx(i.of_list(e))},yt=function(e){return c.css(m(e))},bt=m,_t=x,kt=pt,wt={fill:function(e){return a.__(0,["fill",g.Color.toString(e)])},fillRule:function(e){return a.__(0,["fillRule",e>=110563029?"evenodd":"nonzero"])},fillOpacity:function(e){return a.__(0,["fillOpacity",e.toString()])},stroke:function(e){return a.__(0,["stroke",g.Color.toString(e)])},strokeLinecap:function(e){return a.__(0,["strokeLinecap",-655228771!==e?e>=-312084402?"round":"butt":"square"])},strokeLinejoin:function(e){return a.__(0,["strokeLinejoin",141361157!==e?e>=811681914?"bevel":"round":"miter"])},strokeMiterlimit:function(e){return a.__(0,["strokeMiterlimit",e.toString()])},strokeWidth:function(e){return a.__(0,["strokeWidth",g.Length.toString(e)])},strokeOpacity:function(e){return a.__(0,["strokeOpacity",e.toString()])},stopColor:function(e){return a.__(0,["stopColor",g.Color.toString(e)])},stopOpacity:function(e){return a.__(0,["stopOpacity",e.toString()])}},St=d.aliceblue,xt=d.antiquewhite,Ct=d.aqua,Et=d.aquamarine,Tt=d.azure,At=d.beige,Pt=d.bisque,Ot=d.black,Ft=d.blanchedalmond,Rt=d.blue,Lt=d.blueviolet,zt=d.brown,Nt=d.burlywood,Dt=d.cadetblue,jt=d.chartreuse,It=d.chocolate,Bt=d.coral,Mt=d.cornflowerblue,qt=d.cornsilk,Ut=d.crimson,$t=d.cyan,Wt=d.darkblue,Vt=d.darkcyan,Ht=d.darkgoldenrod,Gt=d.darkgray,Qt=d.darkgrey,Kt=d.darkgreen,Yt=d.darkkhaki,Xt=d.darkmagenta,Zt=d.darkolivegreen,Jt=d.darkorange,en=d.darkorchid,tn=d.darkred,nn=d.darksalmon,rn=d.darkseagreen,an=d.darkslateblue,on=d.darkslategray,un=d.darkslategrey,ln=d.darkturquoise,cn=d.darkviolet,sn=d.deeppink,fn=d.deepskyblue,dn=d.dimgray,pn=d.dimgrey,gn=d.dodgerblue,hn=d.firebrick,mn=d.floralwhite,vn=d.forestgreen,yn=d.fuchsia,bn=d.gainsboro,_n=d.ghostwhite,kn=d.gold,wn=d.goldenrod,Sn=d.gray,xn=d.grey,Cn=d.green,En=d.greenyellow,Tn=d.honeydew,An=d.hotpink,Pn=d.indianred,On=d.indigo,Fn=d.ivory,Rn=d.khaki,Ln=d.lavender,zn=d.lavenderblush,Nn=d.lawngreen,Dn=d.lemonchiffon,jn=d.lightblue,In=d.lightcoral,Bn=d.lightcyan,Mn=d.lightgoldenrodyellow,qn=d.lightgray,Un=d.lightgrey,$n=d.lightgreen,Wn=d.lightpink,Vn=d.lightsalmon,Hn=d.lightseagreen,Gn=d.lightskyblue,Qn=d.lightslategray,Kn=d.lightslategrey,Yn=d.lightsteelblue,Xn=d.lightyellow,Zn=d.lime,Jn=d.limegreen,er=d.linen,tr=d.magenta,nr=d.maroon,rr=d.mediumaquamarine,ir=d.mediumblue,ar=d.mediumorchid,or=d.mediumpurple,ur=d.mediumseagreen,lr=d.mediumslateblue,cr=d.mediumspringgreen,sr=d.mediumturquoise,fr=d.mediumvioletred,dr=d.midnightblue,pr=d.mintcream,gr=d.mistyrose,hr=d.moccasin,mr=d.navajowhite,vr=d.navy,yr=d.oldlace,br=d.olive,_r=d.olivedrab,kr=d.orange,wr=d.orangered,Sr=d.orchid,xr=d.palegoldenrod,Cr=d.palegreen,Er=d.paleturquoise,Tr=d.palevioletred,Ar=d.papayawhip,Pr=d.peachpuff,Or=d.peru,Fr=d.pink,Rr=d.plum,Lr=d.powderblue,zr=d.purple,Nr=d.rebeccapurple,Dr=d.red,jr=d.rosybrown,Ir=d.royalblue,Br=d.saddlebrown,Mr=d.salmon,qr=d.sandybrown,Ur=d.seagreen,$r=d.seashell,Wr=d.sienna,Vr=d.silver,Hr=d.skyblue,Gr=d.slateblue,Qr=d.slategray,Kr=d.slategrey,Yr=d.snow,Xr=d.springgreen,Zr=d.steelblue,Jr=d.tan,ei=d.teal,ti=d.thistle,ni=d.tomato,ri=d.turquoise,ii=d.violet,ai=d.wheat,oi=d.white,ui=d.whitesmoke,li=d.yellow,ci=d.yellowgreen;t.Types=0,t.merge=vt,t.style=yt,t.toJson=bt,t.cache=k,t.$$global=function(e,t){return c.injectGlobal(l.fromList([[e,m(t)],0])),0},t.insertRule=function(e){return c.injectGlobal(e),0},t.important=function(e){return e.tag?e:a.__(0,[e[0],e[1]+" !important"])},t.label=function(e){return a.__(0,["label",e])},t.Shadow=lt,t.unsafe=function(e,t){return a.__(0,[e,t])},t.alignContent=function(e){return a.__(0,["alignContent",e>=287825029?516682146!==e?e>=662439529?812216871!==e?g.AlignContent.toString(e):g.NormalAlignment.toString(e):e>=653193961?g.Cascading.toString(e):g.BaselineAlignment.toString(e):g.DistributedAlignment.toString(e):-1016061555!==e?e>=-485895757?e>=67859554?g.AlignContent.toString(e):g.DistributedAlignment.toString(e):e>=-1021944795?g.Cascading.toString(e):g.AlignContent.toString(e):g.DistributedAlignment.toString(e)])},t.alignItems=function(e){return a.__(0,["alignItems",e>=287825029?e>=662439529?812216871!==e?g.PositionalAlignment.toString(e):g.AlignItems.toString(e):e>=653193961?g.Cascading.toString(e):g.BaselineAlignment.toString(e):e>=-379319332?-162316795!==e?g.PositionalAlignment.toString(e):g.AlignItems.toString(e):e>=-878767996?g.Cascading.toString(e):g.PositionalAlignment.toString(e)])},t.alignSelf=function(e){return a.__(0,["alignSelf",e>=287825029?e>=662439529?812216871!==e?g.PositionalAlignment.toString(e):g.AlignSelf.toString(e):e>=653193961?g.Cascading.toString(e):g.BaselineAlignment.toString(e):e>=-878767996?e>=-379319332?g.PositionalAlignment.toString(e):g.Cascading.toString(e):e>=-1021944796?g.PositionalAlignment.toString(e):g.AlignSelf.toString(e)])},t.animationDelay=function(e){return a.__(0,["animationDelay",e.toString()+"ms"])},t.animationDirection=function(e){return a.__(0,["animationDirection",g.AnimationDirection.toString(e)])},t.animationDuration=function(e){return a.__(0,["animationDuration",e.toString()+"ms"])},t.animationFillMode=function(e){return a.__(0,["animationFillMode",g.AnimationFillMode.toString(e)])},t.animationIterationCount=function(e){return a.__(0,["animationIterationCount",g.AnimationIterationCount.toString(e)])},t.animationPlayState=function(e){return a.__(0,["animationPlayState",g.AnimationPlayState.toString(e)])},t.animationTimingFunction=function(e){return a.__(0,["animationTimingFunction",g.TimingFunction.toString(e)])},t.backfaceVisibility=function(e){return a.__(0,["backfaceVisibility",-862584982!==e&&589592690!==e?g.Cascading.toString(e):g.BackfaceVisibility.toString(e)])},t.backgroundAttachment=function(e){return a.__(0,["backgroundAttachment",e>=-118437525?e>=653193961?g.Cascading.toString(e):g.BackgroundAttachment.toString(e):e>=-878767996?g.Cascading.toString(e):g.BackgroundAttachment.toString(e)])},t.backgroundColor=function(e){return a.__(0,["backgroundColor",g.Color.toString(e)])},t.backgroundClip=function(e){return a.__(0,["backgroundClip",e>=9307263?653193961!==e?g.BackgroundClip.toString(e):g.Cascading.toString(e):e>=-878767996?g.Cascading.toString(e):g.BackgroundClip.toString(e)])},t.backgroundImage=function(e){return a.__(0,["backgroundImage","number"==typeof e?g.BackgroundImage.toString(e):5843823!==e[0]?g.Gradient.toString(e):g.Url.toString(e)])},t.backgroundOrigin=function(e){return a.__(0,["backgroundOrigin",e>=9307263?653193961!==e?g.BackgroundOrigin.toString(e):g.Cascading.toString(e):e>=-878767996?g.Cascading.toString(e):g.BackgroundOrigin.toString(e)])},t.backgroundPosition=function(e){return a.__(0,["backgroundPosition",w(e)])},t.backgroundPositions=function(e){return a.__(0,["backgroundPosition",v(s.map(e,w),", ")])},t.backgroundPosition4=function(e,t,n,r){return a.__(0,["backgroundPosition",o._1(g.BackgroundPosition.X.toString,e)+" "+g.Length.toString(t)+" "+o._1(g.BackgroundPosition.Y.toString,n)+" "+g.Length.toString(r)])},t.backgroundRepeat=function(e){var t;if("number"==typeof e)t=e>=-312084402?e>=653193961?g.Cascading.toString(e):g.BackgroundRepeat.toString(e):-695430532!==e?g.Cascading.toString(e):g.BackgroundRepeat.toString(e);else{var n=e[1];t=g.BackgroundRepeat.toString(n[0])+" "+g.BackgroundRepeat.toString(n[1])}return a.__(0,["backgroundRepeat",t])},t.borderBottom=function(e,t,n){return a.__(0,["borderBottom",g.Length.toString(e)+" "+ct(t)+" "+g.Color.toString(n)])},t.borderBottomColor=function(e){return a.__(0,["borderBottomColor",g.Color.toString(e)])},t.borderBottomLeftRadius=function(e){return a.__(0,["borderBottomLeftRadius",g.Length.toString(e)])},t.borderBottomRightRadius=function(e){return a.__(0,["borderBottomRightRadius",g.Length.toString(e)])},t.borderBottomStyle=function(e){return a.__(0,["borderBottomStyle",ct(e)])},t.borderBottomWidth=function(e){return a.__(0,["borderBottomWidth",g.Length.toString(e)])},t.borderCollapse=function(e){return a.__(0,["borderCollapse",119283555!==e&&e>=-996847250?g.Cascading.toString(e):g.BorderCollapse.toString(e)])},t.borderColor=function(e){return a.__(0,["borderColor",g.Color.toString(e)])},t.borderLeft=function(e,t,n){return a.__(0,["borderLeft",g.Length.toString(e)+" "+ct(t)+" "+g.Color.toString(n)])},t.borderLeftColor=function(e){return a.__(0,["borderLeftColor",g.Color.toString(e)])},t.borderLeftStyle=function(e){return a.__(0,["borderLeftStyle",ct(e)])},t.borderLeftWidth=function(e){return a.__(0,["borderLeftWidth",g.Length.toString(e)])},t.borderRight=function(e,t,n){return a.__(0,["borderRight",g.Length.toString(e)+" "+ct(t)+" "+g.Color.toString(n)])},t.borderRightColor=function(e){return a.__(0,["borderRightColor",g.Color.toString(e)])},t.borderRightStyle=function(e){return a.__(0,["borderRightStyle",ct(e)])},t.borderRightWidth=function(e){return a.__(0,["borderRightWidth",g.Length.toString(e)])},t.borderRadius=function(e){return a.__(0,["borderRadius",g.Length.toString(e)])},t.borderSpacing=function(e){return a.__(0,["borderSpacing",g.Length.toString(e)])},t.borderStyle=function(e){return a.__(0,["borderStyle",ct(e)])},t.borderTopColor=function(e){return a.__(0,["borderTopColor",g.Color.toString(e)])},t.borderTopLeftRadius=function(e){return a.__(0,["borderTopLeftRadius",g.Length.toString(e)])},t.borderTopRightRadius=function(e){return a.__(0,["borderTopRightRadius",g.Length.toString(e)])},t.borderTopStyle=function(e){return a.__(0,["borderTopStyle",ct(e)])},t.borderTopWidth=function(e){return a.__(0,["borderTopWidth",g.Length.toString(e)])},t.borderWidth=function(e){return a.__(0,["borderWidth",g.Length.toString(e)])},t.bottom=function(e){return a.__(0,["bottom","number"==typeof e&&-789508312!==e?g.Cascading.toString(e):g.Length.toString(e)])},t.boxSizing=function(e){return a.__(0,["boxSizing",9307263!==e&&e>=-1008848301?g.Cascading.toString(e):g.BoxSizing.toString(e)])},t.boxShadow=function(e){return a.__(0,["boxShadow","number"==typeof e&&e>=-878767996?g.Cascading.toString(e):ut(e)])},t.boxShadows=function(e){return a.__(0,["boxShadow",v(s.map(e,ut),", ")])},t.clear=function(e){return a.__(0,["clear",e>=-379319332?653193961!==e?g.Clear.toString(e):g.Cascading.toString(e):e>=-878767996?g.Cascading.toString(e):g.Clear.toString(e)])},t.clipPath=function(e){return a.__(0,["clipPath","number"==typeof e?-922086728!==e?e>=-298658179?653193961!==e?g.GeometyBox.toString(e):g.Cascading.toString(e):e>=-1008848301?g.Cascading.toString(e):g.GeometyBox.toString(e):g.ClipPath.toString(e):g.Url.toString(e)])},t.color=function(e){return a.__(0,["color",g.Color.toString(e)])},t.columnCount=function(e){return a.__(0,["columnCount","number"==typeof e&&e>=-878767996?g.Cascading.toString(e):g.ColumnCount.toString(e)])},t.contentRule=function(e){return a.__(0,["content",'"'+String(e)+'"'])},t.cursor=function(e){return a.__(0,["cursor",g.Cursor.toString(e)])},t.direction=function(e){return a.__(0,["direction",e>=5396714&&e<653193961?g.Direction.toString(e):g.Cascading.toString(e)])},t.display=function(e){return a.__(0,["display",e>=97122692?e<653193961?182695950!==e?423610969!==e?e>=632591505?g.DisplayListItem.toString(e):g.DisplayInternal.toString(e):g.DisplayOutside.toString(e):g.DisplayInside.toString(e):e>=793912528?888960333!==e?g.DisplayInternal.toString(e):g.DisplayOutside.toString(e):e>=790889754?g.DisplayBox.toString(e):g.Cascading.toString(e):e>=-854050059?-601204732!==e?e>=-245903344?e>=-147785676?g.DisplayLegacy.toString(e):g.DisplayOutside.toString(e):e>=-843129172?g.DisplayInternal.toString(e):g.DisplayLegacy.toString(e):g.Cascading.toString(e):e>=-922086728?e>=-878767996?g.Cascading.toString(e):g.DisplayBox.toString(e):e>=-1010954439?g.DisplayInside.toString(e):g.DisplayInternal.toString(e)])},t.flex=function(e){return a.__(0,["flex","number"==typeof e?g.Flex.toString(e):e[1].toString()])},t.flexBasis=function(e){return a.__(0,["flexBasis","number"==typeof e&&-789508312!==e?g.FlexBasis.toString(e):g.Length.toString(e)])},t.flexDirection=function(e){return a.__(0,["flexDirection",e>=5693978?e>=653193961?g.Cascading.toString(e):g.FlexDirection.toString(e):e>=-878767996?g.Cascading.toString(e):g.FlexDirection.toString(e)])},t.flexGrow=function(e){return a.__(0,["flexGrow",e.toString()])},t.flexShrink=function(e){return a.__(0,["flexShrink",e.toString()])},t.flexWrap=function(e){return a.__(0,["flexWrap",e>=-463121288?653193961!==e?g.FlexWrap.toString(e):g.Cascading.toString(e):-822134326!==e?g.Cascading.toString(e):g.FlexWrap.toString(e)])},t.$$float=function(e){return a.__(0,["float",e>=-379319332?653193961!==e?g.Float.toString(e):g.Cascading.toString(e):e>=-878767996?g.Cascading.toString(e):g.Float.toString(e)])},t.fontFamily=function(e){return a.__(0,["fontFamily",e])},t.fontSize=function(e){return a.__(0,["fontSize","number"==typeof e&&-789508312!==e?g.Cascading.toString(e):g.Length.toString(e)])},t.fontStyle=function(e){return a.__(0,["fontStyle",107228912!==e&&e<734792881?g.Cascading.toString(e):g.FontStyle.toString(e)])},t.fontVariant=function(e){return a.__(0,["fontVariant",-386684792!==e&&e<812216871?g.Cascading.toString(e):g.FontVariant.toString(e)])},t.fontWeight=function(e){return a.__(0,["fontWeight","number"!=typeof e||-878767996!==e&&-601204732!==e&&653193961!==e?g.FontWeight.toString(e):g.Cascading.toString(e)])},t.gridArea=function(e){return a.__(0,["gridArea","number"==typeof e&&e>=-878767996?g.Cascading.toString(e):g.GridArea.toString(e)])},t.gridArea2=function(e,t){return a.__(0,["gridArea",g.GridArea.toString(e)+" / "+g.GridArea.toString(t)])},t.gridArea3=function(e,t,n){return a.__(0,["gridArea",g.GridArea.toString(e)+" / "+g.GridArea.toString(t)+" / "+g.GridArea.toString(n)])},t.gridArea4=function(e,t,n,r){return a.__(0,["gridArea",g.GridArea.toString(e)+" / "+g.GridArea.toString(t)+" / "+g.GridArea.toString(n)+" / "+g.GridArea.toString(r)])},t.gridAutoFlow=function(e){return a.__(0,["gridAutoFlow",e>=-227605271?e>=653193961?g.Cascading.toString(e):g.GridAutoFlow.toString(e):e>=-878767996?g.Cascading.toString(e):g.GridAutoFlow.toString(e)])},t.gridColumn=function(e,t){return a.__(0,["gridColumn",e.toString()+" / "+t.toString()])},t.gridColumnEnd=function(e){return a.__(0,["gridColumnEnd",e.toString()])},t.gridColumnGap=function(e){return a.__(0,["gridColumnGap","number"==typeof e?-789508312!==e?e>=812216871?g.GridColumnGap.toString(e):g.Cascading.toString(e):g.Length.toString(e):-119887163!==e[0]?g.Length.toString(e):g.Percentage.toString(e)])},t.gridColumnStart=function(e){return a.__(0,["gridColumnStart",e.toString()])},t.gridGap=function(e){return a.__(0,["gridGap","number"==typeof e?-789508312!==e?g.Cascading.toString(e):g.Length.toString(e):-119887163!==e[0]?g.Length.toString(e):g.Percentage.toString(e)])},t.gridRow=function(e,t){return a.__(0,["gridRow",e.toString()+" / "+t.toString()])},t.gridRowEnd=function(e){return a.__(0,["gridRowEnd",e.toString()])},t.gridRowGap=function(e){return a.__(0,["gridRowGap","number"==typeof e?-789508312!==e?g.Cascading.toString(e):g.Length.toString(e):-119887163!==e[0]?g.Length.toString(e):g.Percentage.toString(e)])},t.gridRowStart=function(e){return a.__(0,["gridRowStart",e.toString()])},t.gridTemplateAreas=function(e){return a.__(0,["gridTemplateAreas","number"==typeof e&&e>=-878767996?g.Cascading.toString(e):g.GridTemplateAreas.toString(e)])},t.height=function(e){return a.__(0,["height","number"==typeof e?-789508312!==e?e>=-1065951376?g.Cascading.toString(e):g.Height.toString(e):g.Length.toString(e):-119887163!==e[0]?g.Length.toString(e):g.Percentage.toString(e)])},t.justifyContent=function(e){return a.__(0,["justifyContent",e>=-162316795?e>=516682146?e>=662439529?812216871!==e?g.PositionalAlignment.toString(e):g.NormalAlignment.toString(e):e>=653193961?g.Cascading.toString(e):g.DistributedAlignment.toString(e):e>=51834799?g.PositionalAlignment.toString(e):g.DistributedAlignment.toString(e):-1016061555!==e?e>=-485895757?e>=-379319332?g.PositionalAlignment.toString(e):g.DistributedAlignment.toString(e):e>=-878767996?g.Cascading.toString(e):g.PositionalAlignment.toString(e):g.DistributedAlignment.toString(e)])},t.justifySelf=function(e){return a.__(0,["justifySelf",e>=51834799?287825029!==e?653193961!==e?812216871!==e?g.PositionalAlignment.toString(e):g.JustifySelf.toString(e):g.Cascading.toString(e):g.BaselineAlignment.toString(e):-379319332!==e?e>=-878767996?e>=-162316795?g.JustifySelf.toString(e):g.Cascading.toString(e):e>=-1021944796?g.PositionalAlignment.toString(e):g.JustifySelf.toString(e):g.PositionalAlignment.toString(e)])},t.left=function(e){return a.__(0,["left","number"==typeof e&&-789508312!==e?g.Cascading.toString(e):g.Length.toString(e)])},t.letterSpacing=function(e){return a.__(0,["letterSpacing","number"==typeof e&&-789508312!==e?e>=812216871?g.LetterSpacing.toString(e):g.Cascading.toString(e):g.Length.toString(e)])},t.lineHeight=function(e){return a.__(0,["lineHeight","number"==typeof e?-789508312!==e?e>=812216871?g.LineHeight.toString(e):g.Cascading.toString(e):g.Length.toString(e):4845682!==e[0]?g.Length.toString(e):g.LineHeight.toString(e)])},t.listStyle=function(e,t,n){return a.__(0,["listStyle",g.ListStyleType.toString(e)+" "+g.ListStylePosition.toString(t)+" "+("number"==typeof n?g.ListStyleImage.toString(n):g.Url.toString(n))])},t.listStyleImage=function(e){return a.__(0,["listStyleImage","number"==typeof e?e>=-878767996?g.Cascading.toString(e):g.ListStyleImage.toString(e):g.Url.toString(e)])},t.listStyleType=function(e){return a.__(0,["listStyleType",-878767996!==e&&-601204732!==e&&653193961!==e?g.ListStyleType.toString(e):g.Cascading.toString(e)])},t.listStylePosition=function(e){return a.__(0,["listStylePosition",e>=-430011099&&e<653193961?g.ListStylePosition.toString(e):g.Cascading.toString(e)])},t.margin=function(e){return a.__(0,["margin",S(e)])},t.margin2=function(e,t){return a.__(0,["margin",S(e)+" "+S(t)])},t.margin3=function(e,t,n){return a.__(0,["margin",S(e)+" "+S(t)+" "+S(n)])},t.margin4=function(e,t,n,r){return a.__(0,["margin",S(e)+" "+S(t)+" "+S(n)+" "+S(r)])},t.marginLeft=function(e){return a.__(0,["marginLeft",S(e)])},t.marginRight=function(e){return a.__(0,["marginRight",S(e)])},t.marginTop=function(e){return a.__(0,["marginTop",S(e)])},t.marginBottom=function(e){return a.__(0,["marginBottom",S(e)])},t.maxHeight=function(e){return a.__(0,["maxHeight","number"==typeof e?-789508312!==e?e>=-922086727?g.Cascading.toString(e):g.MaxHeight.toString(e):g.Length.toString(e):-119887163!==e[0]?g.Length.toString(e):g.Percentage.toString(e)])},t.maxWidth=function(e){return a.__(0,["maxWidth","number"==typeof e?-789508312!==e?e>=-922086727?g.Cascading.toString(e):g.MaxWidth.toString(e):g.Length.toString(e):-119887163!==e[0]?g.Length.toString(e):g.Percentage.toString(e)])},t.minHeight=function(e){return a.__(0,["minHeight","number"==typeof e?-789508312!==e?e>=-1065951376?g.Cascading.toString(e):g.Height.toString(e):g.Length.toString(e):-119887163!==e[0]?g.Length.toString(e):g.Percentage.toString(e)])},t.minWidth=function(e){return a.__(0,["minWidth","number"==typeof e?-789508312!==e?-195805336!==e&&e>=-1065951376?g.Cascading.toString(e):g.Width.toString(e):g.Length.toString(e):-119887163!==e[0]?g.Length.toString(e):g.Percentage.toString(e)])},t.objectFit=function(e){return a.__(0,["objectFit",e>=427065300?e>=653193961?g.Cascading.toString(e):g.ObjectFit.toString(e):e>=-878767996?g.Cascading.toString(e):g.ObjectFit.toString(e)])},t.opacity=function(e){return a.__(0,["opacity",e.toString()])},t.order=function(e){return a.__(0,["order",e.toString()])},t.outline=function(e,t,n){return a.__(0,["outline",g.Length.toString(e)+" "+g.OutlineStyle.toString(t)+" "+g.Color.toString(n)])},t.outlineColor=function(e){return a.__(0,["outlineColor",g.Color.toString(e)])},t.outlineOffset=function(e){return a.__(0,["outlineOffset",g.Length.toString(e)])},t.outlineStyle=function(e){return a.__(0,["outlineStyle",g.OutlineStyle.toString(e)])},t.outlineWidth=function(e){return a.__(0,["outlineWidth",g.Length.toString(e)])},t.overflow=function(e){return a.__(0,["overflow",g.Overflow.toString(e)])},t.overflowX=function(e){return a.__(0,["overflowX",g.Overflow.toString(e)])},t.overflowY=function(e){return a.__(0,["overflowY",g.Overflow.toString(e)])},t.overflowWrap=x,t.padding=function(e){return a.__(0,["padding",g.Length.toString(e)])},t.padding2=function(e,t){return a.__(0,["padding",g.Length.toString(e)+" "+g.Length.toString(t)])},t.padding3=function(e,t,n){return a.__(0,["padding",g.Length.toString(e)+" "+g.Length.toString(t)+" "+g.Length.toString(n)])},t.padding4=function(e,t,n,r){return a.__(0,["padding",g.Length.toString(e)+" "+g.Length.toString(t)+" "+g.Length.toString(n)+" "+g.Length.toString(r)])},t.paddingLeft=function(e){return a.__(0,["paddingLeft",g.Length.toString(e)])},t.paddingRight=function(e){return a.__(0,["paddingRight",g.Length.toString(e)])},t.paddingTop=function(e){return a.__(0,["paddingTop",g.Length.toString(e)])},t.paddingBottom=function(e){return a.__(0,["paddingBottom",g.Length.toString(e)])},t.perspective=function(e){return a.__(0,["perspective","number"==typeof e&&-789508312!==e?e>=-922086727?g.Cascading.toString(e):g.Perspective.toString(e):g.Length.toString(e)])},t.perspectiveOrigin=function(e,t){return a.__(0,["perspectiveOrigin",("number"==typeof e&&e<-789508312?g.Perspective.toString(e):g.Length.toString(e))+" "+("number"==typeof t&&t<-789508312?g.Perspective.toString(t):g.Length.toString(t))])},t.pointerEvents=function(e){return a.__(0,["pointerEvents",e>=-878767996?g.Cascading.toString(e):g.PointerEvents.toString(e)])},t.position=function(e){return a.__(0,["position",e>=10615156?653193961!==e?g.Position.toString(e):g.Cascading.toString(e):e>=-878767996?g.Cascading.toString(e):g.Position.toString(e)])},t.resize=function(e){return a.__(0,["resize",e>=-367674250?653193961!==e?g.Resize.toString(e):g.Cascading.toString(e):e>=-878767996?g.Cascading.toString(e):g.Resize.toString(e)])},t.right=function(e){return a.__(0,["right","number"==typeof e&&-789508312!==e?g.Cascading.toString(e):g.Length.toString(e)])},t.tableLayout=function(e){return a.__(0,["tableLayout",10615156!==e&&e>=-1065951376?g.Cascading.toString(e):g.TableLayout.toString(e)])},t.textAlign=function(e){return a.__(0,["textAlign",e>=-379319332?e>=653193961?g.Cascading.toString(e):g.TextAlign.toString(e):e>=-878767996?g.Cascading.toString(e):g.TextAlign.toString(e)])},t.textDecorationColor=function(e){return a.__(0,["textDecorationColor","number"!=typeof e||e>=292050538&&e<653193961?g.Color.toString(e):g.Cascading.toString(e)])},t.textDecorationLine=function(e){return a.__(0,["textDecorationLine",e>=131142924?653193961!==e?g.TextDecorationLine.toString(e):g.Cascading.toString(e):e>=-878767996?g.Cascading.toString(e):g.TextDecorationLine.toString(e)])},t.textDecorationStyle=function(e){return a.__(0,["textDecorationStyle",e>=12956715?653193961!==e?g.TextDecorationStyle.toString(e):g.Cascading.toString(e):-822975027!==e?g.Cascading.toString(e):g.TextDecorationStyle.toString(e)])},t.textIndent=function(e){return a.__(0,["textIndent","number"==typeof e?-789508312!==e?g.Cascading.toString(e):g.Length.toString(e):-119887163!==e[0]?g.Length.toString(e):g.Percentage.toString(e)])},t.textOverflow=function(e){return a.__(0,["textOverflow","number"==typeof e&&166888785!==e&&e>=-1044222255?g.Cascading.toString(e):g.TextOverflow.toString(e)])},t.textShadow=function(e){return a.__(0,["textShadow","number"==typeof e&&e>=-878767996?g.Cascading.toString(e):ut(e)])},t.textShadows=function(e){return a.__(0,["textShadow",v(s.map(e,ut),", ")])},t.textTransform=function(e){return a.__(0,["textTransform",e>=-509867604?e>=653193961?g.Cascading.toString(e):g.TextTransform.toString(e):e>=-878767996?g.Cascading.toString(e):g.TextTransform.toString(e)])},t.top=function(e){return a.__(0,["top","number"==typeof e&&-789508312!==e?g.Cascading.toString(e):g.Length.toString(e)])},t.transform=function(e){return a.__(0,["transform",g.Transform.toString(e)])},t.transforms=function(e){return a.__(0,["transform",v(s.map(e,g.Transform.toString)," ")])},t.transformOrigin=function(e,t){return a.__(0,["transformOrigin",g.Length.toString(e)+" "+g.Length.toString(t)])},t.transformOrigin3d=function(e,t,n){return a.__(0,["transformOrigin",g.Length.toString(e)+" "+g.Length.toString(t)+" "+g.Length.toString(n)+" "])},t.transitionDelay=function(e){return a.__(0,["transitionDelay",e.toString()+"ms"])},t.transitionDuration=function(e){return a.__(0,["transitionDuration",e.toString()+"ms"])},t.transitionProperty=function(e){return a.__(0,["transitionProperty",e])},t.transformStyle=function(e){return a.__(0,["transformStyle",589702045!==e&&e>=-1010955334?g.Cascading.toString(e):g.TransformStyle.toString(e)])},t.transitionTimingFunction=function(e){return a.__(0,["transitionTimingFunction",g.TimingFunction.toString(e)])},t.userSelect=function(e){return a.__(0,["userSelect",-878767996!==e&&-601204732!==e&&e<653193961?g.UserSelect.toString(e):g.Cascading.toString(e)])},t.verticalAlign=function(e){return a.__(0,["verticalAlign","number"==typeof e?-866200747!==e?e>=-445061397?e>=653193961?g.Cascading.toString(e):g.VerticalAlign.toString(e):-789508312!==e?g.Cascading.toString(e):g.Length.toString(e):g.VerticalAlign.toString(e):g.Length.toString(e)])},t.visibility=function(e){return a.__(0,["visibility",e>=-601204732?589592690!==e?g.Cascading.toString(e):g.Visibility.toString(e):-878767996!==e?g.Visibility.toString(e):g.Cascading.toString(e)])},t.width=function(e){return a.__(0,["width","number"==typeof e?-789508312!==e?-195805336!==e&&e>=-1065951376?g.Cascading.toString(e):g.Width.toString(e):g.Length.toString(e):-119887163!==e[0]?g.Length.toString(e):g.Percentage.toString(e)])},t.whiteSpace=function(e){return a.__(0,["whiteSpace",653193961!==e&&e>=-601204731?g.WhiteSpace.toString(e):g.Cascading.toString(e)])},t.wordBreak=function(e){return a.__(0,["wordBreak",-323760734!==e&&e<812216871?g.Cascading.toString(e):g.WordBreak.toString(e)])},t.wordSpacing=function(e){return a.__(0,["wordSpacing","number"==typeof e?-789508312!==e?e>=812216871?g.WordSpacing.toString(e):g.Cascading.toString(e):g.Length.toString(e):-119887163!==e[0]?g.Length.toString(e):g.Percentage.toString(e)])},t.wordWrap=_t,t.zIndex=function(e){return a.__(0,["zIndex",e.toString()])},t.selector=function(e,t){return a.__(1,[e,t])},t.media=function(e,t){return a.__(1,["@media "+e,t])},t.active=function(e){return a.__(2,["active",e])},t.checked=function(e){return a.__(2,["checked",e])},t.$$default=C,t.default=C,t.__esModule=!0,t.defined=function(e){return a.__(2,["defined",e])},t.disabled=function(e){return a.__(2,["disabled",e])},t.empty=function(e){return a.__(2,["empty",e])},t.enabled=function(e){return a.__(2,["enabled",e])},t.first=function(e){return a.__(2,["first",e])},t.firstChild=function(e){return a.__(2,["first-child",e])},t.firstOfType=function(e){return a.__(2,["first-of-type",e])},t.focus=function(e){return a.__(2,["focus",e])},t.focusWithin=function(e){return a.__(2,["focus-within",e])},t.host=function(e,t){return void 0!==e?a.__(3,["host",e,t]):a.__(2,["host",t])},t.hover=function(e){return a.__(2,["hover",e])},t.indeterminate=function(e){return a.__(2,["indeterminate",e])},t.inRange=function(e){return a.__(2,["in-range",e])},t.invalid=function(e){return a.__(2,["invalid",e])},t.lang=function(e,t){return a.__(3,["lang",e,t])},t.lastChild=function(e){return a.__(2,["last-child",e])},t.lastOfType=function(e){return a.__(2,["last-of-type",e])},t.link=function(e){return a.__(2,["link",e])},t.not__=function(e,t){return a.__(3,["not",e,t])},t.Nth=T,t.nthChild=function(e,t){return a.__(3,["nth-child",E(e),t])},t.nthLastChild=function(e,t){return a.__(3,["nth-last-child",E(e),t])},t.nthLastOfType=function(e,t){return a.__(3,["nth-last-of-type",E(e),t])},t.nthOfType=function(e,t){return a.__(3,["nth-of-type",E(e),t])},t.onlyChild=function(e){return a.__(2,["only-child",e])},t.onlyOfType=function(e){return a.__(2,["only-of-type",e])},t.optional=function(e){return a.__(2,["optional",e])},t.outOfRange=function(e){return a.__(2,["out-of-range",e])},t.readOnly=function(e){return a.__(2,["read-only",e])},t.readWrite=function(e){return a.__(2,["read-write",e])},t.required=function(e){return a.__(2,["required",e])},t.root=function(e){return a.__(2,["root",e])},t.scope=function(e){return a.__(2,["scope",e])},t.target=function(e){return a.__(2,["target",e])},t.valid=function(e){return a.__(2,["valid",e])},t.visited=function(e){return a.__(2,["visited",e])},t.after=function(e){return a.__(1,["::after",e])},t.before=function(e){return a.__(1,["::before",e])},t.firstLetter=function(e){return a.__(1,["::first-letter",e])},t.firstLine=function(e){return a.__(1,["::first-line",e])},t.placeholder=function(e){return a.__(1,["::placeholder",e])},t.selection=function(e){return a.__(1,["::selection",e])},t.child=function(e){var t=" > "+e;return function(e){return a.__(1,[t,e])}},t.children=function(e){return a.__(1,[" > *",e])},t.directSibling=function(e){return a.__(1,[" + ",e])},t.siblings=function(e){return a.__(1,[" ~ ",e])},t.anyLink=function(e){return a.__(1,[":any-link",e])},t.initial=A,t.inherit_=P,t.unset=O,t.pct=F,t.ch=R,t.cm=L,t.em=z,t.ex=N,t.mm=D,t.pt=j,t.px=I,t.pxFloat=B,t.rem=M,t.vh=q,t.vmin=U,t.vmax=$,t.zero=W,t.deg=V,t.rad=H,t.grad=G,t.turn=Q,t.ltr=K,t.rtl=Y,t.absolute=X,t.relative=Z,t.$$static=J,t.fixed=10615156,t.sticky=ee,t.horizontal=te,t.vertical=ne,t.smallCaps=re,t.italic=ie,t.oblique=ae,t.hidden=-862584982,t.visible=589592690,t.scroll=-949692403,t.auto=-1065951377,t.rgb=oe,t.rgba=ue,t.hsl=le,t.hsla=ce,t.hex=se,t.transparent=de,t.currentColor=fe,t.none=-922086728,t.local=-118437525,t.paddingBox=972575930,t.borderBox=9307263,t.contentBox=-1008848302,t.noRepeat=-695430532,t.space=23497926,t.repeat=108828507,t.minmax=-754859950,t.repeatX=646437021,t.repeatY=646437022,t.contain=427065300,t.cover=-899416265,t.row=5693978,t.rowReverse=378951208,t.column=-963948842,t.columnReverse=135477484,t.wrap=-822134326,t.nowrap=867913355,t.wrapReverse=-463121288,t.inline=423610969,t.block=888960333,t.contents=790889754,t.flexBox=-1010954439,t.grid=-999565626,t.inlineBlock=-147785676,t.inlineFlex=53323314,t.inlineGrid=64712127,t.inlineTable=-854050059,t.listItem=632591505,t.runIn=-245903344,t.table=182695950,t.tableCaption=1054826616,t.tableColumnGroup=850209563,t.tableHeaderGroup=606419204,t.tableFooterGroup=-1045696202,t.tableRowGroup=-836725517,t.tableCell=793912528,t.tableColumn=97122692,t.tableRow=-843129172,t.flexStart=662439529,t.flexEnd=924268066,t.center=98248149,t.stretch=-162316795,t.spaceBetween=516682146,t.spaceAround=-485895757,t.spaceEvenly=-1016061555,t.baseline=287825029,t.forwards=733653774,t.backwards=245861168,t.both=-1055160191,t.infinite=-630647084,t.count=function(e){return[-899463985,e]},t.paused=-276545362,t.running=-345412097,t.inside=501235708,t.outside=-430011099,t.solid=12956715,t.dotted=841979626,t.dashed=568403505,t.underline=131142924,t.overline=-986651832,t.lineThrough=412155569,t.clip=-1044222256,t.ellipsis=166888785,t.wavy=-822975027,t.$$double=852175633,t.uppercase=-415330030,t.lowercase=-425349839,t.capitalize=-509867604,t.sub=5745024,t.$$super=79692155,t.textTop=516406248,t.textBottom=476669816,t.middle=-866200747,t.normal=812216871,t.breakAll=-323760734,t.keepAll=892748188,t.breakWord=1059921449,t.reverse=452737314,t.alternate=892586298,t.alternateReverse=545428232,t.fill=-1011102077,t.content=427265337,t.maxContent=60557045,t.minContent=-550577721,t.fitContent=-195805336,t.all=4847905,t.text=-856044371,t.round=-312084402,t.miter=141361157,t.bevel=811681914,t.butt=-1054861805,t.square=-655228771,t.thin=Ue,t.extraLight=$e,t.light=We,t.medium=Ve,t.semiBold=He,t.bold=Ge,t.extraBold=Qe,t.lighter=Ke,t.bolder=Ye,t.fr=function(e){return[22860,e]},t.vw=function(e){return[26433,e]},t.localUrl=function(e){return[-538079548,e]},t.url=function(e){return[5843823,e]},t.linear=pe,t.ease=ge,t.easeIn=he,t.easeOut=ve,t.easeInOut=me,t.stepStart=ye,t.stepEnd=be,t.steps=_e,t.cubicBezier=ke,t.marginBox=we,t.fillBox=Se,t.strokeBox=xe,t.viewBox=Ce,t.translate=Ee,t.translate3d=Te,t.translateX=Ae,t.translateY=Pe,t.translateZ=Oe,t.scale=je,t.scale3d=Ie,t.scaleX=Fe,t.scaleY=Re,t.scaleZ=Le,t.rotate=function(e){return[-887077285,e]},t.rotate3d=function(e,t,n,r){return[142802924,[e,t,n,r]]},t.rotateX=ze,t.rotateY=Ne,t.rotateZ=De,t.skew=Be,t.skewX=Me,t.skewY=qe,t.linearGradient=Xe,t.repeatingLinearGradient=Ze,t.radialGradient=Je,t.repeatingRadialGradient=et,t.flex3=function(e,t,n){return a.__(0,["flex",e.toString()+" "+t.toString()+" "+("number"==typeof n&&-789508312!==n?g.FlexBasis.toString(n):g.Length.toString(n))])},t.border=function(e,t,n){return a.__(0,["border",g.Length.toString(e)+" "+ct(t)+" "+g.Color.toString(n)])},t.borderTop=function(e,t,n){return a.__(0,["borderTop",g.Length.toString(e)+" "+ct(t)+" "+g.Color.toString(n)])},t.backgroundSize=function(e){var t;if("number"==typeof e)t=-899416265!==e?e>=427065300?"contain":"auto":"cover";else{var n=e[1];t=g.Length.toString(n[0])+" "+g.Length.toString(n[1])}return a.__(0,["backgroundSize",t])},t.textDecoration=function(e){return a.__(0,["textDecoration",e>=-601204732?e>=412155569?e>=653193961?"unset":"line-through":e>=131142924?"underline":"inherit":-922086728!==e?e>=-878767996?"initial":"overline":"none"])},t.background=function(e){return a.__(0,["background",_(e)])},t.backgrounds=function(e){return a.__(0,["background",v(s.map(e,_),", ")])},t.gridAutoColumns=function(e){return a.__(0,["gridAutoColumns",rt(e)])},t.gridAutoRows=function(e){return a.__(0,["gridAutoRows",rt(e)])},t.gridTemplateColumns=function(e){return a.__(0,["gridTemplateColumns",at(e)])},t.gridTemplateRows=function(e){return a.__(0,["gridTemplateRows",at(e)])},t.Calc=tt,t.size=function(e,t){return[-866934591,[e,t]]},t.filter=function(e){return a.__(0,["filter",v(s.map(e,ot)," ")])},t.fontFace=function(e,t,n,i,a){var o=f.map((function(e){return g.FontStyle.toString(e)}),n),l=u.concat(", ",r.map((function(e){return e[0]>=5843823?'url("'+String(e[1])+'")':'local("'+String(e[1])+'")'}),t)),s=p.mapWithDefault(o,"",(function(e){return"font-style: "+e})),d=p.mapWithDefault(i,"",(function(e){return"font-weight: "+("number"!=typeof e||-878767996!==e&&-601204732!==e&&653193961!==e?g.FontWeight.toString(e):g.Cascading.toString(e))})),h="@font-face {\n    font-family: "+String(e)+";\n    src: "+String(l)+";\n    "+String(s)+";\n    "+String(d)+";\n}";return c.injectGlobal(h),e},t.Transition=dt,t.transitionValue=function(e){return a.__(0,["transition",e[1]])},t.transitionList=pt,t.transition=function(e,t,n,r){var i=st(e,t,n,r);return a.__(0,["transition",i[1]])},t.transitions=kt,t.keyframes=function(e){return c.keyframes(r.fold_left((function(e,t){return e[t[0].toString()+"%"]=m(t[1]),e}),{},e))},t.Animation=mt,t.animationValue=function(e){return a.__(0,["animation",e[1]])},t.animation=function(e,t,n,r,i,o,u,l){var c=gt(e,t,n,r,i,o,u,l);return a.__(0,["animation",c[1]])},t.animations=function(e){return a.__(0,["animation",v(s.map(e,ht),", ")])},t.animationName=function(e){return a.__(0,["animationName",e])},t.SVG=wt,t.aliceblue=St,t.antiquewhite=xt,t.aqua=Ct,t.aquamarine=Et,t.azure=Tt,t.beige=At,t.bisque=Pt,t.black=Ot,t.blanchedalmond=Ft,t.blue=Rt,t.blueviolet=Lt,t.brown=zt,t.burlywood=Nt,t.cadetblue=Dt,t.chartreuse=jt,t.chocolate=It,t.coral=Bt,t.cornflowerblue=Mt,t.cornsilk=qt,t.crimson=Ut,t.cyan=$t,t.darkblue=Wt,t.darkcyan=Vt,t.darkgoldenrod=Ht,t.darkgray=Gt,t.darkgrey=Qt,t.darkgreen=Kt,t.darkkhaki=Yt,t.darkmagenta=Xt,t.darkolivegreen=Zt,t.darkorange=Jt,t.darkorchid=en,t.darkred=tn,t.darksalmon=nn,t.darkseagreen=rn,t.darkslateblue=an,t.darkslategray=on,t.darkslategrey=un,t.darkturquoise=ln,t.darkviolet=cn,t.deeppink=sn,t.deepskyblue=fn,t.dimgray=dn,t.dimgrey=pn,t.dodgerblue=gn,t.firebrick=hn,t.floralwhite=mn,t.forestgreen=vn,t.fuchsia=yn,t.gainsboro=bn,t.ghostwhite=_n,t.gold=kn,t.goldenrod=wn,t.gray=Sn,t.grey=xn,t.green=Cn,t.greenyellow=En,t.honeydew=Tn,t.hotpink=An,t.indianred=Pn,t.indigo=On,t.ivory=Fn,t.khaki=Rn,t.lavender=Ln,t.lavenderblush=zn,t.lawngreen=Nn,t.lemonchiffon=Dn,t.lightblue=jn,t.lightcoral=In,t.lightcyan=Bn,t.lightgoldenrodyellow=Mn,t.lightgray=qn,t.lightgrey=Un,t.lightgreen=$n,t.lightpink=Wn,t.lightsalmon=Vn,t.lightseagreen=Hn,t.lightskyblue=Gn,t.lightslategray=Qn,t.lightslategrey=Kn,t.lightsteelblue=Yn,t.lightyellow=Xn,t.lime=Zn,t.limegreen=Jn,t.linen=er,t.magenta=tr,t.maroon=nr,t.mediumaquamarine=rr,t.mediumblue=ir,t.mediumorchid=ar,t.mediumpurple=or,t.mediumseagreen=ur,t.mediumslateblue=lr,t.mediumspringgreen=cr,t.mediumturquoise=sr,t.mediumvioletred=fr,t.midnightblue=dr,t.mintcream=pr,t.mistyrose=gr,t.moccasin=hr,t.navajowhite=mr,t.navy=vr,t.oldlace=yr,t.olive=br,t.olivedrab=_r,t.orange=kr,t.orangered=wr,t.orchid=Sr,t.palegoldenrod=xr,t.palegreen=Cr,t.paleturquoise=Er,t.palevioletred=Tr,t.papayawhip=Ar,t.peachpuff=Pr,t.peru=Or,t.pink=Fr,t.plum=Rr,t.powderblue=Lr,t.purple=zr,t.rebeccapurple=Nr,t.red=Dr,t.rosybrown=jr,t.royalblue=Ir,t.saddlebrown=Br,t.salmon=Mr,t.sandybrown=qr,t.seagreen=Ur,t.seashell=$r,t.sienna=Wr,t.silver=Vr,t.skyblue=Hr,t.slateblue=Gr,t.slategray=Qr,t.slategrey=Kr,t.snow=Yr,t.springgreen=Xr,t.steelblue=Zr,t.tan=Jr,t.teal=ei,t.thistle=ti,t.tomato=ni,t.turquoise=ri,t.violet=ii,t.wheat=ai,t.white=oi,t.whitesmoke=ui,t.yellow=li,t.yellowgreen=ci},function(e,t,n){"use strict";var r=n(0),i=n(69);var a=function(e){var t=e.children;return r.createElement("div",{className:i.Styles.container},t)};t.make=a},function(e,t,n){"use strict";function r(e,t){return e<t?-1:e===t?0:1}function i(e,t,n,r,i){for(;;){var a=n;if(!(a<r))return i;var o=e[a],u=t[a];if(o>u)return 1;if(o<u)return-1;n=a+1|0}}var a=r,o=r;t.caml_bytes_compare=function(e,t){var n=e.length,r=t.length;return n===r?i(e,t,0,n,0):n<r?i(e,t,0,n,-1):i(e,t,0,r,1)},t.caml_bytes_equal=function(e,t){var n=e.length;if(n!==t.length)return!1;for(var r=e,i=t,a=0,o=n;;){var u=a;if(u===o)return!0;if(r[u]!==i[u])return!1;a=u+1|0}},t.caml_int_compare=r,t.caml_bool_compare=function(e,t){return e?t?0:1:t?-1:0},t.caml_float_compare=function(e,t){return e===t?0:e<t?-1:e>t||e==e?1:t==t?-1:0},t.caml_nativeint_compare=a,t.caml_string_compare=function(e,t){return e===t?0:e<t?-1:1},t.caml_int32_compare=o,t.caml_bool_min=function(e,t){return e?t:e},t.caml_int_min=function(e,t){return e<t?e:t},t.caml_float_min=function(e,t){return e<t?e:t},t.caml_string_min=function(e,t){return e<t?e:t},t.caml_nativeint_min=function(e,t){return e<t?e:t},t.caml_int32_min=function(e,t){return e<t?e:t},t.caml_bool_max=function(e,t){return e||t},t.caml_int_max=function(e,t){return e>t?e:t},t.caml_float_max=function(e,t){return e>t?e:t},t.caml_string_max=function(e,t){return e>t?e:t},t.caml_nativeint_max=function(e,t){return e>t?e:t},t.caml_int32_max=function(e,t){return e>t?e:t}},function(e,t,n){"use strict";var r=n(25);r.getState.redux_store;var i={redux_store:0,dispatch:function(e){return r.dispatch(e),0}};t.textEl=function(e){return e},t.ReduxUtils=i,t.find_unique_arr_value=function(e){var t=new Set(e).values();return Array.from(t)}},function(e,t){function n(){return{baseUrl:null,breaks:!1,gfm:!0,headerIds:!0,headerPrefix:"",highlight:null,langPrefix:"language-",mangle:!0,pedantic:!1,renderer:null,sanitize:!1,sanitizer:null,silent:!1,smartLists:!1,smartypants:!1,tokenizer:null,xhtml:!1}}e.exports={defaults:{baseUrl:null,breaks:!1,gfm:!0,headerIds:!0,headerPrefix:"",highlight:null,langPrefix:"language-",mangle:!0,pedantic:!1,renderer:null,sanitize:!1,sanitizer:null,silent:!1,smartLists:!1,smartypants:!1,tokenizer:null,xhtml:!1},getDefaults:n,changeDefaults:function(t){e.exports.defaults=t}}},function(e,t){const n=/[&<>"']/,r=/[&<>"']/g,i=/[<>"']|&(?!#?\w+;)/,a=/[<>"']|&(?!#?\w+;)/g,o={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},u=e=>o[e];const l=/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/gi;function c(e){return e.replace(l,(e,t)=>"colon"===(t=t.toLowerCase())?":":"#"===t.charAt(0)?"x"===t.charAt(1)?String.fromCharCode(parseInt(t.substring(2),16)):String.fromCharCode(+t.substring(1)):"")}const s=/(^|[^\[])\^/g;const f=/[^\w:]/g,d=/^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;const p={},g=/^[^:]+:\/*[^/]*$/,h=/^([^:]+:)[\s\S]*$/,m=/^([^:]+:\/*[^/]*)[\s\S]*$/;function v(e,t){p[" "+e]||(g.test(e)?p[" "+e]=e+"/":p[" "+e]=y(e,"/",!0));const n=-1===(e=p[" "+e]).indexOf(":");return"//"===t.substring(0,2)?n?t:e.replace(h,"$1")+t:"/"===t.charAt(0)?n?t:e.replace(m,"$1")+t:e+t}function y(e,t,n){const r=e.length;if(0===r)return"";let i=0;for(;i<r;){const a=e.charAt(r-i-1);if(a!==t||n){if(a===t||!n)break;i++}else i++}return e.substr(0,r-i)}e.exports={escape:function(e,t){if(t){if(n.test(e))return e.replace(r,u)}else if(i.test(e))return e.replace(a,u);return e},unescape:c,edit:function(e,t){e=e.source||e,t=t||"";const n={replace:(t,r)=>(r=(r=r.source||r).replace(s,"$1"),e=e.replace(t,r),n),getRegex:()=>new RegExp(e,t)};return n},cleanUrl:function(e,t,n){if(e){let e;try{e=decodeURIComponent(c(n)).replace(f,"").toLowerCase()}catch(e){return null}if(0===e.indexOf("javascript:")||0===e.indexOf("vbscript:")||0===e.indexOf("data:"))return null}t&&!d.test(n)&&(n=v(t,n));try{n=encodeURI(n).replace(/%25/g,"%")}catch(e){return null}return n},resolveUrl:v,noopTest:{exec:function(){}},merge:function(e){let t,n,r=1;for(;r<arguments.length;r++)for(n in t=arguments[r],t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e},splitCells:function(e,t){const n=e.replace(/\|/g,(e,t,n)=>{let r=!1,i=t;for(;--i>=0&&"\\"===n[i];)r=!r;return r?"|":" |"}).split(/ \|/);let r=0;if(n.length>t)n.splice(t);else for(;n.length<t;)n.push("");for(;r<n.length;r++)n[r]=n[r].trim().replace(/\\\|/g,"|");return n},rtrim:y,findClosingBracket:function(e,t){if(-1===e.indexOf(t[1]))return-1;const n=e.length;let r=0,i=0;for(;i<n;i++)if("\\"===e[i])i++;else if(e[i]===t[0])r++;else if(e[i]===t[1]&&(r--,r<0))return i;return-1},checkSanitizeDeprecation:function(e){e&&e.sanitize&&!e.silent&&console.warn("marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options")}}},function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}t.__esModule=!0,r(n(62)),r(n(63))},function(e,t,n){"use strict";var r=n(1);function i(e,t,n,r,i){if(i>0){if(e===n){var a=e,o=t,u=r,l=i;if(o<u){for(var c=(a.length-u|0)-1|0,s=l-1|0,f=c>s?s:c;f>=0;--f)a[u+f|0]=a[o+f|0];return 0}if(o>u){for(var d=(a.length-o|0)-1|0,p=l-1|0,g=d>p?p:d,h=0;h<=g;++h)a[u+h|0]=a[o+h|0];return 0}return 0}var m=e.length-t|0;if(i<=m){for(var v=0,y=i-1|0;v<=y;++v)n[r+v|0]=e[t+v|0];return 0}for(var b=0,_=m-1|0;b<=_;++b)n[r+b|0]=e[t+b|0];for(var k=m,w=i-1|0;k<=w;++k)n[r+k|0]=0;return 0}return 0}t.caml_create_bytes=function(e){if(e<0)throw[r.invalid_argument,"String.create"];for(var t=new Array(e),n=0,i=e-1|0;n<=i;++n)t[n]=0;return t},t.caml_fill_bytes=function(e,t,n,r){if(n>0){for(var i=t,a=(n+t|0)-1|0;i<=a;++i)e[i]=r;return 0}return 0},t.get=function(e,t){if(t<0||t>=e.length)throw[r.invalid_argument,"index out of bounds"];return e[t]},t.bytes_to_string=function(e){var t=e,n=e.length,r="",a=n;if(n<=4096&&n===t.length)return String.fromCharCode.apply(null,t);for(var o=0;a>0;){var u=a<1024?a:1024,l=new Array(u);i(t,o,l,0,u),r+=String.fromCharCode.apply(null,l),a=a-u|0,o=o+u|0}return r},t.caml_blit_bytes=i,t.caml_blit_string=function(e,t,n,r,i){if(i>0){var a=e.length-t|0;if(i<=a){for(var o=0,u=i-1|0;o<=u;++o)n[r+o|0]=e.charCodeAt(t+o|0);return 0}for(var l=0,c=a-1|0;l<=c;++l)n[r+l|0]=e.charCodeAt(t+l|0);for(var s=a,f=i-1|0;s<=f;++s)n[r+s|0]=0;return 0}return 0},t.bytes_of_string=function(e){for(var t=e.length,n=new Array(t),r=0,i=t-1|0;r<=i;++r)n[r]=e.charCodeAt(r);return n}},function(e,t,n){"use strict";n.r(t),n.d(t,"__DO_NOT_USE__ActionTypes",(function(){return a})),n.d(t,"applyMiddleware",(function(){return m})),n.d(t,"bindActionCreators",(function(){return f})),n.d(t,"combineReducers",(function(){return c})),n.d(t,"compose",(function(){return h})),n.d(t,"createStore",(function(){return u}));var r=n(21),i=function(){return Math.random().toString(36).substring(7).split("").join(".")},a={INIT:"@@redux/INIT"+i(),REPLACE:"@@redux/REPLACE"+i(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+i()}};function o(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function u(e,t,n){var i;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(u)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var l=e,c=t,s=[],f=s,d=!1;function p(){f===s&&(f=s.slice())}function g(){if(d)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return c}function h(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(d)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return p(),f.push(e),function(){if(t){if(d)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,p();var n=f.indexOf(e);f.splice(n,1),s=null}}}function m(e){if(!o(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(d)throw new Error("Reducers may not dispatch actions.");try{d=!0,c=l(c,e)}finally{d=!1}for(var t=s=f,n=0;n<t.length;n++){(0,t[n])()}return e}function v(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");l=e,m({type:a.REPLACE})}function y(){var e,t=h;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(g())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e}return m({type:a.INIT}),(i={dispatch:m,subscribe:h,getState:g,replaceReducer:v})[r.a]=y,i}function l(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function c(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var i=t[r];0,"function"==typeof e[i]&&(n[i]=e[i])}var o,u=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:a.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:a.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+a.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){o=e}return function(e,t){if(void 0===e&&(e={}),o)throw o;for(var r=!1,i={},a=0;a<u.length;a++){var c=u[a],s=n[c],f=e[c],d=s(f,t);if(void 0===d){var p=l(c,t);throw new Error(p)}i[c]=d,r=r||d!==f}return(r=r||u.length!==Object.keys(e).length)?i:e}}function s(e,t){return function(){return t(e.apply(this,arguments))}}function f(e,t){if("function"==typeof e)return s(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var i=e[r];"function"==typeof i&&(n[r]=s(i,t))}return n}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function g(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(n,!0).forEach((function(t){d(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function h(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function m(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},i={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},a=t.map((function(e){return e(i)}));return g({},n,{dispatch:r=h.apply(void 0,a)(n.dispatch)})}}}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(48)},function(e,t,n){"use strict";var r=n(2),i=n(0);function a(e){if("function"==typeof Event)return new Event(e);var t=document.createEvent("Event");return t.initEvent(e,!0,!0),t}function o(e){var t="undefined"==typeof window?void 0:window;if(void 0===t)return 0;var n=t.location.pathname;switch(n){case"":case"/":return 0;default:for(var r=n.slice(1),i=("/"===r[r.length-1|0]?r.slice(0,-1):r).split("/"),a=i.length-1|0,o=0;;){var u=o,l=a;if(l<0)return u;o=[i[l],u],a=l-1|0}}}function u(e){var t="undefined"==typeof window?void 0:window;if(void 0===t)return"";var n=t.location.hash;switch(n){case"":case"#":return"";default:return n.slice(1)}}function l(e){var t="undefined"==typeof window?void 0:window;if(void 0===t)return"";var n=t.location.search;switch(n){case"":case"?":return"";default:return n.slice(1)}}function c(e){return[o(),u(),l()]}function s(e){var t="undefined"==typeof window?void 0:window;if(void 0!==t){var n=function(t){return r._1(e,c())};return t.addEventListener("popstate",n),n}return function(e){return 0}}function f(e){var t="undefined"==typeof window?void 0:window;return void 0!==t?(t.removeEventListener("popstate",e),0):0}var d=c;t.push=function(e){var t="undefined"==typeof history?void 0:history,n="undefined"==typeof window?void 0:window;return void 0!==t&&void 0!==n?(t.pushState(null,"",e),n.dispatchEvent(a("popstate")),0):0},t.replace=function(e){var t="undefined"==typeof history?void 0:history,n="undefined"==typeof window?void 0:window;return void 0!==t&&void 0!==n?(t.replaceState(null,"",e),n.dispatchEvent(a("popstate")),0):0},t.watchUrl=s,t.unwatchUrl=f,t.dangerouslyGetInitialUrl=d,t.useUrl=function(e,t){var n=i.useState((function(){return void 0!==e?e:c()})),a=n[1],o=n[0];return i.useEffect((function(){var e=s((function(e){return r._1(a,(function(t){return e}))})),t=c();return function(e,t){if(e[1]!==t[1]||e[2]!==t[2])return!0;for(var n=e[0],r=t[0];;){var i=r,a=n;if(a){if(i&&a[0]===i[0]){r=i[1],n=a[1];continue}return!0}return!!i}}(t,o)&&r._1(a,(function(e){return t})),function(t){return f(e)}}),[]),o}},function(e,t,n){"use strict";var r=n(1);t.caml_array_dup=function(e){return e.slice(0)},t.caml_array_sub=function(e,t,n){for(var r=new Array(n),i=0,a=t;i<n;)r[i]=e[a],i=i+1|0,a=a+1|0;return r},t.caml_array_concat=function(e){var t=function(e,t){for(;;){var n=t,r=e;if(!n)return r;t=n[1],e=n[0].length+r|0}}(0,e),n=new Array(t);return function(e,t,n){for(;;){var r=n,i=t;if(!r)return 0;for(var a=r[0],o=a.length,u=i,l=0;l<o;)e[u]=a[l],u=u+1|0,l=l+1|0;n=r[1],t=u}}(n,0,e),n},t.caml_make_vect=function(e,t){for(var n=new Array(e),r=0,i=e-1|0;r<=i;++r)n[r]=t;return n},t.caml_make_float_vect=function(e){for(var t=new Array(e),n=0,r=e-1|0;n<=r;++n)t[n]=0;return t},t.caml_array_blit=function(e,t,n,r,i){if(r<=t){for(var a=0,o=i-1|0;a<=o;++a)n[a+r|0]=e[a+t|0];return 0}for(var u=i-1|0;u>=0;--u)n[u+r|0]=e[u+t|0];return 0},t.caml_array_get=function(e,t){if(t<0||t>=e.length)throw[r.invalid_argument,"index out of bounds"];return e[t]},t.caml_array_set=function(e,t,n){if(t<0||t>=e.length)throw[r.invalid_argument,"index out of bounds"];return e[t]=n,0}},function(e,t,n){"use strict";var r=n(2),i=n(53),a=n(3),o=n(6);function u(e,t,n){var r=e[t];return e[t]=e[n],e[n]=r,0}function l(e){for(var t=e.length,n=0,r=t-1|0;n<=r;++n)u(e,n,i.random_int(n,t));return 0}function c(e,t){if(e<=0)return[];for(var n=new Array(e),r=0,i=e-1|0;r<=i;++r)n[r]=t(r);return n}function s(e,t){var n=c(e,t);return l(n),n}function f(e,t,n){for(var r=e.length,i=t.length,a=r<i?r:i,o=new Array(a),u=0,l=a-1|0;u<=l;++u)o[u]=n(e[u],t[u]);return o}function d(e,t){for(var n=0,r=e.length-1|0;n<=r;++n)t(e[n]);return 0}function p(e,t){for(var n=e.length,r=new Array(n),i=0,a=n-1|0;i<=a;++i)r[i]=t(e[i]);return r}function g(e,t){for(var n=e.length,r=0,i=void 0;void 0===i&&r<n;){var o=e[r];t(o)&&(i=a.some(o)),r=r+1|0}return i}function h(e,t){for(var n=e.length,r=0,i=void 0;void 0===i&&r<n;){t(e[r])&&(i=r),r=r+1|0}return i}function m(e,t){for(var n=e.length,r=new Array(n),i=0,a=0,o=n-1|0;a<=o;++a){var u=e[a];t(u)&&(r[i]=u,i=i+1|0)}return r.length=i,r}function v(e,t){for(var n=e.length,r=new Array(n),i=0,a=0,o=n-1|0;a<=o;++a){var u=e[a];t(u,a)&&(r[i]=u,i=i+1|0)}return r.length=i,r}function y(e,t){for(var n=e.length,r=new Array(n),i=0,o=0,u=n-1|0;o<=u;++o){var l=t(e[o]);void 0!==l&&(r[i]=a.valFromOption(l),i=i+1|0)}return r.length=i,r}function b(e,t){for(var n=0,r=e.length-1|0;n<=r;++n)t(n,e[n]);return 0}function _(e,t){for(var n=e.length,r=new Array(n),i=0,a=n-1|0;i<=a;++i)r[i]=t(i,e[i]);return r}function k(e,t,n){for(var r=t,i=0,a=e.length-1|0;i<=a;++i)r=n(r,e[i]);return r}function w(e,t,n){for(var r=t,i=e.length-1|0;i>=0;--i)r=n(r,e[i]);return r}function S(e,t,n,r){for(var i=n,a=o.caml_int_min(e.length,t.length)-1|0;a>=0;--a)i=r(i,e[a],t[a]);return i}function x(e,t,n){for(var r=t,i=0,a=e.length-1|0;i<=a;++i)r=n(r,e[i],i);return r}function C(e,t){for(var n=e,r=0,i=t,a=e.length;;){var o=r;if(o===a)return!0;if(!i(n[o]))return!1;r=o+1|0}}function E(e,t){for(var n=e,r=0,i=t,a=e.length;;){var o=r;if(o===a)return!1;if(i(n[o]))return!0;r=o+1|0}}function T(e,t,n,r,i){for(;;){var a=n;if(a===i)return!0;if(!r(e[a],t[a]))return!1;n=a+1|0}}function A(e,t,n){return T(e,t,0,n,o.caml_int_min(e.length,t.length))}function P(e,t,n){for(var r=e,i=t,a=0,u=n,l=o.caml_int_min(e.length,t.length);;){var c=a;if(c===l)return!1;if(u(r[c],i[c]))return!0;a=c+1|0}}function O(e,t,n){var r=e.length;return r===t.length&&T(e,t,0,n,r)}function F(e,t,n){var r=e.length,i=t.length;if(r>i)return 1;if(r<i)return-1;for(var a=e,o=t,u=0,l=n,c=r;;){var s=u;if(s===c)return 0;var f=l(a[s],o[s]);if(0!==f)return f;u=s+1|0}}function R(e,t){for(var n=e.length,r=0,i=0,a=new Array(n),o=new Array(n),u=0,l=n-1|0;u<=l;++u){var c=e[u];t(c)?(a[r]=c,r=r+1|0):(o[i]=c,i=i+1|0)}return a.length=r,o.length=i,[a,o]}t.get=function(e,t){if(t>=0&&t<e.length)return a.some(e[t])},t.getExn=function(e,t){if(!(t>=0&&t<e.length))throw new Error('File "belt_Array.ml", line 25, characters 6-12');return e[t]},t.set=function(e,t,n){return t>=0&&t<e.length&&(e[t]=n,!0)},t.setExn=function(e,t,n){if(!(t>=0&&t<e.length))throw new Error('File "belt_Array.ml", line 31, characters 4-10');return e[t]=n,0},t.shuffleInPlace=l,t.shuffle=function(e){var t=e.slice(0);return l(t),t},t.reverseInPlace=function(e){for(var t=e,n=e.length,r=0,i=(n/2|0)-1|0;r<=i;++r)u(t,0+r|0,((0+n|0)-r|0)-1|0);return 0},t.reverse=function(e){for(var t=e.length,n=new Array(t),r=0,i=t-1|0;r<=i;++r)n[r]=e[(t-1|0)-r|0];return n},t.make=function(e,t){if(e<=0)return[];for(var n=new Array(e),r=0,i=e-1|0;r<=i;++r)n[r]=t;return n},t.range=function(e,t){var n=t-e|0;if(n<0)return[];for(var r=new Array(n+1|0),i=0;i<=n;++i)r[i]=e+i|0;return r},t.rangeBy=function(e,t,n){var r=t-e|0;if(r<0||n<=0)return[];for(var i=1+(r/n|0)|0,a=new Array(i),o=e,u=0,l=i-1|0;u<=l;++u)a[u]=o,o=o+n|0;return a},t.makeByU=c,t.makeBy=function(e,t){return c(e,r.__1(t))},t.makeByAndShuffleU=s,t.makeByAndShuffle=function(e,t){return s(e,r.__1(t))},t.zip=function(e,t){for(var n=e.length,r=t.length,i=n<r?n:r,a=new Array(i),o=0,u=i-1|0;o<=u;++o)a[o]=[e[o],t[o]];return a},t.zipByU=f,t.zipBy=function(e,t,n){return f(e,t,r.__2(n))},t.unzip=function(e){for(var t=e.length,n=new Array(t),r=new Array(t),i=0,a=t-1|0;i<=a;++i){var o=e[i];n[i]=o[0],r[i]=o[1]}return[n,r]},t.concat=function(e,t){for(var n=e.length,r=t.length,i=new Array(n+r|0),a=0,o=n-1|0;a<=o;++a)i[a]=e[a];for(var u=0,l=r-1|0;u<=l;++u)i[n+u|0]=t[u];return i},t.concatMany=function(e){for(var t=e.length,n=0,r=0,i=t-1|0;r<=i;++r)n=n+e[r].length|0;var a=new Array(n);n=0;for(var o=0,u=t-1|0;o<=u;++o)for(var l=e[o],c=0,s=l.length-1|0;c<=s;++c)a[n]=l[c],n=n+1|0;return a},t.slice=function(e,t,n){if(n<=0)return[];var r=e.length,i=t<0?o.caml_int_max(r+t|0,0):t,a=r-i|0,u=a<n?a:n;if(u<=0)return[];for(var l=new Array(u),c=0,s=u-1|0;c<=s;++c)l[c]=e[i+c|0];return l},t.sliceToEnd=function(e,t){for(var n=e.length,r=t<0?o.caml_int_max(n+t|0,0):t,i=n-r|0,a=new Array(i),u=0,l=i-1|0;u<=l;++u)a[u]=e[r+u|0];return a},t.fill=function(e,t,n,r){if(n>0){var i=e.length,a=t<0?o.caml_int_max(i+t|0,0):t,u=i-a|0,l=u<n?u:n;if(l>0){for(var c=a,s=(a+l|0)-1|0;c<=s;++c)e[c]=r;return 0}return 0}return 0},t.blit=function(e,t,n,r,i){var a=e.length,u=n.length,l=t<0?o.caml_int_max(a+t|0,0):t,c=r<0?o.caml_int_max(u+r|0,0):r,s=o.caml_int_min(i,o.caml_int_min(a-l|0,u-c|0));if(c<=l){for(var f=0,d=s-1|0;f<=d;++f)n[f+c|0]=e[f+l|0];return 0}for(var p=s-1|0;p>=0;--p)n[p+c|0]=e[p+l|0];return 0},t.blitUnsafe=function(e,t,n,r,i){if(r<=t){for(var a=0,o=i-1|0;a<=o;++a)n[a+r|0]=e[a+t|0];return 0}for(var u=i-1|0;u>=0;--u)n[u+r|0]=e[u+t|0];return 0},t.forEachU=d,t.forEach=function(e,t){return d(e,r.__1(t))},t.mapU=p,t.map=function(e,t){return p(e,r.__1(t))},t.getByU=g,t.getBy=function(e,t){return g(e,r.__1(t))},t.getIndexByU=h,t.getIndexBy=function(e,t){return h(e,r.__1(t))},t.keepU=m,t.keep=function(e,t){return m(e,r.__1(t))},t.keepWithIndexU=v,t.keepWithIndex=function(e,t){return v(e,r.__2(t))},t.keepMapU=y,t.keepMap=function(e,t){return y(e,r.__1(t))},t.forEachWithIndexU=b,t.forEachWithIndex=function(e,t){return b(e,r.__2(t))},t.mapWithIndexU=_,t.mapWithIndex=function(e,t){return _(e,r.__2(t))},t.partitionU=R,t.partition=function(e,t){return R(e,r.__1(t))},t.reduceU=k,t.reduce=function(e,t,n){return k(e,t,r.__2(n))},t.reduceReverseU=w,t.reduceReverse=function(e,t,n){return w(e,t,r.__2(n))},t.reduceReverse2U=S,t.reduceReverse2=function(e,t,n,i){return S(e,t,n,r.__3(i))},t.reduceWithIndexU=x,t.reduceWithIndex=function(e,t,n){return x(e,t,r.__3(n))},t.someU=E,t.some=function(e,t){return E(e,r.__1(t))},t.everyU=C,t.every=function(e,t){return C(e,r.__1(t))},t.every2U=A,t.every2=function(e,t,n){return A(e,t,r.__2(n))},t.some2U=P,t.some2=function(e,t,n){return P(e,t,r.__2(n))},t.cmpU=F,t.cmp=function(e,t,n){return F(e,t,r.__2(n))},t.eqU=O,t.eq=function(e,t,n){return O(e,t,r.__2(n))}},function(e,t,n){"use strict";t.__=function(e,t){return t.tag=e,t}},function(e,t,n){"use strict";var r=[0];function i(e){return r[0]+=1,r[0]}t.caml_set_oo_id=function(e){return e[1]=r[0],r[0]+=1,e},t.caml_fresh_oo_id=i,t.create=function(e){var t=[e,i()];return t.tag=248,t},t.caml_is_extension=function(e){if(void 0===e)return!1;if(248===e.tag)return!0;var t=e[0];return void 0!==t&&248===t.tag}},function(e,t,n){"use strict";e.exports=n(58)},function(e,t,n){"use strict";var r=n(19),i={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},o={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function l(e){return r.isMemo(e)?o:u[e.$$typeof]||i}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},u[r.Memo]=o;var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,g=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(g){var i=p(n);i&&i!==g&&e(t,i,r)}var o=s(n);f&&(o=o.concat(f(n)));for(var u=l(t),h=l(n),m=0;m<o.length;++m){var v=o[m];if(!(a[v]||r&&r[v]||h&&h[v]||u&&u[v])){var y=d(n,v);try{c(t,v,y)}catch(e){}}}}return t}},function(e,t,n){"use strict";(function(e,r){var i,a=n(44);i="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var o=Object(a.a)(i);t.a=o}).call(this,n(23),n(59)(e))},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,u,l=o(e),c=1;c<arguments.length;c++){for(var s in n=Object(arguments[c]))i.call(n,s)&&(l[s]=n[s]);if(r){u=r(n);for(var f=0;f<u.length;f++)a.call(n,u[f])&&(l[u[f]]=n[u[f]])}}return l}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";var r=n(0),i=n(14);function a(e,t){return t.defaultPrevented?0:(t.preventDefault(),i.push(e))}var o=function(e){var t=e.href,n=e.className,i=void 0!==n?n:"",o=e.target,u=void 0!==o?o:"",l=e.children;return r.createElement("a",{className:i,href:t,target:u,onClick:function(e){return a(t,e)}},l)};t.handleClick=a,t.make=o},function(e,t,n){"use strict";var r=n(60),i=n(12),a=n(65),o=n(68),u=(window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__||i.compose)(i.applyMiddleware(o.default)),l={store:i.createStore(r.RootReducers,u),getState:function(){return this.store.getState()},dispatch:function(e){switch(e){case"@@count/INCREMENT":return this.store.dispatch(a.increment());case"@@count/DECREMENT":return this.store.dispatch(a.decrement());case"@@filesystem/REQUEST":return this.store.dispatch(a.fetch_request());case"@@filesystem/LOAD":return this.store.dispatch(a.fetch_dir());default:throw console.error("Dispatch action not found!"),Error()}}};e.exports=l},function(e,t,n){!function(e){"use strict";function t(e){return null==e}function n(e){throw new Error("Argument "+e+" is empty.")}function r(e){return"function"==typeof e&&"getType"in e}function i(e){throw new Error("Argument "+e+' is invalid, it should be an action-creator instance from "typesafe-actions"')}function a(e,t){if(null==e)throw new Error("Argument contains array with empty element at index "+t);if(null==e.getType)throw new Error("Argument contains array with invalid element at index "+t+', it should be an action-creator instance from "typesafe-actions"')}function o(e){return"string"==typeof e||"symbol"==typeof e}function u(e){return!o(e)}function l(e){throw new Error("Argument "+e+" is invalid, it should be an action type of type: string | symbol")}function c(e,t){if(null==e)throw new Error("Argument contains array with empty element at index "+t);if("string"!=typeof e&&"symbol"!=typeof e)throw new Error("Argument contains array with invalid element at index "+t+", it should be of type: string | symbol")}function s(e,r,a,o){return t(e)&&n(1),u(e)&&i(1),{type:e,payload:r,meta:a,error:o}}function f(e,r){return t(e)&&n(1),u(e)&&l(1),Object.assign((function(){var t=null!=r?r.apply(void 0,arguments):void 0;return Object.assign({type:e},t)}),{getType:function(){return e},toString:function(){return e}})}function d(e,r,i){return t(e)&&n(1),u(e)&&l(1),function(){return f(e,(function(){var e=arguments.length<=0?void 0:arguments[0],t=arguments.length<=1?void 0:arguments[1];return null==r&&null==i||(e=null!=r?r.apply(void 0,arguments):void 0,t=null!=i?i.apply(void 0,arguments):void 0),Object.assign({},void 0!==e&&{payload:e},{},void 0!==t&&{meta:t})}))}}function p(e){return t(e)&&n(1),r(e)||i(1),e.getType()}function g(e,r){t(e)&&n(1),u(e)&&l(1);var i=null!=r?r(e):function(){return{type:e}};return Object.assign(i,{getType:function(){return e},toString:function(){return e}})}var h={createAction:function(e,t){var n=null==t?function(){return s(e)}:t(s.bind(null,e));return Object.assign(n,{getType:function(){return e},toString:function(){return e}})},createCustomAction:g,createStandardAction:function(e){return t(e)&&n(1),u(e)&&l(1),Object.assign((function(){return g(e,(function(e){return function(t,n){return{type:e,payload:t,meta:n}}}))}),{map:function(t){return g(e,(function(e){return function(n,r){return Object.assign(t(n,r),{type:e})}}))}})}};e.action=s,e.createAction=d,e.createAsyncAction=function(e,t,n,r){return function(){var i=[e,t,n,r].map((function(e,t){return Array.isArray(e)?d(e[0],e[1],e[2])():"string"==typeof e||"symbol"==typeof e?d(e)():void(t<3&&function(e){throw new Error("Argument "+e+' is invalid, it should be an action type of "string | symbol" or a tuple of "[string | symbol, Function, Function?]"')}(t))}));return{request:i[0],success:i[1],failure:i[2],cancel:i[3]}}},e.createCustomAction=f,e.createReducer=function e(t,n){void 0===n&&(n={});var i=Object.assign({},n),a=function(n,a){var u=Array.isArray(n)?n:[n],l={};return u.map((function(e,t){return r(e)?p(e):o(e)?e:function(e){throw new Error("Argument "+e+' is invalid, it should be an action-creator instance from "typesafe-actions" or action type of type: string | symbol')}(t+1)})).forEach((function(e){return l[e]=a})),e(t,Object.assign({},i,{},l))};return Object.assign((function(e,n){if(void 0===e&&(e=t),i.hasOwnProperty(n.type)){var r=i[n.type];if("function"!=typeof r)throw Error('Reducer under "'+n.type+'" key is not a valid reducer');return r(e,n)}return e}),{handlers:Object.assign({},i),handleAction:a,handleType:a})},e.deprecated=h,e.getType=p,e.isActionOf=function(e,r){t(e)&&n(1);var i=Array.isArray(e)?e:[e];i.forEach(a);var o=function(e){return i.some((function(t){return e.type===t.getType()}))};return void 0===r?o:o(r)},e.isOfType=function(e,r){t(e)&&n(1);var i=Array.isArray(e)?e:[e];i.forEach(c);var a=function(e){return i.includes(e.type)};return void 0===r?a:a(r)}}(t)},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,a){function o(e){try{l(r.next(e))}catch(e){a(e)}}function u(e){try{l(r.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,u)}l((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function u(a){return function(u){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(i=o.trys,(i=i.length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}};t.__esModule=!0,t.findDirectory=function(e){return r(this,void 0,void 0,(function(){var t,n,r;return i(this,(function(i){return t=/title=\"[^\"]*?\"[^>]*?/g,n=/\"[^\"]*\"[^]*?/g,r=/\"[^\"]*?/g,"",[2,fetch(e,{mode:"no-cors"}).then((function(e){return e.text()})).then((function(e){return e.match(t).join("").match(n).join(",").replace(r,"").split(",").slice(1)}))]}))}))},t.findMarkdownPath=function(e){return r(this,void 0,void 0,(function(){var t,n,r,a,o,u,l,c;return i(this,(function(i){switch(i.label){case 0:t=[],n="",r=/(?=<!--)([\s\S]*?)-->/g,a=/[<!-->]/g,o=/((?:|[^:]+[:])*)/g,u=0,l=e,i.label=1;case 1:return u<l.length?(c=l[u],[4,fetch("../../../posts/"+c+"/index.md",{mode:"no-cors"}).then((function(e){return e.text()})).then((function(e){if(""!==(n=e)){var i=n.match(r).join("").replace(a,"").replace(o,"");t.push(i)}else t.push("")})).catch((function(e){console.error(e)}))]):[3,4];case 2:i.sent(),i.label=3;case 3:return u++,[3,1];case 4:return[2,t]}}))}))}},function(e,t,n){"use strict";var r=n(2),i=n(29),a=n(70),o=n(3),u=n(1);function l(e){for(var t=0,n=e;;){var r=t;if(!n)return r;n=n[1],t=r+1|0}}function c(e,t){for(;;){var n=t,r=e;if(!r)return n;t=[r[0],n],e=r[1]}}function s(e){return e?a.$at(e[0],s(e[1])):0}function f(e){return function(t){for(var n=0,i=t;;){var a=i,o=n;if(!a)return c(o,0);var u=a[1],l=a[0];r._1(e,l)?(i=u,n=[l,o]):i=u}}}function d(e,t){for(;;){var n=t,r=e;if(0===r)return n;if(!n)throw[u.assert_failure,["list.ml",262,11]];t=n[1],e=r-1|0}}function p(e,t){var n=function(t,n){if(2!==t){if(3===t&&n){var a=n[1];if(a){var o=a[1];if(o){var u=o[0],l=a[0],s=n[0];return r._2(e,s,l)<=0?r._2(e,l,u)<=0?[s,[l,[u,0]]]:r._2(e,s,u)<=0?[s,[u,[l,0]]]:[u,[s,[l,0]]]:r._2(e,s,u)<=0?[l,[s,[u,0]]]:r._2(e,l,u)<=0?[l,[u,[s,0]]]:[u,[l,[s,0]]]}}}}else if(n){var f=n[1];if(f){var p=f[0],g=n[0];return r._2(e,g,p)<=0?[g,[p,0]]:[p,[g,0]]}}for(var h=t>>1,m=t-h|0,v=d(h,n),y=i(h,n),b=i(m,v),_=0;;){var k=_,w=b,S=y;if(S){if(w){var x=w[0],C=S[0];if(r._2(e,C,x)>0){_=[C,k],y=S[1];continue}_=[x,k],b=w[1];continue}return c(S,k)}return c(w,k)}},i=function(t,i){if(2!==t){if(3===t&&i){var a=i[1];if(a){var o=a[1];if(o){var u=o[0],l=a[0],s=i[0];return r._2(e,s,l)>0?r._2(e,l,u)>0?[s,[l,[u,0]]]:r._2(e,s,u)>0?[s,[u,[l,0]]]:[u,[s,[l,0]]]:r._2(e,s,u)>0?[l,[s,[u,0]]]:r._2(e,l,u)>0?[l,[u,[s,0]]]:[u,[l,[s,0]]]}}}}else if(i){var f=i[1];if(f){var p=f[0],g=i[0];return r._2(e,g,p)>0?[g,[p,0]]:[p,[g,0]]}}for(var h=t>>1,m=t-h|0,v=d(h,i),y=n(h,i),b=n(m,v),_=0;;){var k=_,w=b,S=y;if(S){if(w){var x=w[0],C=S[0];if(r._2(e,C,x)<=0){_=[C,k],y=S[1];continue}_=[x,k],b=w[1];continue}return c(S,k)}return c(w,k)}},a=l(t);return a<2?t:n(a,t)}var g=a.$at,h=s,m=f,v=p,y=p;t.length=l,t.compare_lengths=function(e,t){for(;;){var n=t,r=e;if(r){if(n){t=n[1],e=r[1];continue}return 1}return n?-1:0}},t.compare_length_with=function(e,t){for(;;){if(!e)return 0===t?0:t>0?-1:1;if(t<=0)return 1;t=t-1|0,e=e[1]}},t.cons=function(e,t){return[e,t]},t.hd=function(e){if(e)return e[0];throw[u.failure,"hd"]},t.tl=function(e){if(e)return e[1];throw[u.failure,"tl"]},t.nth=function(e,t){if(t<0)throw[u.invalid_argument,"List.nth"];for(var n=e,r=t;;){var i=r,a=n;if(!a)throw[u.failure,"nth"];if(0===i)return a[0];r=i-1|0,n=a[1]}},t.nth_opt=function(e,t){if(t<0)throw[u.invalid_argument,"List.nth"];for(var n=e,r=t;;){var i=r,a=n;if(!a)return;if(0===i)return o.some(a[0]);r=i-1|0,n=a[1]}},t.rev=function(e){return c(e,0)},t.init=function(e,t){if(e<0)throw[u.invalid_argument,"List.init"];return e>1e4?c(function(e,t,n,i){for(;;){var a=t,o=e;if(a>=n)return o;t=a+1|0,e=[r._1(i,a),o]}}(0,0,e,t),0):function e(t,n,i){return t>=n?0:[r._1(i,t),e(t+1|0,n,i)]}(0,e,t)},t.append=g,t.rev_append=c,t.concat=h,t.flatten=s,t.iter=function(e,t){for(;;){var n=t;if(!n)return 0;r._1(e,n[0]),t=n[1]}},t.iteri=function(e,t){for(var n=0,i=e,a=t;;){var o=a,u=n;if(!o)return 0;r._2(i,u,o[0]),a=o[1],n=u+1|0}},t.map=function e(t,n){return n?[r._1(t,n[0]),e(t,n[1])]:0},t.mapi=function(e,t){return function e(t,n,i){return i?[r._2(n,t,i[0]),e(t+1|0,n,i[1])]:0}(0,e,t)},t.rev_map=function(e,t){for(var n=0,i=t;;){var a=i,o=n;if(!a)return o;i=a[1],n=[r._1(e,a[0]),o]}},t.fold_left=function(e,t,n){for(;;){var i=n,a=t;if(!i)return a;n=i[1],t=r._2(e,a,i[0])}},t.fold_right=function e(t,n,i){return n?r._2(t,n[0],e(t,n[1],i)):i},t.iter2=function(e,t,n){for(;;){var i=n,a=t;if(a){if(i){r._2(e,a[0],i[0]),n=i[1],t=a[1];continue}throw[u.invalid_argument,"List.iter2"]}if(i)throw[u.invalid_argument,"List.iter2"];return 0}},t.map2=function e(t,n,i){if(n){if(i)return[r._2(t,n[0],i[0]),e(t,n[1],i[1])];throw[u.invalid_argument,"List.map2"]}if(i)throw[u.invalid_argument,"List.map2"];return 0},t.rev_map2=function(e,t,n){for(var i=0,a=t,o=n;;){var l=o,c=a,s=i;if(c){if(l){o=l[1],a=c[1],i=[r._2(e,c[0],l[0]),s];continue}throw[u.invalid_argument,"List.rev_map2"]}if(l)throw[u.invalid_argument,"List.rev_map2"];return s}},t.fold_left2=function(e,t,n,i){for(;;){var a=i,o=n,l=t;if(o){if(a){i=a[1],n=o[1],t=r._3(e,l,o[0],a[0]);continue}throw[u.invalid_argument,"List.fold_left2"]}if(a)throw[u.invalid_argument,"List.fold_left2"];return l}},t.fold_right2=function e(t,n,i,a){if(n){if(i)return r._3(t,n[0],i[0],e(t,n[1],i[1],a));throw[u.invalid_argument,"List.fold_right2"]}if(i)throw[u.invalid_argument,"List.fold_right2"];return a},t.for_all=function(e,t){for(;;){var n=t;if(n){if(r._1(e,n[0])){t=n[1];continue}return!1}return!0}},t.exists=function(e,t){for(;;){var n=t;if(!n)return!1;if(r._1(e,n[0]))return!0;t=n[1]}},t.for_all2=function(e,t,n){for(;;){var i=n,a=t;if(a){if(i){if(r._2(e,a[0],i[0])){n=i[1],t=a[1];continue}return!1}throw[u.invalid_argument,"List.for_all2"]}if(i)throw[u.invalid_argument,"List.for_all2"];return!0}},t.exists2=function(e,t,n){for(;;){var i=n,a=t;if(a){if(i){if(r._2(e,a[0],i[0]))return!0;n=i[1],t=a[1];continue}throw[u.invalid_argument,"List.exists2"]}if(i)throw[u.invalid_argument,"List.exists2"];return!1}},t.mem=function(e,t){for(;;){var n=t;if(!n)return!1;if(i.caml_equal(n[0],e))return!0;t=n[1]}},t.memq=function(e,t){for(;;){var n=t;if(!n)return!1;if(n[0]===e)return!0;t=n[1]}},t.find=function(e,t){for(;;){var n=t;if(!n)throw u.not_found;var i=n[0];if(r._1(e,i))return i;t=n[1]}},t.find_opt=function(e,t){for(;;){var n=t;if(!n)return;var i=n[0];if(r._1(e,i))return o.some(i);t=n[1]}},t.filter=m,t.find_all=f,t.partition=function(e,t){for(var n=0,i=0,a=t;;){var o=a,u=i,l=n;if(!o)return[c(l,0),c(u,0)];var s=o[1],f=o[0];r._1(e,f)?(a=s,n=[f,l]):(a=s,i=[f,u])}},t.assoc=function(e,t){for(;;){var n=t;if(!n)throw u.not_found;var r=n[0];if(i.caml_equal(r[0],e))return r[1];t=n[1]}},t.assoc_opt=function(e,t){for(;;){var n=t;if(!n)return;var r=n[0];if(i.caml_equal(r[0],e))return o.some(r[1]);t=n[1]}},t.assq=function(e,t){for(;;){var n=t;if(!n)throw u.not_found;var r=n[0];if(r[0]===e)return r[1];t=n[1]}},t.assq_opt=function(e,t){for(;;){var n=t;if(!n)return;var r=n[0];if(r[0]===e)return o.some(r[1]);t=n[1]}},t.mem_assoc=function(e,t){for(;;){var n=t;if(!n)return!1;if(i.caml_equal(n[0][0],e))return!0;t=n[1]}},t.mem_assq=function(e,t){for(;;){var n=t;if(!n)return!1;if(n[0][0]===e)return!0;t=n[1]}},t.remove_assoc=function e(t,n){if(n){var r=n[1],a=n[0];return i.caml_equal(a[0],t)?r:[a,e(t,r)]}return 0},t.remove_assq=function e(t,n){if(n){var r=n[1],i=n[0];return i[0]===t?r:[i,e(t,r)]}return 0},t.split=function e(t){if(t){var n=t[0],r=e(t[1]);return[[n[0],r[0]],[n[1],r[1]]]}return[0,0]},t.combine=function e(t,n){if(t){if(n)return[[t[0],n[0]],e(t[1],n[1])];throw[u.invalid_argument,"List.combine"]}if(n)throw[u.invalid_argument,"List.combine"];return 0},t.sort=v,t.stable_sort=p,t.fast_sort=y,t.sort_uniq=function(e,t){var n=function(t,n){if(2!==t){if(3===t&&n){var a=n[1];if(a){var o=a[1];if(o){var u=o[0],l=a[0],s=n[0],f=r._2(e,s,l);if(0===f){var p=r._2(e,l,u);return 0===p?[l,0]:p<0?[l,[u,0]]:[u,[l,0]]}if(f<0){var g=r._2(e,l,u);if(0===g)return[s,[l,0]];if(g<0)return[s,[l,[u,0]]];var h=r._2(e,s,u);return 0===h?[s,[l,0]]:h<0?[s,[u,[l,0]]]:[u,[s,[l,0]]]}var m=r._2(e,s,u);if(0===m)return[l,[s,0]];if(m<0)return[l,[s,[u,0]]];var v=r._2(e,l,u);return 0===v?[l,[s,0]]:v<0?[l,[u,[s,0]]]:[u,[l,[s,0]]]}}}}else if(n){var y=n[1];if(y){var b=y[0],_=n[0],k=r._2(e,_,b);return 0===k?[_,0]:k<0?[_,[b,0]]:[b,[_,0]]}}for(var w=t>>1,S=t-w|0,x=d(w,n),C=i(w,n),E=i(S,x),T=0;;){var A=T,P=E,O=C;if(O){if(P){var F=P[1],R=P[0],L=O[1],z=O[0],N=r._2(e,z,R);if(0===N){T=[z,A],E=F,C=L;continue}if(N>0){T=[z,A],C=L;continue}T=[R,A],E=F;continue}return c(O,A)}return c(P,A)}},i=function(t,i){if(2!==t){if(3===t&&i){var a=i[1];if(a){var o=a[1];if(o){var u=o[0],l=a[0],s=i[0],f=r._2(e,s,l);if(0===f){var p=r._2(e,l,u);return 0===p?[l,0]:p>0?[l,[u,0]]:[u,[l,0]]}if(f>0){var g=r._2(e,l,u);if(0===g)return[s,[l,0]];if(g>0)return[s,[l,[u,0]]];var h=r._2(e,s,u);return 0===h?[s,[l,0]]:h>0?[s,[u,[l,0]]]:[u,[s,[l,0]]]}var m=r._2(e,s,u);if(0===m)return[l,[s,0]];if(m>0)return[l,[s,[u,0]]];var v=r._2(e,l,u);return 0===v?[l,[s,0]]:v>0?[l,[u,[s,0]]]:[u,[l,[s,0]]]}}}}else if(i){var y=i[1];if(y){var b=y[0],_=i[0],k=r._2(e,_,b);return 0===k?[_,0]:k>0?[_,[b,0]]:[b,[_,0]]}}for(var w=t>>1,S=t-w|0,x=d(w,i),C=n(w,i),E=n(S,x),T=0;;){var A=T,P=E,O=C;if(O){if(P){var F=P[1],R=P[0],L=O[1],z=O[0],N=r._2(e,z,R);if(0===N){T=[z,A],E=F,C=L;continue}if(N<0){T=[z,A],C=L;continue}T=[R,A],E=F;continue}return c(O,A)}return c(P,A)}},a=l(t);return a<2?t:n(a,t)},t.merge=function e(t,n,i){if(n){if(i){var a=i[0],o=n[0];return r._2(t,o,a)<=0?[o,e(t,n[1],i)]:[a,e(t,n,i[1])]}return n}return i}},function(e,t,n){"use strict";var r=n(17),i=n(6),a=n(1);function o(e,t){for(var n in e)t(n)}function u(e,t){for(;;){var n=t,r=e;if(r===n)return 0;var l=typeof r,c=typeof n;switch(l){case"boolean":if("boolean"===c)return i.caml_bool_compare(r,n);break;case"function":if("function"===c)throw[a.invalid_argument,"compare: functional value"];break;case"number":if("number"===c)return i.caml_int_compare(r,n);break;case"string":return"string"===c?i.caml_string_compare(r,n):1;case"undefined":return-1}switch(c){case"string":return-1;case"undefined":return 1;default:if("boolean"===l)return 1;if("boolean"===c)return-1;if("function"===l)return 1;if("function"===c)return-1;if("number"===l)return null===n||256===n.tag?1:-1;if("number"===c)return null===r||256===r.tag?-1:1;if(null===r)return 256===n.tag?1:-1;if(null===n)return 256===r.tag?-1:1;var s=0|r.tag,f=0|n.tag;if(250===s){e=r[0];continue}if(250===f){t=n[0];continue}if(256===s)return 256===f?i.caml_int_compare(r[1],n[1]):-1;if(248===s)return i.caml_int_compare(r[1],n[1]);if(251===s)throw[a.invalid_argument,"equal: abstract value"];if(s!==f)return s<f?-1:1;var d=0|r.length,p=0|n.length;if(d===p){if(!Array.isArray(r)){if(r instanceof Date&&n instanceof Date)return r-n;var g=r,h=n,m=[void 0],v=[void 0],y=function(e,t){var n=e[2],r=e[1];if(!r.hasOwnProperty(t)||u(e[0][t],r[t])>0){var i=n[0];return void 0!==i&&t>=i||(n[0]=t),0}return 0},b=function(e){return function(t){return y(e,t)}}([g,h,v]),_=function(e){return function(t){return y(e,t)}}([h,g,m]);o(g,b),o(h,_);var k=m[0],w=v[0];return void 0!==k?void 0!==w?i.caml_string_compare(k,w):-1:void 0!==w?1:0}for(var S=r,x=n,C=0,E=d;;){var T=C;if(T===E)return 0;var A=u(S[T],x[T]);if(0!==A)return A;C=T+1|0}}else if(d<p)for(var P=r,O=n,F=0,R=d;;){var L=F;if(L===R)return-1;var z=u(P[L],O[L]);if(0!==z)return z;F=L+1|0}else for(var N=r,D=n,j=0,I=p;;){var B=j;if(B===I)return 1;var M=u(N[B],D[B]);if(0!==M)return M;j=B+1|0}}}}function l(e,t){for(;;){var n=t,r=e;if(r===n)return!0;var i=typeof r;if("string"===i||"number"===i||"boolean"===i||"undefined"===i||null===r)return!1;var u=typeof n;if("function"===i||"function"===u)throw[a.invalid_argument,"equal: functional value"];if("number"===u||"undefined"===u||null===n)return!1;var c=0|r.tag,s=0|n.tag;if(250!==c)if(250!==s){if(248===c)return r[1]===n[1];if(251===c)throw[a.invalid_argument,"equal: abstract value"];if(c!==s)return!1;if(256===c)return r[1]===n[1];var f=0|r.length;if(f!==(0|n.length))return!1;if(!Array.isArray(r)){if(r instanceof Date&&n instanceof Date)return!(r>n||r<n);var d=r,p=n,g=[!0],h=function(e,t){return function(n){return e.hasOwnProperty(n)||(t[0]=!1),0}}(p,g),m=function(e,t,n){return function(r){return e.hasOwnProperty(r)&&l(t[r],e[r])||(n[0]=!1),0}}(d,p,g);return o(d,h),g[0]&&o(p,m),g[0]}for(var v=r,y=n,b=0,_=f;;){var k=b;if(k===_)return!0;if(!l(v[k],y[k]))return!1;b=k+1|0}}else t=n[0];else e=r[0]}}t.caml_obj_block=function(e,t){var n=new Array(t);return n.tag=e,n},t.caml_obj_dup=function(e){for(var t=0|e.length,n=new Array(t),r=0,i=t-1|0;r<=i;++r)n[r]=e[r];return n.tag=0|e.tag,n},t.caml_obj_truncate=function(e,t){var n=0|e.length;if(t<=0||t>n)throw[a.invalid_argument,"Obj.truncate"];if(n!==t){for(var r=t,i=n-1|0;r<=i;++r)e[r]=0;return e.length=t,0}return 0},t.caml_lazy_make_forward=function(e){return r.__(250,[e])},t.caml_lazy_make=function(e){var t=[e];return t.tag=246,t},t.caml_update_dummy=function(e,t){for(var n=0,r=(0|t.length)-1|0;n<=r;++n)e[n]=t[n];var i=0|t.tag;return 0!==i?(e.tag=i,0):0},t.caml_compare=u,t.caml_equal=l,t.caml_equal_null=function(e,t){return null!==t?l(e,t):e===t},t.caml_equal_undefined=function(e,t){return void 0!==t?l(e,t):e===t},t.caml_equal_nullable=function(e,t){return null==t?e===t:l(e,t)},t.caml_notequal=function(e,t){return!l(e,t)},t.caml_greaterequal=function(e,t){return u(e,t)>=0},t.caml_greaterthan=function(e,t){return u(e,t)>0},t.caml_lessthan=function(e,t){return u(e,t)<0},t.caml_lessequal=function(e,t){return u(e,t)<=0},t.caml_min=function(e,t){return u(e,t)<=0?e:t},t.caml_max=function(e,t){return u(e,t)>=0?e:t},t.caml_obj_set_tag=function(e,t){return e.tag=t,0}},function(e,t){var n,r,i=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function u(e){if(n===setTimeout)return setTimeout(e,0);if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(e){n=a}try{r="function"==typeof clearTimeout?clearTimeout:o}catch(e){r=o}}();var l,c=[],s=!1,f=-1;function d(){s&&l&&(s=!1,l.length?c=l.concat(c):f=-1,c.length&&p())}function p(){if(!s){var e=u(d);s=!0;for(var t=c.length;t;){for(l=c,c=[];++f<t;)l&&l[f].run();f=-1,t=c.length}l=null,s=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===o||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function g(e,t){this.fun=e,this.array=t}function h(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new g(e,t)),1!==c.length||s||u(p)},g.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=h,i.addListener=h,i.once=h,i.off=h,i.removeListener=h,i.removeAllListeners=h,i.emit=h,i.prependListener=h,i.prependOnceListener=h,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(1);function i(e){return(255&e)<<24|(65280&e)<<8|(16711680&e)>>>8|(4278190080&e)>>>24}var a=Math.imul||function(e,t){return((e>>16)*(t|=0)<<16)+(65535&e)*t|0},o=i;t.div=function(e,t){if(0===t)throw r.division_by_zero;return e/t|0},t.mod_=function(e,t){if(0===t)throw r.division_by_zero;return e%t},t.caml_bswap16=function(e){return(255&e)<<8|(65280&e)>>>8},t.caml_int32_bswap=i,t.caml_nativeint_bswap=o,t.imul=a},function(e,t,n){"use strict";t.repeat=function(e,t){if(t.repeat)return t.repeat(e);if(0==t.length||0==e)return"";if(t.length*e>=1<<28)throw new RangeError("repeat count must not overflow maximum string size");for(var n="";1==(1&e)&&(n+=t),0!=(e>>>=1);)t+=t;return n}},function(e,t,n){"use strict";var r=n(3),i=n(18),a=i.create("Caml_js_exceptions.Error");t.$$Error=a,t.internalToOCamlException=function(e){return i.caml_is_extension(e)?e:[a,e]},t.caml_as_js_exn=function(e){if(e[0]===a)return r.some(e[1])}},function(e,t,n){"use strict";var r=n(79),i=n(2),a=n(11),o=n(6),u=n(1);function l(e,t,n){return a.bytes_to_string(r.sub(a.bytes_of_string(e),t,n))}function c(e,t){if(e>=t)return e;throw[u.invalid_argument,"String.concat"]}function s(e){var t=e-9|0;return t>4||t<0?23===t:2!==t}function f(e,t,n,r){for(;;){var i=n;if(i>=t)throw u.not_found;if(e.charCodeAt(i)===r)return i;n=i+1|0}}function d(e,t,n,r){for(;;){var i=n;if(i>=t)return;if(e.charCodeAt(i)===r)return i;n=i+1|0}}function p(e,t,n){for(;;){var r=t;if(r<0)throw u.not_found;if(e.charCodeAt(r)===n)return r;t=r-1|0}}function g(e,t,n){for(;;){var r=t;if(r<0)return;if(e.charCodeAt(r)===n)return r;t=r-1|0}}function h(e,t,n){var r=e.length;if(t<0||t>r)throw[u.invalid_argument,"String.contains_from / Bytes.contains_from"];try{return f(e,r,t,n),!0}catch(e){if(e===u.not_found)return!1;throw e}}var m=o.caml_string_compare;var v=r.fill,y=r.blit_string;t.make=function(e,t){return a.bytes_to_string(r.make(e,t))},t.init=function(e,t){return a.bytes_to_string(r.init(e,t))},t.copy=function(e){return a.bytes_to_string(r.copy(a.bytes_of_string(e)))},t.sub=l,t.fill=v,t.blit=y,t.concat=function(e,t){if(t){var n=e.length;return a.bytes_to_string(function(e,t,n,r,i){for(;;){var o=i,u=t;if(o){var l=o[1],c=o[0];if(l){a.caml_blit_string(c,0,e,u,c.length),a.caml_blit_string(n,0,e,u+c.length|0,r),i=l,t=(u+c.length|0)+r|0;continue}return a.caml_blit_string(c,0,e,u,c.length),e}return e}}(a.caml_create_bytes(function(e,t,n){for(;;){var r=n,i=e;if(r){var a=r[1],o=r[0];if(a){n=a,e=c((o.length+t|0)+i|0,i);continue}return o.length+i|0}return i}}(0,n,t)),0,e,n,t))}return""},t.iter=function(e,t){for(var n=0,r=t.length-1|0;n<=r;++n)i._1(e,t.charCodeAt(n));return 0},t.iteri=function(e,t){for(var n=0,r=t.length-1|0;n<=r;++n)i._2(e,n,t.charCodeAt(n));return 0},t.map=function(e,t){return a.bytes_to_string(r.map(e,a.bytes_of_string(t)))},t.mapi=function(e,t){return a.bytes_to_string(r.mapi(e,a.bytes_of_string(t)))},t.trim=function(e){return""===e||!s(e.charCodeAt(0))&&!s(e.charCodeAt(e.length-1|0))?e:a.bytes_to_string(r.trim(a.bytes_of_string(e)))},t.escaped=function(e){return function(t){for(;;){var n=t;if(n>=e.length)return!1;var r=e.charCodeAt(n);if(!(r>=32))return!0;var i=r-34|0;if(i>58||i<0){if(i>=93)return!0;t=n+1|0}else{if(i>57||i<1)return!0;t=n+1|0}}}(0)?a.bytes_to_string(r.escaped(a.bytes_of_string(e))):e},t.index=function(e,t){return f(e,e.length,0,t)},t.index_opt=function(e,t){return d(e,e.length,0,t)},t.rindex=function(e,t){return p(e,e.length-1|0,t)},t.rindex_opt=function(e,t){return g(e,e.length-1|0,t)},t.index_from=function(e,t,n){var r=e.length;if(t<0||t>r)throw[u.invalid_argument,"String.index_from / Bytes.index_from"];return f(e,r,t,n)},t.index_from_opt=function(e,t,n){var r=e.length;if(t<0||t>r)throw[u.invalid_argument,"String.index_from_opt / Bytes.index_from_opt"];return d(e,r,t,n)},t.rindex_from=function(e,t,n){if(t<-1||t>=e.length)throw[u.invalid_argument,"String.rindex_from / Bytes.rindex_from"];return p(e,t,n)},t.rindex_from_opt=function(e,t,n){if(t<-1||t>=e.length)throw[u.invalid_argument,"String.rindex_from_opt / Bytes.rindex_from_opt"];return g(e,t,n)},t.contains=function(e,t){return h(e,0,t)},t.contains_from=h,t.rcontains_from=function(e,t,n){if(t<0||t>=e.length)throw[u.invalid_argument,"String.rcontains_from / Bytes.rcontains_from"];try{return p(e,t,n),!0}catch(e){if(e===u.not_found)return!1;throw e}},t.uppercase=function(e){return a.bytes_to_string(r.uppercase(a.bytes_of_string(e)))},t.lowercase=function(e){return a.bytes_to_string(r.lowercase(a.bytes_of_string(e)))},t.capitalize=function(e){return a.bytes_to_string(r.capitalize(a.bytes_of_string(e)))},t.uncapitalize=function(e){return a.bytes_to_string(r.uncapitalize(a.bytes_of_string(e)))},t.uppercase_ascii=function(e){return a.bytes_to_string(r.uppercase_ascii(a.bytes_of_string(e)))},t.lowercase_ascii=function(e){return a.bytes_to_string(r.lowercase_ascii(a.bytes_of_string(e)))},t.capitalize_ascii=function(e){return a.bytes_to_string(r.capitalize_ascii(a.bytes_of_string(e)))},t.uncapitalize_ascii=function(e){return a.bytes_to_string(r.uncapitalize_ascii(a.bytes_of_string(e)))},t.compare=m,t.equal=function(e,t){return e===t},t.split_on_char=function(e,t){for(var n=0,r=t.length,i=t.length-1|0;i>=0;--i)t.charCodeAt(i)===e&&(n=[l(t,i+1|0,(r-i|0)-1|0),n],r=i);return[l(t,0,r),n]}},function(e,t,n){"use strict";var r=n(2),i=n(16),a=n(3),o=n(82);function u(e,t){for(;;){var n=t,r=e;if(!r)return n;var i=[r[0],0];n[1]=i,t=i,e=r[1]}}function l(e,t,n){for(;;){var r=n,i=t;if(!i)return 0;var a=i[1],o=i[0];if(e(o)){var u=[o,0];r[1]=u,n=u,t=a}else t=a}}function c(e,t,n,r){for(;;){var i=r,a=n,o=t;if(!o)return 0;var u=o[1],l=o[0];if(e(l,i)){var c=[l,0];a[1]=c,r=i+1|0,n=c,t=u}else r=i+1|0,t=u}}function s(e,t,n){for(;;){var r=n,i=t;if(!i)return 0;var o=i[1],u=e(i[0]);if(void 0===u)t=o;else{var l=[a.valFromOption(u),0];r[1]=l,n=l,t=o}}}function f(e,t){if(e){var n=[e[0],0];return u(e[1],n)[1]=t,n}return t}function d(e,t){if(e){var n=[t(e[0]),0];return function(e,t,n){for(;;){var r=t,i=e;if(!i)return 0;var a=[n(i[0]),0];r[1]=a,t=a,e=i[1]}}(e[1],n,t),n}return 0}function p(e,t,n){if(e&&t){var r=[n(e[0],t[0]),0];return function(e,t,n,r){for(;;){var i=r,a=n,o=t;if(!o||!a)return 0;var u=[e(o[0],a[0]),0];i[1]=u,r=u,n=a[1],t=o[1]}}(n,e[1],t[1],r),r}return 0}function g(e,t){if(e){var n=[t(0,e[0]),0];return function(e,t,n,r){for(;;){var i=r,a=n,o=t;if(!a)return 0;var u=[e(o,a[0]),0];i[1]=u,r=u,n=a[1],t=o+1|0}}(t,1,e[1],n),n}return 0}function h(e,t){if(e<=0)return 0;for(var n=[t(0),0],r=n,i=1;i<e;){var a=[t(i),0];r[1]=a,r=a,i=i+1|0}return n}function m(e){for(var t=e,n=0;;){if(!t)return n;n=n+1|0,t=t[1]}}function v(e){for(var t=e,n=e.length-1|0,r=0;;){var i=r,a=n;if(a<0)return i;r=[t[a],i],n=a-1|0}}function y(e){var t=m(e),n=new Array(t);return function(e,t,n){for(;;){var r=n,i=t;if(!r)return 0;e[i]=r[0],n=r[1],t=i+1|0}}(n,0,e),n}function b(e,t){for(;;){var n=t,r=e;if(!r)return n;t=[r[0],n],e=r[1]}}function _(e,t){for(;;){var n=t,r=e;if(!n)return r[1]=0,0;t=n[1],e=u(n[0],r)}}function k(e,t){for(var n=t,r=0,i=e;;){var a=i,o=r;if(!a)return o;i=a[1],r=[n(a[0]),o]}}function w(e,t){for(;;){var n=e;if(!n)return 0;t(n[0]),e=n[1]}}function S(e,t){for(var n=e,r=0,i=t;;){var a=r,o=n;if(!o)return 0;i(a,o[0]),r=a+1|0,n=o[1]}}function x(e,t,n){for(;;){var r=e;if(!r)return t;t=n(t,r[0]),e=r[1]}}function C(e,t,n){return m(e)<1e3?function e(t,n,r){return t?r(e(t[1],n,r),t[0]):n}(e,t,n):i.reduceReverseU(y(e),t,n)}function E(e,t,n){for(var r=e,i=t,a=n,o=0;;){var u=o,l=r;if(!l)return i;o=u+1|0,i=a(i,l[0],u),r=l[1]}}function T(e,t,n){for(var r=e,i=t,a=0,o=n;;){var u=a,l=i,c=r;if(!c||!l)return u;a=[o(c[0],l[0]),u],i=l[1],r=c[1]}}function A(e,t,n){for(;;){var r=t,i=e;if(!i||!r)return 0;n(i[0],r[0]),t=r[1],e=i[1]}}function P(e,t,n,r){for(;;){var i=t,a=e;if(!a||!i)return n;n=r(n,a[0],i[0]),t=i[1],e=a[1]}}function O(e,t,n,r){return m(e)<1e3?function e(t,n,r,i){return t&&n?i(e(t[1],n[1],r,i),t[0],n[0]):r}(e,t,n,r):i.reduceReverse2U(y(e),y(t),n,r)}function F(e,t){for(;;){var n=e;if(n){if(t(n[0])){e=n[1];continue}return!1}return!0}}function R(e,t){for(;;){var n=e;if(!n)return!1;if(t(n[0]))return!0;e=n[1]}}function L(e,t,n){for(;;){var r=t,i=e;if(i&&r){if(n(i[0],r[0])){t=r[1],e=i[1];continue}return!1}return!0}}function z(e,t,n){for(;;){var r=t,i=e;if(i){if(r){var a=n(i[0],r[0]);if(0===a){t=r[1],e=i[1];continue}return a}return 1}return r?-1:0}}function N(e,t,n){for(;;){var r=t,i=e;if(i){if(r&&n(i[0],r[0])){t=r[1],e=i[1];continue}return!1}return!r}}function D(e,t,n){for(;;){var r=t,i=e;if(!i||!r)return!1;if(n(i[0],r[0]))return!0;t=r[1],e=i[1]}}function j(e,t,n){for(;;){var r=e;if(!r)return!1;if(n(r[0],t))return!0;e=r[1]}}function I(e,t,n){for(;;){var r=e;if(!r)return;var i=r[0];if(n(i[0],t))return a.some(i[1]);e=r[1]}}function B(e,t,n){for(;;){var r=e;if(!r)return!1;if(n(r[0][0],t))return!0;e=r[1]}}function M(e,t,n){if(e){var r=e[1],i=e[0];if(n(i[0],t))return r;var a=[i,0];return function(e,t,n,r){for(;;){var i=n,a=e;if(!a)return!1;var o=a[1],u=a[0];if(r(u[0],t))return i[1]=o,!0;var l=[u,0];i[1]=l,n=l,e=o}}(r,t,a,n)?a:e}return 0}function q(e,t,n,r){if(e){var i=e[1],a=e[0];if(r(a[0],t))return[[t,n],i];var o=[a,0];return function(e,t,n,r,i){for(;;){var a=r,o=e;if(!o)return!1;var u=o[1],l=o[0];if(i(l[0],t))return a[1]=[[t,n],u],!0;var c=[l,0];a[1]=c,r=c,e=u}}(i,t,n,o,r)?o:[[t,n],e]}return[[t,n],0]}function U(e,t){var n=y(e);return o.stableSortInPlaceByU(n,t),v(n)}function $(e,t){for(;;){var n=e;if(!n)return;var r=n[0];if(t(r))return a.some(r);e=n[1]}}function W(e,t){for(;;){var n=e;if(!n)return 0;var r=n[1],i=n[0];if(t(i)){var a=[i,0];return l(t,r,a),a}e=r}}function V(e,t){return W(e,r.__1(t))}function H(e,t){for(var n=e,r=t,i=0;;){var a=i,o=n;if(!o)return 0;var u=o[1],l=o[0];if(r(l,a)){var s=[l,0];return c(r,u,s,a+1|0),s}i=a+1|0,n=u}}function G(e,t){return H(e,r.__2(t))}function Q(e,t){for(;;){var n=e;if(!n)return 0;var r=n[1],i=t(n[0]);if(void 0!==i){var o=[a.valFromOption(i),0];return s(t,r,o),o}e=r}}function K(e,t){if(e){var n=e[0],r=[n,0],i=[n,0],a=t(n);return function(e,t,n,r){for(;;){var i=r,a=n,o=t;if(!o)return 0;var u=o[1],l=o[0],c=[l,0];e(l)?(a[1]=c,n=c,t=u):(i[1]=c,r=c,t=u)}}(t,e[1],r,i),a?[r,i[1]]:[r[1],i]}return[0,0]}var Y=m,X=V,Z=G;t.length=m,t.size=Y,t.head=function(e){if(e)return a.some(e[0])},t.headExn=function(e){if(e)return e[0];throw new Error("headExn")},t.tail=function(e){if(e)return e[1]},t.tailExn=function(e){if(e)return e[1];throw new Error("tailExn")},t.add=function(e,t){return[t,e]},t.get=function(e,t){if(!(t<0))for(var n=e,r=t;;){var i=r,o=n;if(!o)return;if(0===i)return a.some(o[0]);r=i-1|0,n=o[1]}},t.getExn=function(e,t){if(t<0)throw new Error("getExn");for(var n=e,r=t;;){var i=r,a=n;if(!a)throw new Error("getExn");if(0===i)return a[0];r=i-1|0,n=a[1]}},t.make=function(e,t){if(e<=0)return 0;for(var n=[t,0],r=n,i=1;i<e;){var a=[t,0];r[1]=a,r=a,i=i+1|0}return n},t.makeByU=h,t.makeBy=function(e,t){return h(e,r.__1(t))},t.shuffle=function(e){var t=y(e);return i.shuffleInPlace(t),v(t)},t.drop=function(e,t){if(!(t<0))for(var n=e,r=t;;){if(0===r)return n;if(!n)return;r=r-1|0,n=n[1]}},t.take=function(e,t){if(!(t<0)){if(0===t)return 0;if(e){var n=[e[0],0];return function(e,t,n){for(;;){var r=n,i=t,a=e;if(0===a)return!0;if(!i)return!1;var o=[i[0],0];r[1]=o,n=o,t=i[1],e=a-1|0}}(t-1|0,e[1],n)?n:void 0}}},t.splitAt=function(e,t){if(!(t<0)){if(0===t)return[0,e];if(e){var n=[e[0],0],r=function(e,t,n){for(;;){var r=n,i=t,a=e;if(0===a)return i;if(!i)return;var o=[i[0],0];r[1]=o,n=o,t=i[1],e=a-1|0}}(t-1|0,e[1],n);return void 0!==r?[n,r]:void 0}}},t.concat=f,t.concatMany=function(e){var t=e.length;if(1!==t){if(0!==t){for(var n=e.length,r=e[n-1|0],i=n-2|0;i>=0;--i)r=f(e[i],r);return r}return 0}return e[0]},t.reverseConcat=b,t.flatten=function(e){for(;;){var t=e;if(!t)return 0;var n=t[0];if(n){var r=[n[0],0];return _(u(n[1],r),t[1]),r}e=t[1]}},t.mapU=d,t.map=function(e,t){return d(e,r.__1(t))},t.zip=function(e,t){if(e&&t){var n=[[e[0],t[0]],0];return function(e,t,n){for(;;){var r=n,i=t,a=e;if(!a||!i)return 0;var o=[[a[0],i[0]],0];r[1]=o,n=o,t=i[1],e=a[1]}}(e[1],t[1],n),n}return 0},t.zipByU=p,t.zipBy=function(e,t,n){return p(e,t,r.__2(n))},t.mapWithIndexU=g,t.mapWithIndex=function(e,t){return g(e,r.__2(t))},t.fromArray=v,t.toArray=y,t.reverse=function(e){return b(e,0)},t.mapReverseU=k,t.mapReverse=function(e,t){return k(e,r.__1(t))},t.forEachU=w,t.forEach=function(e,t){return w(e,r.__1(t))},t.forEachWithIndexU=S,t.forEachWithIndex=function(e,t){return S(e,r.__2(t))},t.reduceU=x,t.reduce=function(e,t,n){return x(e,t,r.__2(n))},t.reduceWithIndexU=E,t.reduceWithIndex=function(e,t,n){return E(e,t,r.__3(n))},t.reduceReverseU=C,t.reduceReverse=function(e,t,n){return C(e,t,r.__2(n))},t.mapReverse2U=T,t.mapReverse2=function(e,t,n){return T(e,t,r.__2(n))},t.forEach2U=A,t.forEach2=function(e,t,n){return A(e,t,r.__2(n))},t.reduce2U=P,t.reduce2=function(e,t,n,i){return P(e,t,n,r.__3(i))},t.reduceReverse2U=O,t.reduceReverse2=function(e,t,n,i){return O(e,t,n,r.__3(i))},t.everyU=F,t.every=function(e,t){return F(e,r.__1(t))},t.someU=R,t.some=function(e,t){return R(e,r.__1(t))},t.every2U=L,t.every2=function(e,t,n){return L(e,t,r.__2(n))},t.some2U=D,t.some2=function(e,t,n){return D(e,t,r.__2(n))},t.cmpByLength=function(e,t){for(;;){var n=t,r=e;if(r){if(n){t=n[1],e=r[1];continue}return 1}return n?-1:0}},t.cmpU=z,t.cmp=function(e,t,n){return z(e,t,r.__2(n))},t.eqU=N,t.eq=function(e,t,n){return N(e,t,r.__2(n))},t.hasU=j,t.has=function(e,t,n){return j(e,t,r.__2(n))},t.getByU=$,t.getBy=function(e,t){return $(e,r.__1(t))},t.keepU=W,t.keep=V,t.filter=X,t.keepWithIndexU=H,t.keepWithIndex=G,t.filterWithIndex=Z,t.keepMapU=Q,t.keepMap=function(e,t){return Q(e,r.__1(t))},t.partitionU=K,t.partition=function(e,t){return K(e,r.__1(t))},t.unzip=function(e){if(e){var t=e[0],n=[t[0],0],r=[t[1],0];return function(e,t,n){for(;;){var r=n,i=t,a=e;if(!a)return 0;var o=a[0],u=[o[0],0],l=[o[1],0];i[1]=u,r[1]=l,n=l,t=u,e=a[1]}}(e[1],n,r),[n,r]}return[0,0]},t.getAssocU=I,t.getAssoc=function(e,t,n){return I(e,t,r.__2(n))},t.hasAssocU=B,t.hasAssoc=function(e,t,n){return B(e,t,r.__2(n))},t.removeAssocU=M,t.removeAssoc=function(e,t,n){return M(e,t,r.__2(n))},t.setAssocU=q,t.setAssoc=function(e,t,n,i){return q(e,t,n,r.__2(i))},t.sortU=U,t.sort=function(e,t){return U(e,r.__2(t))}},function(e,t,n){"use strict";var r=n(28),i=n(34),a=n(35);var o={initial:-878767996,inherit_:-601204732,unset:653193961,toString:function(e){return-601204732!==e?e>=653193961?"unset":"initial":"inherit"}};var u={s:function(e){return[115,e]},ms:function(e){return[24422,e]},toString:function(e){return e[0]>=24422?e[1].toString()+"ms":e[1].toString()+"s"}};var l={pct:function(e){return[-119887163,e]},toString:function(e){return e[1].toString()+"%"}};var c={toString:function(e){return"url("+e[1]+")"}};function s(e){if("number"==typeof e)return"0";var t=e[0];if(t>=22632)return t>=25092?25096!==t?t>=26433?t>=5691738?e[1].toString()+"rem":e[1].toString()+"vw":t>=26418?e[1].toString()+"vh":e[1].toString()+"pt":e[1].toString()+"px":t>=24416?t>=25075?e[1].toString()+"pc":e[1].toString()+"mm":t>=22643?e[1].toString()+"ex":e[1].toString()+"em";if(t>=-833470756)return t>=22181?t>=22186?e[1].toString()+"cm":e[1].toString()+"ch":t>=-119887163?e[1].toString()+"%":e[1].toString()+"vmin";if(t>=-977586742)return t>=-833472530?e[1].toString()+"vmax":e[1].toString()+"in";if(t>=-1040484748)return e[1].toString()+"px";var n=e[1];return n[0]>=5745024?"calc("+s(n[1])+" - "+s(n[2])+")":"calc("+s(n[1])+" + "+s(n[2])+")"}var f={ch:function(e){return[22181,e]},em:function(e){return[22632,e]},ex:function(e){return[22643,e]},rem:function(e){return[5691738,e]},vh:function(e){return[26418,e]},vw:function(e){return[26433,e]},vmin:function(e){return[-833470756,e]},vmax:function(e){return[-833472530,e]},px:function(e){return[25096,e]},pxFloat:function(e){return[-1040484748,e]},cm:function(e){return[22186,e]},mm:function(e){return[24416,e]},inch:function(e){return[-977586742,e]},pc:function(e){return[25075,e]},pt:function(e){return[25092,e]},zero:-789508312,toString:s};function d(e){var t=e[0];return t>=4995526?t>=5690837?e[1].toString()+"rad":e[1].toString()+"deg":t>=-855250051?e[1].toString()+"turn":e[1].toString()+"grad"}var p={deg:function(e){return[4995526,e]},rad:function(e){return[5690837,e]},grad:function(e){return[-999567410,e]},turn:function(e){return[-855250051,e]},toString:d};var g={ltr:5396714,rtl:5695082,toString:function(e){return e>=5695082?"rtl":"ltr"}};var h={absolute:-1013592457,relative:903134412,$$static:100392110,fixed:10615156,sticky:188263721,toString:function(e){return 10615156!==e?e>=188263721?e>=903134412?"relative":"sticky":e>=100392110?"static":"absolute":"fixed"}};var m={none:-922086728,both:-1055160191,horizontal:365165796,vertical:-367674250,block:888960333,inline:423610969,toString:function(e){return e>=-367674250?e>=423610969?e>=888960333?"block":"inline":e>=365165796?"horizontal":"vertical":e>=-922086728?"none":"both"}};var v={normal:812216871,smallCaps:-386684792,toString:function(e){return e>=812216871?"normal":"smallCaps"}};var y={normal:812216871,italic:107228912,oblique:734792881,toString:function(e){return 734792881!==e?e>=812216871?"normal":"italic":"oblique"}};var b={fill:-1011102077,content:427265337,maxContent:60557045,minContent:-550577721,fitContent:-195805336,toString:function(e){return e>=-550577721?e>=60557045?e>=427265337?"content":"max-content":e>=-195805336?"fit-content":"min-content":e>=-1011102077?"fill":"auto"}};var _={hidden:-862584982,visible:589592690,scroll:-949692403,auto:-1065951377,toString:function(e){return e>=-862584982?e>=589592690?"visible":"hidden":e>=-949692403?"scroll":"auto"}};var k={auto:-1065951377,toString:function(e){return"auto"}};var w={toString:function(e){return e>=-15525083?e>=5693978?"row":"row dense":e>=-227605271?"column dense":"column"}};var S={toString:function(e){return"normal"}};var x={toString:function(e){return e>=79692155?e>=476669816?e>=516406248?"text-top":"text-bottom":e>=287825029?"baseline":"super":e>=5745024?e>=5793429?"top":"sub":e>=-445061397?"bottom":"middle"}};var C={toString:function(e){return"number"==typeof e?e>=652328338?"auto-fill":"auto-fit":e[1].toString()}};var E={toString:function(e){return e>=-484197732?e>=700345660?e>=787279419?e>=826920258?"upper-latin":"upper-roman":e>=739986499?"lower-latin":"lower-roman":e>=-422333295?"decimal":"upper-alpha":e>=-703761904?e>=-655228771?e>=-571131491?"lower-alpha":"square":e>=-699686657?"lower-greek":"circle":e>=-922086728?"none":"disc"}};var T={toString:function(e){return e>=501235708?"inside":"outside"}};var A={toString:function(e){return e>=472095738?568403505!==e?e>=852175633?e>=1042283741?"inset":"double":e>=841979626?"dotted":"grove":"dashed":-862584982!==e?e>=12956715?e>=209930196?"outset":"solid":e>=-379468757?"ridge":"none":"hidden"}};var P={thin:-855898535,extraLight:-21160922,light:-184774442,medium:-20425611,semiBold:-812709613,bold:-1055161979,extraBold:-81801163,lighter:434326211,bolder:-534575822,toString:function(e){return"number"==typeof e?e>=-81801163?e>=-20425611?e>=812216871?e>=888264127?"900":"400":e>=434326211?"lighter":"500":e>=-21160922?"200":"800":-855898535!==e?e>=-534575822?e>=-184774442?"300":"bolder":e>=-812709613?"600":"700":"100":e[1].toString()}};var O={toString:function(e){return e>=812216871?e>=892586298?"alternate":"normal":e>=545428232?"alternate-reverse":"reverse"}};var F={toString:function(e){return e>=245861168?e>=733653774?"forwards":"backwards":e>=-922086728?"none":"both"}};var R={toString:function(e){return"number"==typeof e?"infinite":e[1].toString()}};var L={toString:function(e){return e>=-276545362?"paused":"running"}};var z={toString:function(e){return e>=82328943?e>=477181167?e>=624364317?626862894!==e?e>=939907157?e>=951366027?"ne-resize":"not-allowed":e>=676920916?"col-resize":"nw-resize":"context-menu":e>=577832966?e>=621258809?"e-resize":"ew-resize":e>=563171728?"alias":"nesw-resize":e>=302348560?365450254!==e?e>=457757954?e>=465819841?"default":"n-resize":e>=381626435?"vertical-text":"no-drop":"all-scroll":e>=180897442?e>=294257099?"w-resize":"crosshair":e>=103479213?"progress":"nwse-resize":e>=-840286290?e>=-459627717?-348903737!==e?e>=-19620980?e>=-18796519?"ns-resize":"grabbing":e>=-88732200?"zoom-in":"zoom-out":"s-resize":e>=-786317123?e>=-693048282?"se-resize":"pointer":e>=-822977931?"wait":"row-resize":e>=-999567412?-989121855!==e?e>=-922086728?e>=-856044371?"text":"none":e>=-933174511?"move":"grab":"help":e>=-1044071499?e>=-1020049992?"sw-resize":"copy":e>=-1044569694?"cell":"auto"}};function N(e){return e[1].toString()+"%"}function D(e){if("number"==typeof e)return e>=582626130?"transparent":"currentColor";var t=e[0];if(-878128972!==t){if(t>=5197569){if(t>=5692173){var n=e[1];return"rgb("+n[0].toString()+", "+n[1].toString()+", "+n[2].toString()+")"}var r=e[1];return"hsl("+d(r[0])+", "+N(r[1])+", "+N(r[2])+")"}if(t>=5194459)return"#"+e[1];var i=e[1];return"hsla("+d(i[0])+", "+N(i[1])+", "+N(i[2])+", "+function(e){return e[0]>=5496390?e[1].toString():e[1].toString()+"%"}(i[3])+")"}var a=e[1];return"rgba("+a[0].toString()+", "+a[1].toString()+", "+a[2].toString()+", "+a[3].toString()+")"}var j={toString:function(e){return e>=472095738?568403505!==e?e>=852175633?e>=1042283741?"inset":"double":e>=841979626?"dotted":"groove":"dashed":-862584982!==e?e>=12956715?e>=209930196?"outset":"solid":e>=-379468757?"ridge":"none":"hidden"}};var I={toString:function(e){return e>=-922086728?"none":"auto"}};var B={toString:function(e){return"none"}};var M={normal:812216871,toString:function(e){return"normal"}};var q={toString:function(e){return"number"==typeof e?"normal":e[1].toString()}};var U={toString:function(e){return"normal"}};var $={toString:function(e){return 423610969!==e?e>=888960333?"block":"run-in":"inline"}};var W={toString:function(e){return-999565626!==e?e>=182695950?"table":"flex":"grid"}};var V={toString:function(e){return"list-item"}};var H={toString:function(e){return e>=606419204?e>=850209563?e>=1054826616?"table-caption":"table-column-group":e>=793912528?"table-cell":"table-header-group":e>=-836725517?e>=97122692?"table-column":"table-row-group":e>=-843129172?"table-row":"table-footer-group"}};var G={toString:function(e){return e>=790889754?"contents":"none"}};var Q={toString:function(e){return e>=53323314?e>=64712127?"inline-grid":"inline-flex":e>=-147785676?"inline-block":"inline-table"}};var K={toString:function(e){return-162316795!==e?e>=812216871?"normal":"auto":"stretch"}};var Y={toString:function(e){return e>=67859554?98248149!==e?e>=924268066?e>=1040645430?"self-start":"flex-end":e>=662439529?"flex-start":"start":"center":e>=-379319332?e>=51834799?"self-end":"right":e>=-944764921?"left":"end"}};var X={toString:function(e){return"baseline"}};var Z={toString:function(e){return"normal"}};var J={toString:function(e){return e>=-162316795?e>=516682146?"space-between":"stretch":e>=-485895757?"space-around":"space-evenly"}};var ee={toString:function(e){return e>=62250832?e>=98248149?"center":"justify":e>=-379319332?"right":"left"}};var te={toString:function(e){return 812216871!==e?e>=892748188?"keep-all":"break-all":"normal"}};var ne={toString:function(e){return e>=660870029?e>=812216871?e>=867913355?"nowrap":"normal":e>=705417996?"break-spaces":"pre-wrap":e>=538440119?"pre-line":"pre"}};var re={toString:function(e){return e>=812216871?"normal":"stretch"}};var ie={toString:function(e){return e>=812216871?"normal":"auto"}};var ae={toString:function(e){return 67859554!==e?e>=662439529?e>=924268066?"flex-end":"flex-start":e>=98248149?"center":"end":"start"}};var oe={toString:function(e){return-922086728!==e?e>=427065300?e>=635502604?"scale-down":"contain":e>=-899416265?"cover":"fill":"none"}};var ue={toString:function(e){return e>=-944764921?e>=-379319332?e>=943927042?"inline-end":"right":e>=-922086728?"none":"left":e>=-968886455?"inline-start":"both"}};var le={toString:function(e){return-944764921!==e?e>=-379319332?e>=943927042?"inline-end":"right":e>=-922086728?"none":"inline-start":"left"}};var ce={toString:function(e){return-862584982!==e?e>=589592690?"visible":"collapse":"hidden"}};var se={toString:function(e){return e>=10615156?"fixed":"auto"}};var fe={toString:function(e){return e>=119283555?"separate":"collapse"}};var de={toString:function(e){return-463121288!==e?e>=867913355?"nowrap":"wrap":"wrap-reverse"}};var pe={toString:function(e){return e>=135477484?e>=378951208?"row-reverse":"column-reverse":e>=5693978?"row":"column"}};var ge={toString:function(e){return e>=9307263?"border-box":"content-box"}};var he={toString:function(e){return"number"==typeof e?"auto":e[1].toString()}};var me={toString:function(e){return-922086728!==e?e>=4847905?e>=427065300?"contain":"all":e>=-856044371?"text":"auto":"none"}};var ve={toString:function(e){return e>=-425349839?e>=-415330030?"uppercase":"lowercase":e>=-509867604?"capitalize":"none"}};var ye={toString:function(e){return"number"==typeof e?"none":i.trim(r.fold_left((function(e,t){return e+"'"+t+"' "}),"",e[1]))}};var be={toString:function(e){if("number"==typeof e)return"auto";var t=e[0];if(t>=5496390)return t>=930693872?e[1]:String(e[1]);if(t>=-192325942){var n=e[1];return String(n[0])+" "+n[1]}var r=e[1];return"span "+(r[0]>=930693872?r[1]:String(r[1]))}};var _e={toString:function(e){return-118437525!==e?e>=10615156?"fixed":"scroll":"local"}};var ke={toString:function(e){return 9307263!==e?e>=972575930?"padding-box":"content-box":"border-box"}};var we={toString:function(e){return 9307263!==e?e>=972575930?"padding-box":"content-box":"border-box"}};var Se={X:{toString:function(e){return-379319332!==e?e>=98248149?"center":"left":"right"}},Y:{toString:function(e){return 5793429!==e?e>=98248149?"center":"bottom":"top"}},toString:function(e){return-445061397!==e?e>=5793429?e>=98248149?"center":"top":e>=-379319332?"right":"left":"bottom"}};var xe={toString:function(e){return e>=23497926?e>=646437021?e>=646437022?"repeat-y":"repeat-x":e>=108828507?"repeat":"space":e>=-312084402?"round":"no-repeat"}};var Ce={toString:function(e){return"number"==typeof e?e>=166888785?"ellipsis":"clip":e[1]}};var Ee={toString:function(e){return-922086728!==e?e>=412155569?e>=888664412?"blink":"line-through":e>=131142924?"underline":"overline":"none"}};var Te={toString:function(e){return 12956715!==e?e>=841979626?e>=852175633?"double":"dotted":e>=568403505?"dashed":"wavy":"solid"}};var Ae={toString:function(e){return e>=-195805336?"fit-content":"auto"}};var Pe={toString:function(e){return"none"}};var Oe={toString:function(e){return"auto"}};var Fe={toString:function(e){return"none"}};var Re={toString:function(e){return 893332859!==e?e>=1059921449?"break-word":"normal":"anywhere"}};function Le(e){for(var t=a.map(e,(function(e){return D(e[1])+" "+s(e[0])})),n="";;){var r=n,i=t;if(i){var o=i[1],u=i[0];if(o){n=r+(u+", "),t=o;continue}return r+u}return r}}var ze={toString:function(e){return"none"}};var Ne={marginBox:-298658179,borderBox:9307263,paddingBox:972575930,contentBox:-1008848302,fillBox:65166152,strokeBox:-229710541,viewBox:481366182,toString:function(e){return e>=9307263?e>=481366182?e>=972575930?"padding-box":"view-box":e>=65166152?"fill-box":"border-box":-298658179!==e?e>=-229710541?"stroke-box":"content-box":"margin-box"}};var De={toString:function(e){return"none"}};var je={toString:function(e){return e>=589592690?"visible":"hidden"}};var Ie={toString:function(e){return-922086728!==e?e>=-878767996?"initial":"auto":"none"}};var Be={toString:function(e){return e>=589702045?"preserve-3d":"flat"}};var Me={toString:function(e){return"none"}},qe={linear:-325037595,ease:-1022587922,easeIn:138027891,easeOut:715748672,easeInOut:-960651557,stepStart:-193525386,stepEnd:20933615,steps:function(e,t){return[68058023,[e,t]]},cubicBezier:function(e,t,n,r){return[-554785527,[e,t,n,r]]},toString:function(e){if("number"==typeof e)return e>=-193525386?e>=138027891?"ease-out":e>=20933615?"step-end":"step-start":-960651557!==e?e>=-325037595?"linear":"ease":"ease-in-out";if(e[0]>=68058023){var t=e[1],n=t[0];return t[1]>=67859554?"steps("+n.toString()+", start)":"steps("+n.toString()+", end)"}var r=e[1];return"cubic-bezier("+r[0].toString()+", "+r[1].toString()+", "+r[2].toString()+", "+r[3].toString()+")"}},Ue={translate:function(e,t){return[-914368690,[e,t]]},translate3d:function(e,t,n){return[178189215,[e,t,n]]},translateX:function(e){return[106728778,e]},translateY:function(e){return[106728779,e]},translateZ:function(e){return[106728780,e]},scale:function(e,t){return[-120664438,[e,t]]},scale3d:function(e,t,n){return[-452513317,[e,t,n]]},scaleX:function(e){return[1009117838,e]},scaleY:function(e){return[1009117839,e]},scaleZ:function(e){return[1009117840,e]},rotate:function(e){return[-887077285,e]},rotate3d:function(e,t,n,r){return[142802924,[e,t,n,r]]},rotateX:function(e){return[-249738851,e]},rotateY:function(e){return[-249738850,e]},rotateZ:function(e){return[-249738849,e]},skew:function(e,t){return[-866839798,[e,t]]},skewX:function(e){return[-31746546,e]},skewY:function(e){return[-31746545,e]},toString:function(e){var t=e[0];if(t>=-120664438){if(!(t>=106728778)){if(-31746546!==t){if(t>=-31746545)return"skewY("+d(e[1])+")";var n=e[1],r=n[0],i=n[1];return"scale("+r.toString()+", "+i.toString()+")"}return"skewX("+d(e[1])+")"}if(t>=178189215){if(!(t>=1009117838)){var a=e[1],o=a[0],u=a[1],l=a[2];return"translate3d("+s(o)+", "+s(u)+", "+s(l)+")"}switch(t-1009117838|0){case 0:return"scaleX("+e[1].toString()+")";case 1:return"scaleY("+e[1].toString()+")";case 2:return"scaleZ("+e[1].toString()+")"}}else{if(t>=142802924){var c=e[1];return"rotate3d("+c[0].toString()+", "+c[1].toString()+", "+c[2].toString()+", "+d(c[3])+")"}switch(t-106728778|0){case 0:return"translateX("+s(e[1])+")";case 1:return"translateY("+s(e[1])+")";case 2:return"translateZ("+s(e[1])+")"}}}else{if(!(t>=-887077285)){if(t>=-914368690){var f=e[1];return"translate("+s(f[0])+", "+s(f[1])+")"}return"perspective("+e[1].toString()+")"}if(!(t>=-452513317)){if(t>=-866839798){var p=e[1];return"skew("+d(p[0])+", "+d(p[1])+")"}return"rotate("+d(e[1])+")"}if(!(t>=-249738851)){var g=e[1];return"scale3d("+g[0].toString()+", "+g[1].toString()+", "+g[2].toString()+")"}switch(t+249738851|0){case 0:return"rotateX("+d(e[1])+")";case 1:return"rotateY("+d(e[1])+")";case 2:return"rotateZ("+d(e[1])+")"}}}},$e={rgb:function(e,t,n){return[5692173,[e,t,n]]},rgba:function(e,t,n,r){return[-878128972,[e,t,n,r]]},hsl:function(e,t,n){return[5197569,[e,[-119887163,t],[-119887163,n]]]},hsla:function(e,t,n,r){return[-988425664,[e,[-119887163,t],[-119887163,n],r]]},hex:function(e){return[5194459,e]},transparent:582626130,currentColor:292050538,toString:D},We={linearGradient:function(e,t){return[616379637,[e,t]]},radialGradient:function(e){return[119548911,e]},repeatingLinearGradient:function(e,t){return[-160280644,[e,t]]},repeatingRadialGradient:function(e){return[-657111370,e]},toString:function(e){var t=e[0];if(t>=119548911){if(t>=616379637){var n=e[1];return"linear-gradient("+d(n[0])+", "+Le(n[1])+")"}return"radial-gradient("+Le(e[1])+")"}if(t>=-160280644){var r=e[1];return"repeating-linear-gradient("+d(r[0])+", "+Le(r[1])+")"}return"repeating-radial-gradient("+Le(e[1])+")"}};t.Cascading=o,t.Time=u,t.Percentage=l,t.Url=c,t.Length=f,t.Angle=p,t.Direction=g,t.Position=h,t.Resize=m,t.FontVariant=v,t.FontStyle=y,t.FlexBasis=b,t.Overflow=_,t.Margin=k,t.GridAutoFlow=w,t.GridColumnGap=S,t.VerticalAlign=x,t.TimingFunction=qe,t.RepeatValue=C,t.ListStyleType=E,t.ListStylePosition=T,t.OutlineStyle=A,t.FontWeight=P,t.Transform=Ue,t.AnimationDirection=O,t.AnimationFillMode=F,t.AnimationIterationCount=R,t.AnimationPlayState=L,t.Cursor=z,t.Color=$e,t.BorderStyle=j,t.PointerEvents=I,t.Perspective=B,t.LetterSpacing=M,t.LineHeight=q,t.WordSpacing=U,t.DisplayOutside=$,t.DisplayInside=W,t.DisplayListItem=V,t.DisplayInternal=H,t.DisplayBox=G,t.DisplayLegacy=Q,t.JustifySelf=K,t.PositionalAlignment=Y,t.BaselineAlignment=X,t.NormalAlignment=Z,t.DistributedAlignment=J,t.TextAlign=ee,t.WordBreak=te,t.WhiteSpace=ne,t.AlignItems=re,t.AlignSelf=ie,t.AlignContent=ae,t.ObjectFit=oe,t.Clear=ue,t.Float=le,t.Visibility=ce,t.TableLayout=se,t.BorderCollapse=fe,t.FlexWrap=de,t.FlexDirection=pe,t.BoxSizing=ge,t.ColumnCount=he,t.UserSelect=me,t.TextTransform=ve,t.GridTemplateAreas=ye,t.GridArea=be,t.BackgroundAttachment=_e,t.BackgroundClip=ke,t.BackgroundOrigin=we,t.BackgroundPosition=Se,t.BackgroundRepeat=xe,t.TextOverflow=Ce,t.TextDecorationLine=Ee,t.TextDecorationStyle=Te,t.Width=Ae,t.MaxWidth=Pe,t.Height=Oe,t.MaxHeight=Fe,t.OverflowWrap=Re,t.Gradient=We,t.BackgroundImage=ze,t.GeometyBox=Ne,t.ClipPath=De,t.BackfaceVisibility=je,t.Flex=Ie,t.TransformStyle=Be,t.ListStyleImage=Me},function(e,t,n){const r=n(88),i=n(90),a=n(38),o=n(39),u=n(40),l=n(41),{merge:c,checkSanitizeDeprecation:s,escape:f}=n(9),{getDefaults:d,changeDefaults:p,defaults:g}=n(8);function h(e,t,n){if(null==e)throw new Error("marked(): input parameter is undefined or null");if("string"!=typeof e)throw new Error("marked(): input parameter is of type "+Object.prototype.toString.call(e)+", string expected");if(n||"function"==typeof t){n||(n=t,t=null),t=c({},h.defaults,t||{}),s(t);const a=t.highlight;let o,u,l=0;try{o=r.lex(e,t)}catch(e){return n(e)}u=o.length;const f=function(e){if(e)return t.highlight=a,n(e);let r;try{r=i.parse(o,t)}catch(t){e=t}return t.highlight=a,e?n(e):n(null,r)};if(!a||a.length<3)return f();if(delete t.highlight,!u)return f();for(;l<o.length;l++)!function(e){"code"!==e.type?--u||f():a(e.text,e.lang,(function(t,n){return t?f(t):null==n||n===e.text?--u||f():(e.text=n,e.escaped=!0,void(--u||f()))}))}(o[l])}else try{return t=c({},h.defaults,t||{}),s(t),i.parse(r.lex(e,t),t)}catch(e){if(e.message+="\nPlease report this to https://github.com/markedjs/marked.",(t||h.defaults).silent)return"<p>An error occurred:</p><pre>"+f(e.message+"",!0)+"</pre>";throw e}}h.options=h.setOptions=function(e){return c(h.defaults,e),p(h.defaults),h},h.getDefaults=d,h.defaults=g,h.use=function(e){const t=c({},e);if(e.renderer){const n=h.defaults.renderer||new o;for(const t in e.renderer){const r=n[t];n[t]=(...i)=>{let a=e.renderer[t].apply(n,i);return!1===a&&(a=r.apply(n,i)),a}}t.renderer=n}if(e.tokenizer){const n=h.defaults.tokenizer||new a;for(const t in e.tokenizer){const r=n[t];n[t]=(...i)=>{let a=e.tokenizer[t].apply(n,i);return!1===a&&(a=r.apply(n,i)),a}}t.tokenizer=n}h.setOptions(t)},h.Parser=i,h.parser=i.parse,h.Renderer=o,h.TextRenderer=u,h.Lexer=r,h.lexer=r.lex,h.Tokenizer=a,h.Slugger=l,h.parse=h,e.exports=h},function(e,t,n){const{defaults:r}=n(8),{rtrim:i,splitCells:a,escape:o,findClosingBracket:u}=n(9);function l(e,t,n){const r=t.href,i=t.title?o(t.title):null;return"!"!==e[0].charAt(0)?{type:"link",raw:n,href:r,title:i,text:e[1]}:{type:"image",raw:n,text:o(e[1]),href:r,title:i}}e.exports=class{constructor(e){this.options=e||r}space(e){const t=this.rules.block.newline.exec(e);if(t)return t[0].length>1?{type:"space",raw:t[0]}:{raw:"\n"}}code(e,t){const n=this.rules.block.code.exec(e);if(n){const e=t[t.length-1];if(e&&"paragraph"===e.type)return t.pop(),e.text+="\n"+n[0].trimRight(),e.raw+="\n"+n[0],e;{const e=n[0].replace(/^ {4}/gm,"");return{type:"code",raw:n[0],codeBlockStyle:"indented",text:this.options.pedantic?e:i(e,"\n")}}}}fences(e){const t=this.rules.block.fences.exec(e);if(t)return{type:"code",raw:t[0],lang:t[2]?t[2].trim():t[2],text:t[3]||""}}heading(e){const t=this.rules.block.heading.exec(e);if(t)return{type:"heading",raw:t[0],depth:t[1].length,text:t[2]}}nptable(e){const t=this.rules.block.nptable.exec(e);if(t){const e={type:"table",header:a(t[1].replace(/^ *| *\| *$/g,"")),align:t[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:t[3]?t[3].replace(/\n$/,"").split("\n"):[],raw:t[0]};if(e.header.length===e.align.length){let t,n=e.align.length;for(t=0;t<n;t++)/^ *-+: *$/.test(e.align[t])?e.align[t]="right":/^ *:-+: *$/.test(e.align[t])?e.align[t]="center":/^ *:-+ *$/.test(e.align[t])?e.align[t]="left":e.align[t]=null;for(n=e.cells.length,t=0;t<n;t++)e.cells[t]=a(e.cells[t],e.header.length);return e}}}hr(e){const t=this.rules.block.hr.exec(e);if(t)return{type:"hr",raw:t[0]}}blockquote(e){const t=this.rules.block.blockquote.exec(e);if(t){const e=t[0].replace(/^ *> ?/gm,"");return{type:"blockquote",raw:t[0],text:e}}}list(e){const t=this.rules.block.list.exec(e);if(t){let e=t[0];const n=t[2],r=n.length>1,i={type:"list",raw:e,ordered:r,start:r?+n:"",loose:!1,items:[]},a=t[0].match(this.rules.block.item);let o,u,l,c,s,f,d,p=!1;const g=a.length;for(let t=0;t<g;t++)o=a[t],e=o,u=o.length,o=o.replace(/^ *([*+-]|\d+\.) */,""),~o.indexOf("\n ")&&(u-=o.length,o=this.options.pedantic?o.replace(/^ {1,4}/gm,""):o.replace(new RegExp("^ {1,"+u+"}","gm"),"")),t!==g-1&&(l=this.rules.block.bullet.exec(a[t+1])[0],(n.length>1?1===l.length:l.length>1||this.options.smartLists&&l!==n)&&(c=a.slice(t+1).join("\n"),i.raw=i.raw.substring(0,i.raw.length-c.length),t=g-1)),s=p||/\n\n(?!\s*$)/.test(o),t!==g-1&&(p="\n"===o.charAt(o.length-1),s||(s=p)),s&&(i.loose=!0),f=/^\[[ xX]\] /.test(o),d=void 0,f&&(d=" "!==o[1],o=o.replace(/^\[[ xX]\] +/,"")),i.items.push({raw:e,task:f,checked:d,loose:s,text:o});return i}}html(e){const t=this.rules.block.html.exec(e);if(t)return{type:this.options.sanitize?"paragraph":"html",raw:t[0],pre:!this.options.sanitizer&&("pre"===t[1]||"script"===t[1]||"style"===t[1]),text:this.options.sanitize?this.options.sanitizer?this.options.sanitizer(t[0]):o(t[0]):t[0]}}def(e){const t=this.rules.block.def.exec(e);if(t){return t[3]&&(t[3]=t[3].substring(1,t[3].length-1)),{tag:t[1].toLowerCase().replace(/\s+/g," "),raw:t[0],href:t[2],title:t[3]}}}table(e){const t=this.rules.block.table.exec(e);if(t){const e={type:"table",header:a(t[1].replace(/^ *| *\| *$/g,"")),align:t[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:t[3]?t[3].replace(/\n$/,"").split("\n"):[]};if(e.header.length===e.align.length){e.raw=t[0];let n,r=e.align.length;for(n=0;n<r;n++)/^ *-+: *$/.test(e.align[n])?e.align[n]="right":/^ *:-+: *$/.test(e.align[n])?e.align[n]="center":/^ *:-+ *$/.test(e.align[n])?e.align[n]="left":e.align[n]=null;for(r=e.cells.length,n=0;n<r;n++)e.cells[n]=a(e.cells[n].replace(/^ *\| *| *\| *$/g,""),e.header.length);return e}}}lheading(e){const t=this.rules.block.lheading.exec(e);if(t)return{type:"heading",raw:t[0],depth:"="===t[2].charAt(0)?1:2,text:t[1]}}paragraph(e){const t=this.rules.block.paragraph.exec(e);if(t)return{type:"paragraph",raw:t[0],text:"\n"===t[1].charAt(t[1].length-1)?t[1].slice(0,-1):t[1]}}text(e){const t=this.rules.block.text.exec(e);if(t)return{type:"text",raw:t[0],text:t[0]}}escape(e){const t=this.rules.inline.escape.exec(e);if(t)return{type:"escape",raw:t[0],text:o(t[1])}}tag(e,t,n){const r=this.rules.inline.tag.exec(e);if(r)return!t&&/^<a /i.test(r[0])?t=!0:t&&/^<\/a>/i.test(r[0])&&(t=!1),!n&&/^<(pre|code|kbd|script)(\s|>)/i.test(r[0])?n=!0:n&&/^<\/(pre|code|kbd|script)(\s|>)/i.test(r[0])&&(n=!1),{type:this.options.sanitize?"text":"html",raw:r[0],inLink:t,inRawBlock:n,text:this.options.sanitize?this.options.sanitizer?this.options.sanitizer(r[0]):o(r[0]):r[0]}}link(e){const t=this.rules.inline.link.exec(e);if(t){const e=u(t[2],"()");if(e>-1){const n=(0===t[0].indexOf("!")?5:4)+t[1].length+e;t[2]=t[2].substring(0,e),t[0]=t[0].substring(0,n).trim(),t[3]=""}let n=t[2],r="";if(this.options.pedantic){const e=/^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(n);e?(n=e[1],r=e[3]):r=""}else r=t[3]?t[3].slice(1,-1):"";return n=n.trim().replace(/^<([\s\S]*)>$/,"$1"),l(t,{href:n?n.replace(this.rules.inline._escapes,"$1"):n,title:r?r.replace(this.rules.inline._escapes,"$1"):r},t[0])}}reflink(e,t){let n;if((n=this.rules.inline.reflink.exec(e))||(n=this.rules.inline.nolink.exec(e))){let e=(n[2]||n[1]).replace(/\s+/g," ");if(e=t[e.toLowerCase()],!e||!e.href){const e=n[0].charAt(0);return{type:"text",raw:e,text:e}}return l(n,e,n[0])}}strong(e){const t=this.rules.inline.strong.exec(e);if(t)return{type:"strong",raw:t[0],text:t[4]||t[3]||t[2]||t[1]}}em(e){const t=this.rules.inline.em.exec(e);if(t)return{type:"em",raw:t[0],text:t[6]||t[5]||t[4]||t[3]||t[2]||t[1]}}codespan(e){const t=this.rules.inline.code.exec(e);if(t)return{type:"codespan",raw:t[0],text:o(t[2].trim(),!0)}}br(e){const t=this.rules.inline.br.exec(e);if(t)return{type:"br",raw:t[0]}}del(e){const t=this.rules.inline.del.exec(e);if(t)return{type:"del",raw:t[0],text:t[1]}}autolink(e,t){const n=this.rules.inline.autolink.exec(e);if(n){let e,r;return"@"===n[2]?(e=o(this.options.mangle?t(n[1]):n[1]),r="mailto:"+e):(e=o(n[1]),r=e),{type:"link",raw:n[0],text:e,href:r,tokens:[{type:"text",raw:e,text:e}]}}}url(e,t){let n;if(n=this.rules.inline.url.exec(e)){let e,r;if("@"===n[2])e=o(this.options.mangle?t(n[0]):n[0]),r="mailto:"+e;else{let t;do{t=n[0],n[0]=this.rules.inline._backpedal.exec(n[0])[0]}while(t!==n[0]);e=o(n[0]),r="www."===n[1]?"http://"+e:e}return{type:"link",raw:n[0],text:e,href:r,tokens:[{type:"text",raw:e,text:e}]}}}inlineText(e,t,n){const r=this.rules.inline.text.exec(e);if(r){let e;return e=t?this.options.sanitize?this.options.sanitizer?this.options.sanitizer(r[0]):o(r[0]):r[0]:o(this.options.smartypants?n(r[0]):r[0]),{type:"text",raw:r[0],text:e}}}}},function(e,t,n){const{defaults:r}=n(8),{cleanUrl:i,escape:a}=n(9);e.exports=class{constructor(e){this.options=e||r}code(e,t,n){const r=(t||"").match(/\S*/)[0];if(this.options.highlight){const t=this.options.highlight(e,r);null!=t&&t!==e&&(n=!0,e=t)}return r?'<pre><code class="'+this.options.langPrefix+a(r,!0)+'">'+(n?e:a(e,!0))+"</code></pre>\n":"<pre><code>"+(n?e:a(e,!0))+"</code></pre>"}blockquote(e){return"<blockquote>\n"+e+"</blockquote>\n"}html(e){return e}heading(e,t,n,r){return this.options.headerIds?"<h"+t+' id="'+this.options.headerPrefix+r.slug(n)+'">'+e+"</h"+t+">\n":"<h"+t+">"+e+"</h"+t+">\n"}hr(){return this.options.xhtml?"<hr/>\n":"<hr>\n"}list(e,t,n){const r=t?"ol":"ul";return"<"+r+(t&&1!==n?' start="'+n+'"':"")+">\n"+e+"</"+r+">\n"}listitem(e){return"<li>"+e+"</li>\n"}checkbox(e){return"<input "+(e?'checked="" ':"")+'disabled="" type="checkbox"'+(this.options.xhtml?" /":"")+"> "}paragraph(e){return"<p>"+e+"</p>\n"}table(e,t){return t&&(t="<tbody>"+t+"</tbody>"),"<table>\n<thead>\n"+e+"</thead>\n"+t+"</table>\n"}tablerow(e){return"<tr>\n"+e+"</tr>\n"}tablecell(e,t){const n=t.header?"th":"td";return(t.align?"<"+n+' align="'+t.align+'">':"<"+n+">")+e+"</"+n+">\n"}strong(e){return"<strong>"+e+"</strong>"}em(e){return"<em>"+e+"</em>"}codespan(e){return"<code>"+e+"</code>"}br(){return this.options.xhtml?"<br/>":"<br>"}del(e){return"<del>"+e+"</del>"}link(e,t,n){if(null===(e=i(this.options.sanitize,this.options.baseUrl,e)))return n;let r='<a href="'+a(e)+'"';return t&&(r+=' title="'+t+'"'),r+=">"+n+"</a>",r}image(e,t,n){if(null===(e=i(this.options.sanitize,this.options.baseUrl,e)))return n;let r='<img src="'+e+'" alt="'+n+'"';return t&&(r+=' title="'+t+'"'),r+=this.options.xhtml?"/>":">",r}text(e){return e}}},function(e,t){e.exports=class{strong(e){return e}em(e){return e}codespan(e){return e}del(e){return e}html(e){return e}text(e){return e}link(e,t,n){return""+n}image(e,t,n){return""+n}br(){return""}}},function(e,t){e.exports=class{constructor(){this.seen={}}slug(e){let t=e.toLowerCase().trim().replace(/<[!\/a-z].*?>/gi,"").replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g,"").replace(/\s/g,"-");if(this.seen.hasOwnProperty(t)){const e=t;do{this.seen[e]++,t=e+"-"+this.seen[e]}while(this.seen.hasOwnProperty(t))}return this.seen[t]=0,t}}},function(e,t,n){"use strict";e.exports=function(e,t){return t||(t={}),"string"!=typeof(e=e&&e.__esModule?e.default:e)?e:(t.hash&&(e+=t.hash),t.maybeNeedQuotes&&/[\t\n\f\r "'=<>`]/.test(e)?'"'.concat(e,'"'):e)}},function(e,t,n){"use strict";n.r(t),n.d(t,"Provider",(function(){return s})),n.d(t,"connectAdvanced",(function(){return x})),n.d(t,"ReactReduxContext",(function(){return a})),n.d(t,"connect",(function(){return q})),n.d(t,"batch",(function(){return X.unstable_batchedUpdates})),n.d(t,"useDispatch",(function(){return H})),n.d(t,"createDispatchHook",(function(){return V})),n.d(t,"useSelector",(function(){return Y})),n.d(t,"createSelectorHook",(function(){return Q})),n.d(t,"useStore",(function(){return W})),n.d(t,"createStoreHook",(function(){return $})),n.d(t,"shallowEqual",(function(){return E}));var r=n(0),i=n.n(r),a=(n(55),i.a.createContext(null));var o=function(e){e()},u={notify:function(){}};function l(){var e=o,t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,i=n={callback:e,next:null,prev:n};return i.prev?i.prev.next=i:t=i,function(){r&&null!==t&&(r=!1,i.next?i.next.prev=i.prev:n=i.prev,i.prev?i.prev.next=i.next:t=i.next)}}}}var c=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=u,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=l())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=u)},e}();var s=function(e){var t=e.store,n=e.context,o=e.children,u=Object(r.useMemo)((function(){var e=new c(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),l=Object(r.useMemo)((function(){return t.getState()}),[t]);Object(r.useEffect)((function(){var e=u.subscription;return e.trySubscribe(),l!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[u,l]);var s=n||a;return i.a.createElement(s.Provider,{value:u},o)};function f(){return(f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function d(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}var p=n(20),g=n.n(p),h=n(19),m="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect,v=[],y=[null,null];function b(e,t){var n=e[1];return[t.payload,n+1]}function _(e,t,n){m((function(){return e.apply(void 0,t)}),n)}function k(e,t,n,r,i,a,o){e.current=r,t.current=i,n.current=!1,a.current&&(a.current=null,o())}function w(e,t,n,r,i,a,o,u,l,c){if(e){var s=!1,f=null,d=function(){if(!s){var e,n,d=t.getState();try{e=r(d,i.current)}catch(e){n=e,f=e}n||(f=null),e===a.current?o.current||l():(a.current=e,u.current=e,o.current=!0,c({type:"STORE_UPDATED",payload:{error:n}}))}};n.onStateChange=d,n.trySubscribe(),d();return function(){if(s=!0,n.tryUnsubscribe(),n.onStateChange=null,f)throw f}}}var S=function(){return[null,0]};function x(e,t){void 0===t&&(t={});var n=t,o=n.getDisplayName,u=void 0===o?function(e){return"ConnectAdvanced("+e+")"}:o,l=n.methodName,s=void 0===l?"connectAdvanced":l,p=n.renderCountProp,m=void 0===p?void 0:p,x=n.shouldHandleStateChanges,C=void 0===x||x,E=n.storeKey,T=void 0===E?"store":E,A=(n.withRef,n.forwardRef),P=void 0!==A&&A,O=n.context,F=void 0===O?a:O,R=d(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]),L=F;return function(t){var n=t.displayName||t.name||"Component",a=u(n),o=f({},R,{getDisplayName:u,methodName:s,renderCountProp:m,shouldHandleStateChanges:C,storeKey:T,displayName:a,wrappedComponentName:n,WrappedComponent:t}),l=R.pure;var p=l?r.useMemo:function(e){return e()};function x(n){var a=Object(r.useMemo)((function(){var e=n.forwardedRef,t=d(n,["forwardedRef"]);return[n.context,e,t]}),[n]),u=a[0],l=a[1],s=a[2],g=Object(r.useMemo)((function(){return u&&u.Consumer&&Object(h.isContextConsumer)(i.a.createElement(u.Consumer,null))?u:L}),[u,L]),m=Object(r.useContext)(g),x=Boolean(n.store)&&Boolean(n.store.getState)&&Boolean(n.store.dispatch);Boolean(m)&&Boolean(m.store);var E=x?n.store:m.store,T=Object(r.useMemo)((function(){return function(t){return e(t.dispatch,o)}(E)}),[E]),A=Object(r.useMemo)((function(){if(!C)return y;var e=new c(E,x?null:m.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[E,x,m]),P=A[0],O=A[1],F=Object(r.useMemo)((function(){return x?m:f({},m,{subscription:P})}),[x,m,P]),R=Object(r.useReducer)(b,v,S),z=R[0][0],N=R[1];if(z&&z.error)throw z.error;var D=Object(r.useRef)(),j=Object(r.useRef)(s),I=Object(r.useRef)(),B=Object(r.useRef)(!1),M=p((function(){return I.current&&s===j.current?I.current:T(E.getState(),s)}),[E,z,s]);_(k,[j,D,B,s,M,I,O]),_(w,[C,E,P,T,j,D,B,I,O,N],[E,P,T]);var q=Object(r.useMemo)((function(){return i.a.createElement(t,f({},M,{ref:l}))}),[l,t,M]);return Object(r.useMemo)((function(){return C?i.a.createElement(g.Provider,{value:F},q):q}),[g,q,F])}var E=l?i.a.memo(x):x;if(E.WrappedComponent=t,E.displayName=a,P){var A=i.a.forwardRef((function(e,t){return i.a.createElement(E,f({},e,{forwardedRef:t}))}));return A.displayName=a,A.WrappedComponent=t,g()(A,t)}return g()(E,t)}}function C(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function E(e,t){if(C(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var i=0;i<n.length;i++)if(!Object.prototype.hasOwnProperty.call(t,n[i])||!C(e[n[i]],t[n[i]]))return!1;return!0}var T=n(12);function A(e){return function(t,n){var r=e(t,n);function i(){return r}return i.dependsOnOwnProps=!1,i}}function P(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function O(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=P(e);var i=r(t,n);return"function"==typeof i&&(r.mapToProps=i,r.dependsOnOwnProps=P(i),i=r(t,n)),i},r}}var F=[function(e){return"function"==typeof e?O(e):void 0},function(e){return e?void 0:A((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?A((function(t){return Object(T.bindActionCreators)(e,t)})):void 0}];var R=[function(e){return"function"==typeof e?O(e):void 0},function(e){return e?void 0:A((function(){return{}}))}];function L(e,t,n){return f({},n,{},e,{},t)}var z=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,i=n.pure,a=n.areMergedPropsEqual,o=!1;return function(t,n,u){var l=e(t,n,u);return o?i&&a(l,r)||(r=l):(o=!0,r=l),r}}}(e):void 0},function(e){return e?void 0:function(){return L}}];function N(e,t,n,r){return function(i,a){return n(e(i,a),t(r,a),a)}}function D(e,t,n,r,i){var a,o,u,l,c,s=i.areStatesEqual,f=i.areOwnPropsEqual,d=i.areStatePropsEqual,p=!1;function g(i,p){var g,h,m=!f(p,o),v=!s(i,a);return a=i,o=p,m&&v?(u=e(a,o),t.dependsOnOwnProps&&(l=t(r,o)),c=n(u,l,o)):m?(e.dependsOnOwnProps&&(u=e(a,o)),t.dependsOnOwnProps&&(l=t(r,o)),c=n(u,l,o)):v?(g=e(a,o),h=!d(g,u),u=g,h&&(c=n(u,l,o)),c):c}return function(i,s){return p?g(i,s):(u=e(a=i,o=s),l=t(r,o),c=n(u,l,o),p=!0,c)}}function j(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,i=t.initMergeProps,a=d(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),o=n(e,a),u=r(e,a),l=i(e,a);return(a.pure?D:N)(o,u,l,e,a)}function I(e,t,n){for(var r=t.length-1;r>=0;r--){var i=t[r](e);if(i)return i}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function B(e,t){return e===t}function M(e){var t=void 0===e?{}:e,n=t.connectHOC,r=void 0===n?x:n,i=t.mapStateToPropsFactories,a=void 0===i?R:i,o=t.mapDispatchToPropsFactories,u=void 0===o?F:o,l=t.mergePropsFactories,c=void 0===l?z:l,s=t.selectorFactory,p=void 0===s?j:s;return function(e,t,n,i){void 0===i&&(i={});var o=i,l=o.pure,s=void 0===l||l,g=o.areStatesEqual,h=void 0===g?B:g,m=o.areOwnPropsEqual,v=void 0===m?E:m,y=o.areStatePropsEqual,b=void 0===y?E:y,_=o.areMergedPropsEqual,k=void 0===_?E:_,w=d(o,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),S=I(e,a,"mapStateToProps"),x=I(t,u,"mapDispatchToProps"),C=I(n,c,"mergeProps");return r(p,f({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:S,initMapDispatchToProps:x,initMergeProps:C,pure:s,areStatesEqual:h,areOwnPropsEqual:v,areStatePropsEqual:b,areMergedPropsEqual:k},w))}}var q=M();function U(){return Object(r.useContext)(a)}function $(e){void 0===e&&(e=a);var t=e===a?U:function(){return Object(r.useContext)(e)};return function(){return t().store}}var W=$();function V(e){void 0===e&&(e=a);var t=e===a?W:$(e);return function(){return t().dispatch}}var H=V(),G=function(e,t){return e===t};function Q(e){void 0===e&&(e=a);var t=e===a?U:function(){return Object(r.useContext)(e)};return function(e,n){void 0===n&&(n=G);var i=t();return function(e,t,n,i){var a,o=Object(r.useReducer)((function(e){return e+1}),0)[1],u=Object(r.useMemo)((function(){return new c(n,i)}),[n,i]),l=Object(r.useRef)(),s=Object(r.useRef)(),f=Object(r.useRef)();try{a=e!==s.current||l.current?e(n.getState()):f.current}catch(e){throw l.current&&(e.message+="\nThe error may be correlated with this previous error:\n"+l.current.stack+"\n\n"),e}return m((function(){s.current=e,f.current=a,l.current=void 0})),m((function(){function e(){try{var e=s.current(n.getState());if(t(e,f.current))return;f.current=e}catch(e){l.current=e}o({})}return u.onStateChange=e,u.trySubscribe(),e(),function(){return u.tryUnsubscribe()}}),[n,u]),a}(e,n,i.store,i.subscription)}}var K,Y=Q(),X=n(13);K=X.unstable_batchedUpdates,o=K},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";var r=n(0),i=n(47),a=n(14),o=n(51);i.renderToElementWithId(r.createElement(o.make,{}),"__reason"),a.push("")},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(22),i="function"==typeof Symbol&&Symbol.for,a=i?Symbol.for("react.element"):60103,o=i?Symbol.for("react.portal"):60106,u=i?Symbol.for("react.fragment"):60107,l=i?Symbol.for("react.strict_mode"):60108,c=i?Symbol.for("react.profiler"):60114,s=i?Symbol.for("react.provider"):60109,f=i?Symbol.for("react.context"):60110,d=i?Symbol.for("react.forward_ref"):60112,p=i?Symbol.for("react.suspense"):60113,g=i?Symbol.for("react.memo"):60115,h=i?Symbol.for("react.lazy"):60116,m="function"==typeof Symbol&&Symbol.iterator;function v(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var y={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b={};function _(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||y}function k(){}function w(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||y}_.prototype.isReactComponent={},_.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(v(85));this.updater.enqueueSetState(this,e,t,"setState")},_.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},k.prototype=_.prototype;var S=w.prototype=new k;S.constructor=w,r(S,_.prototype),S.isPureReactComponent=!0;var x={current:null},C=Object.prototype.hasOwnProperty,E={key:!0,ref:!0,__self:!0,__source:!0};function T(e,t,n){var r,i={},o=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(o=""+t.key),t)C.call(t,r)&&!E.hasOwnProperty(r)&&(i[r]=t[r]);var l=arguments.length-2;if(1===l)i.children=n;else if(1<l){for(var c=Array(l),s=0;s<l;s++)c[s]=arguments[s+2];i.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===i[r]&&(i[r]=l[r]);return{$$typeof:a,type:e,key:o,ref:u,props:i,_owner:x.current}}function A(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var P=/\/+/g,O=[];function F(e,t,n,r){if(O.length){var i=O.pop();return i.result=e,i.keyPrefix=t,i.func=n,i.context=r,i.count=0,i}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function R(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>O.length&&O.push(e)}function L(e,t,n){return null==e?0:function e(t,n,r,i){var u=typeof t;"undefined"!==u&&"boolean"!==u||(t=null);var l=!1;if(null===t)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case a:case o:l=!0}}if(l)return r(i,t,""===n?"."+z(t,0):n),1;if(l=0,n=""===n?".":n+":",Array.isArray(t))for(var c=0;c<t.length;c++){var s=n+z(u=t[c],c);l+=e(u,s,r,i)}else if(null===t||"object"!=typeof t?s=null:s="function"==typeof(s=m&&t[m]||t["@@iterator"])?s:null,"function"==typeof s)for(t=s.call(t),c=0;!(u=t.next()).done;)l+=e(u=u.value,s=n+z(u,c++),r,i);else if("object"===u)throw r=""+t,Error(v(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return l}(e,"",t,n)}function z(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function N(e,t){e.func.call(e.context,t,e.count++)}function D(e,t,n){var r=e.result,i=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?j(e,r,n,(function(e){return e})):null!=e&&(A(e)&&(e=function(e,t){return{$$typeof:a,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,i+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(P,"$&/")+"/")+n)),r.push(e))}function j(e,t,n,r,i){var a="";null!=n&&(a=(""+n).replace(P,"$&/")+"/"),L(e,D,t=F(t,a,r,i)),R(t)}var I={current:null};function B(){var e=I.current;if(null===e)throw Error(v(321));return e}var M={ReactCurrentDispatcher:I,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:x,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return j(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;L(e,N,t=F(null,null,t,n)),R(t)},count:function(e){return L(e,(function(){return null}),null)},toArray:function(e){var t=[];return j(e,t,null,(function(e){return e})),t},only:function(e){if(!A(e))throw Error(v(143));return e}},t.Component=_,t.Fragment=u,t.Profiler=c,t.PureComponent=w,t.StrictMode=l,t.Suspense=p,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=M,t.cloneElement=function(e,t,n){if(null==e)throw Error(v(267,e));var i=r({},e.props),o=e.key,u=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(u=t.ref,l=x.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(s in t)C.call(t,s)&&!E.hasOwnProperty(s)&&(i[s]=void 0===t[s]&&void 0!==c?c[s]:t[s])}var s=arguments.length-2;if(1===s)i.children=n;else if(1<s){c=Array(s);for(var f=0;f<s;f++)c[f]=arguments[f+2];i.children=c}return{$$typeof:a,type:e.type,key:o,ref:u,props:i,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=T,t.createFactory=function(e){var t=T.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:d,render:e}},t.isValidElement=A,t.lazy=function(e){return{$$typeof:h,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:g,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return B().useCallback(e,t)},t.useContext=function(e,t){return B().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return B().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return B().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return B().useLayoutEffect(e,t)},t.useMemo=function(e,t){return B().useMemo(e,t)},t.useReducer=function(e,t,n){return B().useReducer(e,t,n)},t.useRef=function(e){return B().useRef(e)},t.useState=function(e){return B().useState(e)},t.version="16.13.1"},function(e,t,n){"use strict";var r=n(0),i=n(13),a=n(1);function o(e,t){return Object.assign(Object.assign({},e),t)}var u={combine:o,unsafeAddProp:function(e,t,n){var r={};return r[t]=n,o(e,r)}};t.renderToElementWithClassName=function(e,t){var n=document.getElementsByClassName(t);if(0!==n.length)return i.render(e,n[0]),0;throw[a.invalid_argument,"ReactDOMRe.renderToElementWithClassName: no element of class "+t+" found in the HTML."]},t.renderToElementWithId=function(e,t){var n=document.getElementById(t);if(null==n)throw[a.invalid_argument,"ReactDOMRe.renderToElementWithId : no element of id "+t+" found in the HTML."];return i.render(e,n),0},t.hydrateToElementWithClassName=function(e,t){var n=document.getElementsByClassName(t);if(0!==n.length)return i.hydrate(e,n[0]),0;throw[a.invalid_argument,"ReactDOMRe.hydrateToElementWithClassName: no element of class "+t+" found in the HTML."]},t.hydrateToElementWithId=function(e,t){var n=document.getElementById(t);if(null==n)throw[a.invalid_argument,"ReactDOMRe.hydrateToElementWithId : no element of id "+t+" found in the HTML."];return i.hydrate(e,n),0},t.Ref={},t.createElementVariadic=function(e,t,n){var i=[e,t].concat(n);return r.createElement.apply(null,i)},t.Style=u},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),i=n(22),a=n(49);function o(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(o(227));function u(e,t,n,r,i,a,o,u,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var l=!1,c=null,s=!1,f=null,d={onError:function(e){l=!0,c=e}};function p(e,t,n,r,i,a,o,s,f){l=!1,c=null,u.apply(d,arguments)}var g=null,h=null,m=null;function v(e,t,n){var r=e.type||"unknown-event";e.currentTarget=m(n),function(e,t,n,r,i,a,u,d,g){if(p.apply(this,arguments),l){if(!l)throw Error(o(198));var h=c;l=!1,c=null,s||(s=!0,f=h)}}(r,t,void 0,e),e.currentTarget=null}var y=null,b={};function _(){if(y)for(var e in b){var t=b[e],n=y.indexOf(e);if(!(-1<n))throw Error(o(96,e));if(!w[n]){if(!t.extractEvents)throw Error(o(97,e));for(var r in w[n]=t,n=t.eventTypes){var i=void 0,a=n[r],u=t,l=r;if(S.hasOwnProperty(l))throw Error(o(99,l));S[l]=a;var c=a.phasedRegistrationNames;if(c){for(i in c)c.hasOwnProperty(i)&&k(c[i],u,l);i=!0}else a.registrationName?(k(a.registrationName,u,l),i=!0):i=!1;if(!i)throw Error(o(98,r,e))}}}}function k(e,t,n){if(x[e])throw Error(o(100,e));x[e]=t,C[e]=t.eventTypes[n].dependencies}var w=[],S={},x={},C={};function E(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!b.hasOwnProperty(t)||b[t]!==r){if(b[t])throw Error(o(102,t));b[t]=r,n=!0}}n&&_()}var T=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),A=null,P=null,O=null;function F(e){if(e=h(e)){if("function"!=typeof A)throw Error(o(280));var t=e.stateNode;t&&(t=g(t),A(e.stateNode,e.type,t))}}function R(e){P?O?O.push(e):O=[e]:P=e}function L(){if(P){var e=P,t=O;if(O=P=null,F(e),t)for(e=0;e<t.length;e++)F(t[e])}}function z(e,t){return e(t)}function N(e,t,n,r,i){return e(t,n,r,i)}function D(){}var j=z,I=!1,B=!1;function M(){null===P&&null===O||(D(),L())}function q(e,t,n){if(B)return e(t,n);B=!0;try{return j(e,t,n)}finally{B=!1,M()}}var U=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,$=Object.prototype.hasOwnProperty,W={},V={};function H(e,t,n,r,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a}var G={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){G[e]=new H(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];G[t]=new H(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){G[e]=new H(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){G[e]=new H(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){G[e]=new H(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){G[e]=new H(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){G[e]=new H(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){G[e]=new H(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){G[e]=new H(e,5,!1,e.toLowerCase(),null,!1)}));var Q=/[\-:]([a-z])/g;function K(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(Q,K);G[t]=new H(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(Q,K);G[t]=new H(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(Q,K);G[t]=new H(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){G[e]=new H(e,1,!1,e.toLowerCase(),null,!1)})),G.xlinkHref=new H("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){G[e]=new H(e,1,!1,e.toLowerCase(),null,!0)}));var Y=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function X(e,t,n,r){var i=G.hasOwnProperty(t)?G[t]:null;(null!==i?0===i.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!$.call(V,e)||!$.call(W,e)&&(U.test(e)?V[e]=!0:(W[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}Y.hasOwnProperty("ReactCurrentDispatcher")||(Y.ReactCurrentDispatcher={current:null}),Y.hasOwnProperty("ReactCurrentBatchConfig")||(Y.ReactCurrentBatchConfig={suspense:null});var Z=/^(.*)[\\\/]/,J="function"==typeof Symbol&&Symbol.for,ee=J?Symbol.for("react.element"):60103,te=J?Symbol.for("react.portal"):60106,ne=J?Symbol.for("react.fragment"):60107,re=J?Symbol.for("react.strict_mode"):60108,ie=J?Symbol.for("react.profiler"):60114,ae=J?Symbol.for("react.provider"):60109,oe=J?Symbol.for("react.context"):60110,ue=J?Symbol.for("react.concurrent_mode"):60111,le=J?Symbol.for("react.forward_ref"):60112,ce=J?Symbol.for("react.suspense"):60113,se=J?Symbol.for("react.suspense_list"):60120,fe=J?Symbol.for("react.memo"):60115,de=J?Symbol.for("react.lazy"):60116,pe=J?Symbol.for("react.block"):60121,ge="function"==typeof Symbol&&Symbol.iterator;function he(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=ge&&e[ge]||e["@@iterator"])?e:null}function me(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case ne:return"Fragment";case te:return"Portal";case ie:return"Profiler";case re:return"StrictMode";case ce:return"Suspense";case se:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case oe:return"Context.Consumer";case ae:return"Context.Provider";case le:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case fe:return me(e.type);case pe:return me(e.render);case de:if(e=1===e._status?e._result:null)return me(e)}return null}function ve(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,i=e._debugSource,a=me(e.type);n=null,r&&(n=me(r.type)),r=a,a="",i?a=" (at "+i.fileName.replace(Z,"")+":"+i.lineNumber+")":n&&(a=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+a}t+=n,e=e.return}while(e);return t}function ye(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function be(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function _e(e){e._valueTracker||(e._valueTracker=function(e){var t=be(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function ke(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=be(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function we(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Se(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=ye(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function xe(e,t){null!=(t=t.checked)&&X(e,"checked",t,!1)}function Ce(e,t){xe(e,t);var n=ye(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Te(e,t.type,n):t.hasOwnProperty("defaultValue")&&Te(e,t.type,ye(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Ee(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Te(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Ae(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Pe(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ye(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function Oe(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(o(91));return i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Fe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(o(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(o(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:ye(n)}}function Re(e,t){var n=ye(t.value),r=ye(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Le(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var ze="http://www.w3.org/1999/xhtml",Ne="http://www.w3.org/2000/svg";function De(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function je(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?De(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Ie,Be=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,i){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==Ne||"innerHTML"in e)e.innerHTML=t;else{for((Ie=Ie||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=Ie.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function Me(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function qe(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Ue={animationend:qe("Animation","AnimationEnd"),animationiteration:qe("Animation","AnimationIteration"),animationstart:qe("Animation","AnimationStart"),transitionend:qe("Transition","TransitionEnd")},$e={},We={};function Ve(e){if($e[e])return $e[e];if(!Ue[e])return e;var t,n=Ue[e];for(t in n)if(n.hasOwnProperty(t)&&t in We)return $e[e]=n[t];return e}T&&(We=document.createElement("div").style,"AnimationEvent"in window||(delete Ue.animationend.animation,delete Ue.animationiteration.animation,delete Ue.animationstart.animation),"TransitionEvent"in window||delete Ue.transitionend.transition);var He=Ve("animationend"),Ge=Ve("animationiteration"),Qe=Ve("animationstart"),Ke=Ve("transitionend"),Ye="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Xe=new("function"==typeof WeakMap?WeakMap:Map);function Ze(e){var t=Xe.get(e);return void 0===t&&(t=new Map,Xe.set(e,t)),t}function Je(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function et(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function tt(e){if(Je(e)!==e)throw Error(o(188))}function nt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Je(e)))throw Error(o(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var a=i.alternate;if(null===a){if(null!==(r=i.return)){n=r;continue}break}if(i.child===a.child){for(a=i.child;a;){if(a===n)return tt(i),e;if(a===r)return tt(i),t;a=a.sibling}throw Error(o(188))}if(n.return!==r.return)n=i,r=a;else{for(var u=!1,l=i.child;l;){if(l===n){u=!0,n=i,r=a;break}if(l===r){u=!0,r=i,n=a;break}l=l.sibling}if(!u){for(l=a.child;l;){if(l===n){u=!0,n=a,r=i;break}if(l===r){u=!0,r=a,n=i;break}l=l.sibling}if(!u)throw Error(o(189))}}if(n.alternate!==r)throw Error(o(190))}if(3!==n.tag)throw Error(o(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function rt(e,t){if(null==t)throw Error(o(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function it(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var at=null;function ot(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)v(e,t[r],n[r]);else t&&v(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function ut(e){if(null!==e&&(at=rt(at,e)),e=at,at=null,e){if(it(e,ot),at)throw Error(o(95));if(s)throw e=f,s=!1,f=null,e}}function lt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function ct(e){if(!T)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var st=[];function ft(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>st.length&&st.push(e)}function dt(e,t,n,r){if(st.length){var i=st.pop();return i.topLevelType=e,i.eventSystemFlags=r,i.nativeEvent=t,i.targetInst=n,i}return{topLevelType:e,eventSystemFlags:r,nativeEvent:t,targetInst:n,ancestors:[]}}function pt(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=Tn(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var i=lt(e.nativeEvent);r=e.topLevelType;var a=e.nativeEvent,o=e.eventSystemFlags;0===n&&(o|=64);for(var u=null,l=0;l<w.length;l++){var c=w[l];c&&(c=c.extractEvents(r,t,a,i,o))&&(u=rt(u,c))}ut(u)}}function gt(e,t,n){if(!n.has(e)){switch(e){case"scroll":Qt(t,"scroll",!0);break;case"focus":case"blur":Qt(t,"focus",!0),Qt(t,"blur",!0),n.set("blur",null),n.set("focus",null);break;case"cancel":case"close":ct(e)&&Qt(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Ye.indexOf(e)&&Gt(e,t)}n.set(e,null)}}var ht,mt,vt,yt=!1,bt=[],_t=null,kt=null,wt=null,St=new Map,xt=new Map,Ct=[],Et="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Tt="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function At(e,t,n,r,i){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:i,container:r}}function Pt(e,t){switch(e){case"focus":case"blur":_t=null;break;case"dragenter":case"dragleave":kt=null;break;case"mouseover":case"mouseout":wt=null;break;case"pointerover":case"pointerout":St.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":xt.delete(t.pointerId)}}function Ot(e,t,n,r,i,a){return null===e||e.nativeEvent!==a?(e=At(t,n,r,i,a),null!==t&&(null!==(t=An(t))&&mt(t)),e):(e.eventSystemFlags|=r,e)}function Ft(e){var t=Tn(e.target);if(null!==t){var n=Je(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=et(n)))return e.blockedOn=t,void a.unstable_runWithPriority(e.priority,(function(){vt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Rt(e){if(null!==e.blockedOn)return!1;var t=Zt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var n=An(t);return null!==n&&mt(n),e.blockedOn=t,!1}return!0}function Lt(e,t,n){Rt(e)&&n.delete(t)}function zt(){for(yt=!1;0<bt.length;){var e=bt[0];if(null!==e.blockedOn){null!==(e=An(e.blockedOn))&&ht(e);break}var t=Zt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:bt.shift()}null!==_t&&Rt(_t)&&(_t=null),null!==kt&&Rt(kt)&&(kt=null),null!==wt&&Rt(wt)&&(wt=null),St.forEach(Lt),xt.forEach(Lt)}function Nt(e,t){e.blockedOn===t&&(e.blockedOn=null,yt||(yt=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,zt)))}function Dt(e){function t(t){return Nt(t,e)}if(0<bt.length){Nt(bt[0],e);for(var n=1;n<bt.length;n++){var r=bt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==_t&&Nt(_t,e),null!==kt&&Nt(kt,e),null!==wt&&Nt(wt,e),St.forEach(t),xt.forEach(t),n=0;n<Ct.length;n++)(r=Ct[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Ct.length&&null===(n=Ct[0]).blockedOn;)Ft(n),null===n.blockedOn&&Ct.shift()}var jt={},It=new Map,Bt=new Map,Mt=["abort","abort",He,"animationEnd",Ge,"animationIteration",Qe,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ke,"transitionEnd","waiting","waiting"];function qt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],i=e[n+1],a="on"+(i[0].toUpperCase()+i.slice(1));a={phasedRegistrationNames:{bubbled:a,captured:a+"Capture"},dependencies:[r],eventPriority:t},Bt.set(r,t),It.set(r,a),jt[i]=a}}qt("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),qt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),qt(Mt,2);for(var Ut="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),$t=0;$t<Ut.length;$t++)Bt.set(Ut[$t],0);var Wt=a.unstable_UserBlockingPriority,Vt=a.unstable_runWithPriority,Ht=!0;function Gt(e,t){Qt(t,e,!1)}function Qt(e,t,n){var r=Bt.get(t);switch(void 0===r?2:r){case 0:r=Kt.bind(null,t,1,e);break;case 1:r=Yt.bind(null,t,1,e);break;default:r=Xt.bind(null,t,1,e)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Kt(e,t,n,r){I||D();var i=Xt,a=I;I=!0;try{N(i,e,t,n,r)}finally{(I=a)||M()}}function Yt(e,t,n,r){Vt(Wt,Xt.bind(null,e,t,n,r))}function Xt(e,t,n,r){if(Ht)if(0<bt.length&&-1<Et.indexOf(e))e=At(null,e,t,n,r),bt.push(e);else{var i=Zt(e,t,n,r);if(null===i)Pt(e,r);else if(-1<Et.indexOf(e))e=At(i,e,t,n,r),bt.push(e);else if(!function(e,t,n,r,i){switch(t){case"focus":return _t=Ot(_t,e,t,n,r,i),!0;case"dragenter":return kt=Ot(kt,e,t,n,r,i),!0;case"mouseover":return wt=Ot(wt,e,t,n,r,i),!0;case"pointerover":var a=i.pointerId;return St.set(a,Ot(St.get(a)||null,e,t,n,r,i)),!0;case"gotpointercapture":return a=i.pointerId,xt.set(a,Ot(xt.get(a)||null,e,t,n,r,i)),!0}return!1}(i,e,t,n,r)){Pt(e,r),e=dt(e,r,null,t);try{q(pt,e)}finally{ft(e)}}}}function Zt(e,t,n,r){if(null!==(n=Tn(n=lt(r)))){var i=Je(n);if(null===i)n=null;else{var a=i.tag;if(13===a){if(null!==(n=et(i)))return n;n=null}else if(3===a){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;n=null}else i!==n&&(n=null)}}e=dt(e,r,n,t);try{q(pt,e)}finally{ft(e)}return null}var Jt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},en=["Webkit","ms","Moz","O"];function tn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Jt.hasOwnProperty(e)&&Jt[e]?(""+t).trim():t+"px"}function nn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=tn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(Jt).forEach((function(e){en.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Jt[t]=Jt[e]}))}));var rn=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function an(e,t){if(t){if(rn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(o(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(o(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(o(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(o(62,""))}}function on(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var un=ze;function ln(e,t){var n=Ze(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=C[t];for(var r=0;r<t.length;r++)gt(t[r],e,n)}function cn(){}function sn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function fn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function dn(e,t){var n,r=fn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=fn(r)}}function pn(){for(var e=window,t=sn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=sn((e=t.contentWindow).document)}return t}function gn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var hn=null,mn=null;function vn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function yn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var bn="function"==typeof setTimeout?setTimeout:void 0,_n="function"==typeof clearTimeout?clearTimeout:void 0;function kn(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function wn(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Sn=Math.random().toString(36).slice(2),xn="__reactInternalInstance$"+Sn,Cn="__reactEventHandlers$"+Sn,En="__reactContainere$"+Sn;function Tn(e){var t=e[xn];if(t)return t;for(var n=e.parentNode;n;){if(t=n[En]||n[xn]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=wn(e);null!==e;){if(n=e[xn])return n;e=wn(e)}return t}n=(e=n).parentNode}return null}function An(e){return!(e=e[xn]||e[En])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Pn(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(o(33))}function On(e){return e[Cn]||null}function Fn(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Rn(e,t){var n=e.stateNode;if(!n)return null;var r=g(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(o(231,t,typeof n));return n}function Ln(e,t,n){(t=Rn(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function zn(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=Fn(t);for(t=n.length;0<t--;)Ln(n[t],"captured",e);for(t=0;t<n.length;t++)Ln(n[t],"bubbled",e)}}function Nn(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=Rn(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function Dn(e){e&&e.dispatchConfig.registrationName&&Nn(e._targetInst,null,e)}function jn(e){it(e,zn)}var In=null,Bn=null,Mn=null;function qn(){if(Mn)return Mn;var e,t,n=Bn,r=n.length,i="value"in In?In.value:In.textContent,a=i.length;for(e=0;e<r&&n[e]===i[e];e++);var o=r-e;for(t=1;t<=o&&n[r-t]===i[a-t];t++);return Mn=i.slice(e,1<t?1-t:void 0)}function Un(){return!0}function $n(){return!1}function Wn(e,t,n,r){for(var i in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(i)&&((t=e[i])?this[i]=t(n):"target"===i?this.target=r:this[i]=n[i]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Un:$n,this.isPropagationStopped=$n,this}function Vn(e,t,n,r){if(this.eventPool.length){var i=this.eventPool.pop();return this.call(i,e,t,n,r),i}return new this(e,t,n,r)}function Hn(e){if(!(e instanceof this))throw Error(o(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Gn(e){e.eventPool=[],e.getPooled=Vn,e.release=Hn}i(Wn.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Un)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Un)},persist:function(){this.isPersistent=Un},isPersistent:$n,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=$n,this._dispatchInstances=this._dispatchListeners=null}}),Wn.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Wn.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var a=new t;return i(a,n.prototype),n.prototype=a,n.prototype.constructor=n,n.Interface=i({},r.Interface,e),n.extend=r.extend,Gn(n),n},Gn(Wn);var Qn=Wn.extend({data:null}),Kn=Wn.extend({data:null}),Yn=[9,13,27,32],Xn=T&&"CompositionEvent"in window,Zn=null;T&&"documentMode"in document&&(Zn=document.documentMode);var Jn=T&&"TextEvent"in window&&!Zn,er=T&&(!Xn||Zn&&8<Zn&&11>=Zn),tr=String.fromCharCode(32),nr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},rr=!1;function ir(e,t){switch(e){case"keyup":return-1!==Yn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function ar(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var or=!1;var ur={eventTypes:nr,extractEvents:function(e,t,n,r){var i;if(Xn)e:{switch(e){case"compositionstart":var a=nr.compositionStart;break e;case"compositionend":a=nr.compositionEnd;break e;case"compositionupdate":a=nr.compositionUpdate;break e}a=void 0}else or?ir(e,n)&&(a=nr.compositionEnd):"keydown"===e&&229===n.keyCode&&(a=nr.compositionStart);return a?(er&&"ko"!==n.locale&&(or||a!==nr.compositionStart?a===nr.compositionEnd&&or&&(i=qn()):(Bn="value"in(In=r)?In.value:In.textContent,or=!0)),a=Qn.getPooled(a,t,n,r),i?a.data=i:null!==(i=ar(n))&&(a.data=i),jn(a),i=a):i=null,(e=Jn?function(e,t){switch(e){case"compositionend":return ar(t);case"keypress":return 32!==t.which?null:(rr=!0,tr);case"textInput":return(e=t.data)===tr&&rr?null:e;default:return null}}(e,n):function(e,t){if(or)return"compositionend"===e||!Xn&&ir(e,t)?(e=qn(),Mn=Bn=In=null,or=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return er&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=Kn.getPooled(nr.beforeInput,t,n,r)).data=e,jn(t)):t=null,null===i?t:null===t?i:[i,t]}},lr={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function cr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!lr[e.type]:"textarea"===t}var sr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function fr(e,t,n){return(e=Wn.getPooled(sr.change,e,t,n)).type="change",R(n),jn(e),e}var dr=null,pr=null;function gr(e){ut(e)}function hr(e){if(ke(Pn(e)))return e}function mr(e,t){if("change"===e)return t}var vr=!1;function yr(){dr&&(dr.detachEvent("onpropertychange",br),pr=dr=null)}function br(e){if("value"===e.propertyName&&hr(pr))if(e=fr(pr,e,lt(e)),I)ut(e);else{I=!0;try{z(gr,e)}finally{I=!1,M()}}}function _r(e,t,n){"focus"===e?(yr(),pr=n,(dr=t).attachEvent("onpropertychange",br)):"blur"===e&&yr()}function kr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return hr(pr)}function wr(e,t){if("click"===e)return hr(t)}function Sr(e,t){if("input"===e||"change"===e)return hr(t)}T&&(vr=ct("input")&&(!document.documentMode||9<document.documentMode));var xr={eventTypes:sr,_isInputEventSupported:vr,extractEvents:function(e,t,n,r){var i=t?Pn(t):window,a=i.nodeName&&i.nodeName.toLowerCase();if("select"===a||"input"===a&&"file"===i.type)var o=mr;else if(cr(i))if(vr)o=Sr;else{o=kr;var u=_r}else(a=i.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(o=wr);if(o&&(o=o(e,t)))return fr(o,n,r);u&&u(e,i,t),"blur"===e&&(e=i._wrapperState)&&e.controlled&&"number"===i.type&&Te(i,"number",i.value)}},Cr=Wn.extend({view:null,detail:null}),Er={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Tr(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Er[e])&&!!t[e]}function Ar(){return Tr}var Pr=0,Or=0,Fr=!1,Rr=!1,Lr=Cr.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Ar,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Pr;return Pr=e.screenX,Fr?"mousemove"===e.type?e.screenX-t:0:(Fr=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Or;return Or=e.screenY,Rr?"mousemove"===e.type?e.screenY-t:0:(Rr=!0,0)}}),zr=Lr.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Nr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Dr={eventTypes:Nr,extractEvents:function(e,t,n,r,i){var a="mouseover"===e||"pointerover"===e,o="mouseout"===e||"pointerout"===e;if(a&&0==(32&i)&&(n.relatedTarget||n.fromElement)||!o&&!a)return null;(a=r.window===r?r:(a=r.ownerDocument)?a.defaultView||a.parentWindow:window,o)?(o=t,null!==(t=(t=n.relatedTarget||n.toElement)?Tn(t):null)&&(t!==Je(t)||5!==t.tag&&6!==t.tag)&&(t=null)):o=null;if(o===t)return null;if("mouseout"===e||"mouseover"===e)var u=Lr,l=Nr.mouseLeave,c=Nr.mouseEnter,s="mouse";else"pointerout"!==e&&"pointerover"!==e||(u=zr,l=Nr.pointerLeave,c=Nr.pointerEnter,s="pointer");if(e=null==o?a:Pn(o),a=null==t?a:Pn(t),(l=u.getPooled(l,o,n,r)).type=s+"leave",l.target=e,l.relatedTarget=a,(n=u.getPooled(c,t,n,r)).type=s+"enter",n.target=a,n.relatedTarget=e,s=t,(r=o)&&s)e:{for(c=s,o=0,e=u=r;e;e=Fn(e))o++;for(e=0,t=c;t;t=Fn(t))e++;for(;0<o-e;)u=Fn(u),o--;for(;0<e-o;)c=Fn(c),e--;for(;o--;){if(u===c||u===c.alternate)break e;u=Fn(u),c=Fn(c)}u=null}else u=null;for(c=u,u=[];r&&r!==c&&(null===(o=r.alternate)||o!==c);)u.push(r),r=Fn(r);for(r=[];s&&s!==c&&(null===(o=s.alternate)||o!==c);)r.push(s),s=Fn(s);for(s=0;s<u.length;s++)Nn(u[s],"bubbled",l);for(s=r.length;0<s--;)Nn(r[s],"captured",n);return 0==(64&i)?[l]:[l,n]}};var jr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Ir=Object.prototype.hasOwnProperty;function Br(e,t){if(jr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Ir.call(t,n[r])||!jr(e[n[r]],t[n[r]]))return!1;return!0}var Mr=T&&"documentMode"in document&&11>=document.documentMode,qr={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Ur=null,$r=null,Wr=null,Vr=!1;function Hr(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Vr||null==Ur||Ur!==sn(n)?null:("selectionStart"in(n=Ur)&&gn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Wr&&Br(Wr,n)?null:(Wr=n,(e=Wn.getPooled(qr.select,$r,e,t)).type="select",e.target=Ur,jn(e),e))}var Gr={eventTypes:qr,extractEvents:function(e,t,n,r,i,a){if(!(a=!(i=a||(r.window===r?r.document:9===r.nodeType?r:r.ownerDocument)))){e:{i=Ze(i),a=C.onSelect;for(var o=0;o<a.length;o++)if(!i.has(a[o])){i=!1;break e}i=!0}a=!i}if(a)return null;switch(i=t?Pn(t):window,e){case"focus":(cr(i)||"true"===i.contentEditable)&&(Ur=i,$r=t,Wr=null);break;case"blur":Wr=$r=Ur=null;break;case"mousedown":Vr=!0;break;case"contextmenu":case"mouseup":case"dragend":return Vr=!1,Hr(n,r);case"selectionchange":if(Mr)break;case"keydown":case"keyup":return Hr(n,r)}return null}},Qr=Wn.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Kr=Wn.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Yr=Cr.extend({relatedTarget:null});function Xr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Zr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Jr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},ei=Cr.extend({key:function(e){if(e.key){var t=Zr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Xr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Jr[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Ar,charCode:function(e){return"keypress"===e.type?Xr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Xr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),ti=Lr.extend({dataTransfer:null}),ni=Cr.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Ar}),ri=Wn.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),ii=Lr.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),ai={eventTypes:jt,extractEvents:function(e,t,n,r){var i=It.get(e);if(!i)return null;switch(e){case"keypress":if(0===Xr(n))return null;case"keydown":case"keyup":e=ei;break;case"blur":case"focus":e=Yr;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Lr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=ti;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=ni;break;case He:case Ge:case Qe:e=Qr;break;case Ke:e=ri;break;case"scroll":e=Cr;break;case"wheel":e=ii;break;case"copy":case"cut":case"paste":e=Kr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=zr;break;default:e=Wn}return jn(t=e.getPooled(i,t,n,r)),t}};if(y)throw Error(o(101));y=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),_(),g=On,h=An,m=Pn,E({SimpleEventPlugin:ai,EnterLeaveEventPlugin:Dr,ChangeEventPlugin:xr,SelectEventPlugin:Gr,BeforeInputEventPlugin:ur});var oi=[],ui=-1;function li(e){0>ui||(e.current=oi[ui],oi[ui]=null,ui--)}function ci(e,t){ui++,oi[ui]=e.current,e.current=t}var si={},fi={current:si},di={current:!1},pi=si;function gi(e,t){var n=e.type.contextTypes;if(!n)return si;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,a={};for(i in n)a[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function hi(e){return null!=(e=e.childContextTypes)}function mi(){li(di),li(fi)}function vi(e,t,n){if(fi.current!==si)throw Error(o(168));ci(fi,t),ci(di,n)}function yi(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in e))throw Error(o(108,me(t)||"Unknown",a));return i({},n,{},r)}function bi(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||si,pi=fi.current,ci(fi,e),ci(di,di.current),!0}function _i(e,t,n){var r=e.stateNode;if(!r)throw Error(o(169));n?(e=yi(e,t,pi),r.__reactInternalMemoizedMergedChildContext=e,li(di),li(fi),ci(fi,e)):li(di),ci(di,n)}var ki=a.unstable_runWithPriority,wi=a.unstable_scheduleCallback,Si=a.unstable_cancelCallback,xi=a.unstable_requestPaint,Ci=a.unstable_now,Ei=a.unstable_getCurrentPriorityLevel,Ti=a.unstable_ImmediatePriority,Ai=a.unstable_UserBlockingPriority,Pi=a.unstable_NormalPriority,Oi=a.unstable_LowPriority,Fi=a.unstable_IdlePriority,Ri={},Li=a.unstable_shouldYield,zi=void 0!==xi?xi:function(){},Ni=null,Di=null,ji=!1,Ii=Ci(),Bi=1e4>Ii?Ci:function(){return Ci()-Ii};function Mi(){switch(Ei()){case Ti:return 99;case Ai:return 98;case Pi:return 97;case Oi:return 96;case Fi:return 95;default:throw Error(o(332))}}function qi(e){switch(e){case 99:return Ti;case 98:return Ai;case 97:return Pi;case 96:return Oi;case 95:return Fi;default:throw Error(o(332))}}function Ui(e,t){return e=qi(e),ki(e,t)}function $i(e,t,n){return e=qi(e),wi(e,t,n)}function Wi(e){return null===Ni?(Ni=[e],Di=wi(Ti,Hi)):Ni.push(e),Ri}function Vi(){if(null!==Di){var e=Di;Di=null,Si(e)}Hi()}function Hi(){if(!ji&&null!==Ni){ji=!0;var e=0;try{var t=Ni;Ui(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Ni=null}catch(t){throw null!==Ni&&(Ni=Ni.slice(e+1)),wi(Ti,Vi),t}finally{ji=!1}}}function Gi(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Qi(e,t){if(e&&e.defaultProps)for(var n in t=i({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Ki={current:null},Yi=null,Xi=null,Zi=null;function Ji(){Zi=Xi=Yi=null}function ea(e){var t=Ki.current;li(Ki),e.type._context._currentValue=t}function ta(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function na(e,t){Yi=e,Zi=Xi=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Oo=!0),e.firstContext=null)}function ra(e,t){if(Zi!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Zi=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Xi){if(null===Yi)throw Error(o(308));Xi=t,Yi.dependencies={expirationTime:0,firstContext:t,responders:null}}else Xi=Xi.next=t;return e._currentValue}var ia=!1;function aa(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function oa(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function ua(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function la(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function ca(e,t){var n=e.alternate;null!==n&&oa(n,e),null===(n=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=n.next,n.next=t)}function sa(e,t,n,r){var a=e.updateQueue;ia=!1;var o=a.baseQueue,u=a.shared.pending;if(null!==u){if(null!==o){var l=o.next;o.next=u.next,u.next=l}o=u,a.shared.pending=null,null!==(l=e.alternate)&&(null!==(l=l.updateQueue)&&(l.baseQueue=u))}if(null!==o){l=o.next;var c=a.baseState,s=0,f=null,d=null,p=null;if(null!==l)for(var g=l;;){if((u=g.expirationTime)<r){var h={expirationTime:g.expirationTime,suspenseConfig:g.suspenseConfig,tag:g.tag,payload:g.payload,callback:g.callback,next:null};null===p?(d=p=h,f=c):p=p.next=h,u>s&&(s=u)}else{null!==p&&(p=p.next={expirationTime:1073741823,suspenseConfig:g.suspenseConfig,tag:g.tag,payload:g.payload,callback:g.callback,next:null}),al(u,g.suspenseConfig);e:{var m=e,v=g;switch(u=t,h=n,v.tag){case 1:if("function"==typeof(m=v.payload)){c=m.call(h,c,u);break e}c=m;break e;case 3:m.effectTag=-4097&m.effectTag|64;case 0:if(null==(u="function"==typeof(m=v.payload)?m.call(h,c,u):m))break e;c=i({},c,u);break e;case 2:ia=!0}}null!==g.callback&&(e.effectTag|=32,null===(u=a.effects)?a.effects=[g]:u.push(g))}if(null===(g=g.next)||g===l){if(null===(u=a.shared.pending))break;g=o.next=u.next,u.next=l,a.baseQueue=o=u,a.shared.pending=null}}null===p?f=c:p.next=d,a.baseState=f,a.baseQueue=p,ol(s),e.expirationTime=s,e.memoizedState=c}}function fa(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],i=r.callback;if(null!==i){if(r.callback=null,r=i,i=n,"function"!=typeof r)throw Error(o(191,r));r.call(i)}}}var da=Y.ReactCurrentBatchConfig,pa=(new r.Component).refs;function ga(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:i({},t,n),e.memoizedState=n,0===e.expirationTime&&(e.updateQueue.baseState=n)}var ha={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Je(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Hu(),i=da.suspense;(i=ua(r=Gu(r,e,i),i)).payload=t,null!=n&&(i.callback=n),la(e,i),Qu(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Hu(),i=da.suspense;(i=ua(r=Gu(r,e,i),i)).tag=1,i.payload=t,null!=n&&(i.callback=n),la(e,i),Qu(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Hu(),r=da.suspense;(r=ua(n=Gu(n,e,r),r)).tag=2,null!=t&&(r.callback=t),la(e,r),Qu(e,n)}};function ma(e,t,n,r,i,a,o){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,o):!t.prototype||!t.prototype.isPureReactComponent||(!Br(n,r)||!Br(i,a))}function va(e,t,n){var r=!1,i=si,a=t.contextType;return"object"==typeof a&&null!==a?a=ra(a):(i=hi(t)?pi:fi.current,a=(r=null!=(r=t.contextTypes))?gi(e,i):si),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ha,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=a),t}function ya(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ha.enqueueReplaceState(t,t.state,null)}function ba(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=pa,aa(e);var a=t.contextType;"object"==typeof a&&null!==a?i.context=ra(a):(a=hi(t)?pi:fi.current,i.context=gi(e,a)),sa(e,n,i,r),i.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(ga(e,t,a,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&ha.enqueueReplaceState(i,i.state,null),sa(e,n,i,r),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.effectTag|=4)}var _a=Array.isArray;function ka(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(o(309));var r=n.stateNode}if(!r)throw Error(o(147,e));var i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:((t=function(e){var t=r.refs;t===pa&&(t=r.refs={}),null===e?delete t[i]:t[i]=e})._stringRef=i,t)}if("string"!=typeof e)throw Error(o(284));if(!n._owner)throw Error(o(290,e))}return e}function wa(e,t){if("textarea"!==e.type)throw Error(o(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function Sa(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t){return(e=El(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function u(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Pl(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=i(t,n.props)).ref=ka(e,t,n),r.return=e,r):((r=Tl(n.type,n.key,n.props,null,e.mode,r)).ref=ka(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ol(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=Al(n,e.mode,r,a)).return=e,t):((t=i(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Pl(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ee:return(n=Tl(t.type,t.key,t.props,null,e.mode,n)).ref=ka(e,null,t),n.return=e,n;case te:return(t=Ol(t,e.mode,n)).return=e,t}if(_a(t)||he(t))return(t=Al(t,e.mode,n,null)).return=e,t;wa(e,t)}return null}function p(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ee:return n.key===i?n.type===ne?f(e,t,n.props.children,r,i):c(e,t,n,r):null;case te:return n.key===i?s(e,t,n,r):null}if(_a(n)||he(n))return null!==i?null:f(e,t,n,r,null);wa(e,n)}return null}function g(e,t,n,r,i){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ee:return e=e.get(null===r.key?n:r.key)||null,r.type===ne?f(t,e,r.props.children,i,r.key):c(t,e,r,i);case te:return s(t,e=e.get(null===r.key?n:r.key)||null,r,i)}if(_a(r)||he(r))return f(t,e=e.get(n)||null,r,i,null);wa(t,r)}return null}function h(i,o,u,l){for(var c=null,s=null,f=o,h=o=0,m=null;null!==f&&h<u.length;h++){f.index>h?(m=f,f=null):m=f.sibling;var v=p(i,f,u[h],l);if(null===v){null===f&&(f=m);break}e&&f&&null===v.alternate&&t(i,f),o=a(v,o,h),null===s?c=v:s.sibling=v,s=v,f=m}if(h===u.length)return n(i,f),c;if(null===f){for(;h<u.length;h++)null!==(f=d(i,u[h],l))&&(o=a(f,o,h),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(i,f);h<u.length;h++)null!==(m=g(f,i,h,u[h],l))&&(e&&null!==m.alternate&&f.delete(null===m.key?h:m.key),o=a(m,o,h),null===s?c=m:s.sibling=m,s=m);return e&&f.forEach((function(e){return t(i,e)})),c}function m(i,u,l,c){var s=he(l);if("function"!=typeof s)throw Error(o(150));if(null==(l=s.call(l)))throw Error(o(151));for(var f=s=null,h=u,m=u=0,v=null,y=l.next();null!==h&&!y.done;m++,y=l.next()){h.index>m?(v=h,h=null):v=h.sibling;var b=p(i,h,y.value,c);if(null===b){null===h&&(h=v);break}e&&h&&null===b.alternate&&t(i,h),u=a(b,u,m),null===f?s=b:f.sibling=b,f=b,h=v}if(y.done)return n(i,h),s;if(null===h){for(;!y.done;m++,y=l.next())null!==(y=d(i,y.value,c))&&(u=a(y,u,m),null===f?s=y:f.sibling=y,f=y);return s}for(h=r(i,h);!y.done;m++,y=l.next())null!==(y=g(h,i,m,y.value,c))&&(e&&null!==y.alternate&&h.delete(null===y.key?m:y.key),u=a(y,u,m),null===f?s=y:f.sibling=y,f=y);return e&&h.forEach((function(e){return t(i,e)})),s}return function(e,r,a,l){var c="object"==typeof a&&null!==a&&a.type===ne&&null===a.key;c&&(a=a.props.children);var s="object"==typeof a&&null!==a;if(s)switch(a.$$typeof){case ee:e:{for(s=a.key,c=r;null!==c;){if(c.key===s){switch(c.tag){case 7:if(a.type===ne){n(e,c.sibling),(r=i(c,a.props.children)).return=e,e=r;break e}break;default:if(c.elementType===a.type){n(e,c.sibling),(r=i(c,a.props)).ref=ka(e,c,a),r.return=e,e=r;break e}}n(e,c);break}t(e,c),c=c.sibling}a.type===ne?((r=Al(a.props.children,e.mode,l,a.key)).return=e,e=r):((l=Tl(a.type,a.key,a.props,null,e.mode,l)).ref=ka(e,r,a),l.return=e,e=l)}return u(e);case te:e:{for(c=a.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=i(r,a.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Ol(a,e.mode,l)).return=e,e=r}return u(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=i(r,a)).return=e,e=r):(n(e,r),(r=Pl(a,e.mode,l)).return=e,e=r),u(e);if(_a(a))return h(e,r,a,l);if(he(a))return m(e,r,a,l);if(s&&wa(e,a),void 0===a&&!c)switch(e.tag){case 1:case 0:throw e=e.type,Error(o(152,e.displayName||e.name||"Component"))}return n(e,r)}}var xa=Sa(!0),Ca=Sa(!1),Ea={},Ta={current:Ea},Aa={current:Ea},Pa={current:Ea};function Oa(e){if(e===Ea)throw Error(o(174));return e}function Fa(e,t){switch(ci(Pa,t),ci(Aa,e),ci(Ta,Ea),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:je(null,"");break;default:t=je(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}li(Ta),ci(Ta,t)}function Ra(){li(Ta),li(Aa),li(Pa)}function La(e){Oa(Pa.current);var t=Oa(Ta.current),n=je(t,e.type);t!==n&&(ci(Aa,e),ci(Ta,n))}function za(e){Aa.current===e&&(li(Ta),li(Aa))}var Na={current:0};function Da(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function ja(e,t){return{responder:e,props:t}}var Ia=Y.ReactCurrentDispatcher,Ba=Y.ReactCurrentBatchConfig,Ma=0,qa=null,Ua=null,$a=null,Wa=!1;function Va(){throw Error(o(321))}function Ha(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!jr(e[n],t[n]))return!1;return!0}function Ga(e,t,n,r,i,a){if(Ma=a,qa=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,Ia.current=null===e||null===e.memoizedState?vo:yo,e=n(r,i),t.expirationTime===Ma){a=0;do{if(t.expirationTime=0,!(25>a))throw Error(o(301));a+=1,$a=Ua=null,t.updateQueue=null,Ia.current=bo,e=n(r,i)}while(t.expirationTime===Ma)}if(Ia.current=mo,t=null!==Ua&&null!==Ua.next,Ma=0,$a=Ua=qa=null,Wa=!1,t)throw Error(o(300));return e}function Qa(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===$a?qa.memoizedState=$a=e:$a=$a.next=e,$a}function Ka(){if(null===Ua){var e=qa.alternate;e=null!==e?e.memoizedState:null}else e=Ua.next;var t=null===$a?qa.memoizedState:$a.next;if(null!==t)$a=t,Ua=e;else{if(null===e)throw Error(o(310));e={memoizedState:(Ua=e).memoizedState,baseState:Ua.baseState,baseQueue:Ua.baseQueue,queue:Ua.queue,next:null},null===$a?qa.memoizedState=$a=e:$a=$a.next=e}return $a}function Ya(e,t){return"function"==typeof t?t(e):t}function Xa(e){var t=Ka(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=Ua,i=r.baseQueue,a=n.pending;if(null!==a){if(null!==i){var u=i.next;i.next=a.next,a.next=u}r.baseQueue=i=a,n.pending=null}if(null!==i){i=i.next,r=r.baseState;var l=u=a=null,c=i;do{var s=c.expirationTime;if(s<Ma){var f={expirationTime:c.expirationTime,suspenseConfig:c.suspenseConfig,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===l?(u=l=f,a=r):l=l.next=f,s>qa.expirationTime&&(qa.expirationTime=s,ol(s))}else null!==l&&(l=l.next={expirationTime:1073741823,suspenseConfig:c.suspenseConfig,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),al(s,c.suspenseConfig),r=c.eagerReducer===e?c.eagerState:e(r,c.action);c=c.next}while(null!==c&&c!==i);null===l?a=r:l.next=u,jr(r,t.memoizedState)||(Oo=!0),t.memoizedState=r,t.baseState=a,t.baseQueue=l,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function Za(e){var t=Ka(),n=t.queue;if(null===n)throw Error(o(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,a=t.memoizedState;if(null!==i){n.pending=null;var u=i=i.next;do{a=e(a,u.action),u=u.next}while(u!==i);jr(a,t.memoizedState)||(Oo=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function Ja(e){var t=Qa();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:Ya,lastRenderedState:e}).dispatch=ho.bind(null,qa,e),[t.memoizedState,e]}function eo(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=qa.updateQueue)?(t={lastEffect:null},qa.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function to(){return Ka().memoizedState}function no(e,t,n,r){var i=Qa();qa.effectTag|=e,i.memoizedState=eo(1|t,n,void 0,void 0===r?null:r)}function ro(e,t,n,r){var i=Ka();r=void 0===r?null:r;var a=void 0;if(null!==Ua){var o=Ua.memoizedState;if(a=o.destroy,null!==r&&Ha(r,o.deps))return void eo(t,n,a,r)}qa.effectTag|=e,i.memoizedState=eo(1|t,n,a,r)}function io(e,t){return no(516,4,e,t)}function ao(e,t){return ro(516,4,e,t)}function oo(e,t){return ro(4,2,e,t)}function uo(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function lo(e,t,n){return n=null!=n?n.concat([e]):null,ro(4,2,uo.bind(null,t,e),n)}function co(){}function so(e,t){return Qa().memoizedState=[e,void 0===t?null:t],e}function fo(e,t){var n=Ka();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ha(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function po(e,t){var n=Ka();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ha(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function go(e,t,n){var r=Mi();Ui(98>r?98:r,(function(){e(!0)})),Ui(97<r?97:r,(function(){var r=Ba.suspense;Ba.suspense=void 0===t?null:t;try{e(!1),n()}finally{Ba.suspense=r}}))}function ho(e,t,n){var r=Hu(),i=da.suspense;i={expirationTime:r=Gu(r,e,i),suspenseConfig:i,action:n,eagerReducer:null,eagerState:null,next:null};var a=t.pending;if(null===a?i.next=i:(i.next=a.next,a.next=i),t.pending=i,a=e.alternate,e===qa||null!==a&&a===qa)Wa=!0,i.expirationTime=Ma,qa.expirationTime=Ma;else{if(0===e.expirationTime&&(null===a||0===a.expirationTime)&&null!==(a=t.lastRenderedReducer))try{var o=t.lastRenderedState,u=a(o,n);if(i.eagerReducer=a,i.eagerState=u,jr(u,o))return}catch(e){}Qu(e,r)}}var mo={readContext:ra,useCallback:Va,useContext:Va,useEffect:Va,useImperativeHandle:Va,useLayoutEffect:Va,useMemo:Va,useReducer:Va,useRef:Va,useState:Va,useDebugValue:Va,useResponder:Va,useDeferredValue:Va,useTransition:Va},vo={readContext:ra,useCallback:so,useContext:ra,useEffect:io,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,no(4,2,uo.bind(null,t,e),n)},useLayoutEffect:function(e,t){return no(4,2,e,t)},useMemo:function(e,t){var n=Qa();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Qa();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=ho.bind(null,qa,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Qa().memoizedState=e},useState:Ja,useDebugValue:co,useResponder:ja,useDeferredValue:function(e,t){var n=Ja(e),r=n[0],i=n[1];return io((function(){var n=Ba.suspense;Ba.suspense=void 0===t?null:t;try{i(e)}finally{Ba.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Ja(!1),n=t[0];return t=t[1],[so(go.bind(null,t,e),[t,e]),n]}},yo={readContext:ra,useCallback:fo,useContext:ra,useEffect:ao,useImperativeHandle:lo,useLayoutEffect:oo,useMemo:po,useReducer:Xa,useRef:to,useState:function(){return Xa(Ya)},useDebugValue:co,useResponder:ja,useDeferredValue:function(e,t){var n=Xa(Ya),r=n[0],i=n[1];return ao((function(){var n=Ba.suspense;Ba.suspense=void 0===t?null:t;try{i(e)}finally{Ba.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Xa(Ya),n=t[0];return t=t[1],[fo(go.bind(null,t,e),[t,e]),n]}},bo={readContext:ra,useCallback:fo,useContext:ra,useEffect:ao,useImperativeHandle:lo,useLayoutEffect:oo,useMemo:po,useReducer:Za,useRef:to,useState:function(){return Za(Ya)},useDebugValue:co,useResponder:ja,useDeferredValue:function(e,t){var n=Za(Ya),r=n[0],i=n[1];return ao((function(){var n=Ba.suspense;Ba.suspense=void 0===t?null:t;try{i(e)}finally{Ba.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Za(Ya),n=t[0];return t=t[1],[fo(go.bind(null,t,e),[t,e]),n]}},_o=null,ko=null,wo=!1;function So(e,t){var n=xl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function xo(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Co(e){if(wo){var t=ko;if(t){var n=t;if(!xo(e,t)){if(!(t=kn(n.nextSibling))||!xo(e,t))return e.effectTag=-1025&e.effectTag|2,wo=!1,void(_o=e);So(_o,n)}_o=e,ko=kn(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,wo=!1,_o=e}}function Eo(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;_o=e}function To(e){if(e!==_o)return!1;if(!wo)return Eo(e),wo=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!yn(t,e.memoizedProps))for(t=ko;t;)So(e,t),t=kn(t.nextSibling);if(Eo(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(o(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ko=kn(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ko=null}}else ko=_o?kn(e.stateNode.nextSibling):null;return!0}function Ao(){ko=_o=null,wo=!1}var Po=Y.ReactCurrentOwner,Oo=!1;function Fo(e,t,n,r){t.child=null===e?Ca(t,null,n,r):xa(t,e.child,n,r)}function Ro(e,t,n,r,i){n=n.render;var a=t.ref;return na(t,i),r=Ga(e,t,n,r,a,i),null===e||Oo?(t.effectTag|=1,Fo(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),Qo(e,t,i))}function Lo(e,t,n,r,i,a){if(null===e){var o=n.type;return"function"!=typeof o||Cl(o)||void 0!==o.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Tl(n.type,null,r,null,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=o,zo(e,t,o,r,i,a))}return o=e.child,i<a&&(i=o.memoizedProps,(n=null!==(n=n.compare)?n:Br)(i,r)&&e.ref===t.ref)?Qo(e,t,a):(t.effectTag|=1,(e=El(o,r)).ref=t.ref,e.return=t,t.child=e)}function zo(e,t,n,r,i,a){return null!==e&&Br(e.memoizedProps,r)&&e.ref===t.ref&&(Oo=!1,i<a)?(t.expirationTime=e.expirationTime,Qo(e,t,a)):Do(e,t,n,r,a)}function No(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Do(e,t,n,r,i){var a=hi(n)?pi:fi.current;return a=gi(t,a),na(t,i),n=Ga(e,t,n,r,a,i),null===e||Oo?(t.effectTag|=1,Fo(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),Qo(e,t,i))}function jo(e,t,n,r,i){if(hi(n)){var a=!0;bi(t)}else a=!1;if(na(t,i),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),va(t,n,r),ba(t,n,r,i),r=!0;else if(null===e){var o=t.stateNode,u=t.memoizedProps;o.props=u;var l=o.context,c=n.contextType;"object"==typeof c&&null!==c?c=ra(c):c=gi(t,c=hi(n)?pi:fi.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof o.getSnapshotBeforeUpdate;f||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(u!==r||l!==c)&&ya(t,o,r,c),ia=!1;var d=t.memoizedState;o.state=d,sa(t,r,o,i),l=t.memoizedState,u!==r||d!==l||di.current||ia?("function"==typeof s&&(ga(t,n,s,r),l=t.memoizedState),(u=ia||ma(t,n,u,r,d,l,c))?(f||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||("function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount()),"function"==typeof o.componentDidMount&&(t.effectTag|=4)):("function"==typeof o.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=l),o.props=r,o.state=l,o.context=c,r=u):("function"==typeof o.componentDidMount&&(t.effectTag|=4),r=!1)}else o=t.stateNode,oa(e,t),u=t.memoizedProps,o.props=t.type===t.elementType?u:Qi(t.type,u),l=o.context,"object"==typeof(c=n.contextType)&&null!==c?c=ra(c):c=gi(t,c=hi(n)?pi:fi.current),(f="function"==typeof(s=n.getDerivedStateFromProps)||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(u!==r||l!==c)&&ya(t,o,r,c),ia=!1,l=t.memoizedState,o.state=l,sa(t,r,o,i),d=t.memoizedState,u!==r||l!==d||di.current||ia?("function"==typeof s&&(ga(t,n,s,r),d=t.memoizedState),(s=ia||ma(t,n,u,r,l,d,c))?(f||"function"!=typeof o.UNSAFE_componentWillUpdate&&"function"!=typeof o.componentWillUpdate||("function"==typeof o.componentWillUpdate&&o.componentWillUpdate(r,d,c),"function"==typeof o.UNSAFE_componentWillUpdate&&o.UNSAFE_componentWillUpdate(r,d,c)),"function"==typeof o.componentDidUpdate&&(t.effectTag|=4),"function"==typeof o.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof o.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof o.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),o.props=r,o.state=d,o.context=c,r=s):("function"!=typeof o.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof o.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),r=!1);return Io(e,t,n,r,a,i)}function Io(e,t,n,r,i,a){No(e,t);var o=0!=(64&t.effectTag);if(!r&&!o)return i&&_i(t,n,!1),Qo(e,t,a);r=t.stateNode,Po.current=t;var u=o&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&o?(t.child=xa(t,e.child,null,a),t.child=xa(t,null,u,a)):Fo(e,t,u,a),t.memoizedState=r.state,i&&_i(t,n,!0),t.child}function Bo(e){var t=e.stateNode;t.pendingContext?vi(0,t.pendingContext,t.pendingContext!==t.context):t.context&&vi(0,t.context,!1),Fa(e,t.containerInfo)}var Mo,qo,Uo,$o={dehydrated:null,retryTime:0};function Wo(e,t,n){var r,i=t.mode,a=t.pendingProps,o=Na.current,u=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&o)&&(null===e||null!==e.memoizedState)),r?(u=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===a.fallback||!0===a.unstable_avoidThisFallback||(o|=1),ci(Na,1&o),null===e){if(void 0!==a.fallback&&Co(t),u){if(u=a.fallback,(a=Al(null,i,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,a.child=e;null!==e;)e.return=a,e=e.sibling;return(n=Al(u,i,n,null)).return=t,a.sibling=n,t.memoizedState=$o,t.child=a,n}return i=a.children,t.memoizedState=null,t.child=Ca(t,null,i,n)}if(null!==e.memoizedState){if(i=(e=e.child).sibling,u){if(a=a.fallback,(n=El(e,e.pendingProps)).return=t,0==(2&t.mode)&&(u=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=u;null!==u;)u.return=n,u=u.sibling;return(i=El(i,a)).return=t,n.sibling=i,n.childExpirationTime=0,t.memoizedState=$o,t.child=n,i}return n=xa(t,e.child,a.children,n),t.memoizedState=null,t.child=n}if(e=e.child,u){if(u=a.fallback,(a=Al(null,i,0,null)).return=t,a.child=e,null!==e&&(e.return=a),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,a.child=e;null!==e;)e.return=a,e=e.sibling;return(n=Al(u,i,n,null)).return=t,a.sibling=n,n.effectTag|=2,a.childExpirationTime=0,t.memoizedState=$o,t.child=a,n}return t.memoizedState=null,t.child=xa(t,e,a.children,n)}function Vo(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),ta(e.return,t)}function Ho(e,t,n,r,i,a){var o=e.memoizedState;null===o?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailExpiration:0,tailMode:i,lastEffect:a}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailExpiration=0,o.tailMode=i,o.lastEffect=a)}function Go(e,t,n){var r=t.pendingProps,i=r.revealOrder,a=r.tail;if(Fo(e,t,r.children,n),0!=(2&(r=Na.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Vo(e,n);else if(19===e.tag)Vo(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(ci(Na,r),0==(2&t.mode))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(e=n.alternate)&&null===Da(e)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),Ho(t,!1,i,n,a,t.lastEffect);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===Da(e)){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}Ho(t,!0,n,null,a,t.lastEffect);break;case"together":Ho(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Qo(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&ol(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(o(153));if(null!==t.child){for(n=El(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=El(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Ko(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Yo(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return hi(t.type)&&mi(),null;case 3:return Ra(),li(di),li(fi),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||!To(t)||(t.effectTag|=4),null;case 5:za(t),n=Oa(Pa.current);var a=t.type;if(null!==e&&null!=t.stateNode)qo(e,t,a,r,n),e.ref!==t.ref&&(t.effectTag|=128);else{if(!r){if(null===t.stateNode)throw Error(o(166));return null}if(e=Oa(Ta.current),To(t)){r=t.stateNode,a=t.type;var u=t.memoizedProps;switch(r[xn]=t,r[Cn]=u,a){case"iframe":case"object":case"embed":Gt("load",r);break;case"video":case"audio":for(e=0;e<Ye.length;e++)Gt(Ye[e],r);break;case"source":Gt("error",r);break;case"img":case"image":case"link":Gt("error",r),Gt("load",r);break;case"form":Gt("reset",r),Gt("submit",r);break;case"details":Gt("toggle",r);break;case"input":Se(r,u),Gt("invalid",r),ln(n,"onChange");break;case"select":r._wrapperState={wasMultiple:!!u.multiple},Gt("invalid",r),ln(n,"onChange");break;case"textarea":Fe(r,u),Gt("invalid",r),ln(n,"onChange")}for(var l in an(a,u),e=null,u)if(u.hasOwnProperty(l)){var c=u[l];"children"===l?"string"==typeof c?r.textContent!==c&&(e=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(e=["children",""+c]):x.hasOwnProperty(l)&&null!=c&&ln(n,l)}switch(a){case"input":_e(r),Ee(r,u,!0);break;case"textarea":_e(r),Le(r);break;case"select":case"option":break;default:"function"==typeof u.onClick&&(r.onclick=cn)}n=e,t.updateQueue=n,null!==n&&(t.effectTag|=4)}else{switch(l=9===n.nodeType?n:n.ownerDocument,e===un&&(e=De(a)),e===un?"script"===a?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(a,{is:r.is}):(e=l.createElement(a),"select"===a&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,a),e[xn]=t,e[Cn]=r,Mo(e,t),t.stateNode=e,l=on(a,r),a){case"iframe":case"object":case"embed":Gt("load",e),c=r;break;case"video":case"audio":for(c=0;c<Ye.length;c++)Gt(Ye[c],e);c=r;break;case"source":Gt("error",e),c=r;break;case"img":case"image":case"link":Gt("error",e),Gt("load",e),c=r;break;case"form":Gt("reset",e),Gt("submit",e),c=r;break;case"details":Gt("toggle",e),c=r;break;case"input":Se(e,r),c=we(e,r),Gt("invalid",e),ln(n,"onChange");break;case"option":c=Ae(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},c=i({},r,{value:void 0}),Gt("invalid",e),ln(n,"onChange");break;case"textarea":Fe(e,r),c=Oe(e,r),Gt("invalid",e),ln(n,"onChange");break;default:c=r}an(a,c);var s=c;for(u in s)if(s.hasOwnProperty(u)){var f=s[u];"style"===u?nn(e,f):"dangerouslySetInnerHTML"===u?null!=(f=f?f.__html:void 0)&&Be(e,f):"children"===u?"string"==typeof f?("textarea"!==a||""!==f)&&Me(e,f):"number"==typeof f&&Me(e,""+f):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(x.hasOwnProperty(u)?null!=f&&ln(n,u):null!=f&&X(e,u,f,l))}switch(a){case"input":_e(e),Ee(e,r,!1);break;case"textarea":_e(e),Le(e);break;case"option":null!=r.value&&e.setAttribute("value",""+ye(r.value));break;case"select":e.multiple=!!r.multiple,null!=(n=r.value)?Pe(e,!!r.multiple,n,!1):null!=r.defaultValue&&Pe(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof c.onClick&&(e.onclick=cn)}vn(a,r)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Uo(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(o(166));n=Oa(Pa.current),Oa(Ta.current),To(t)?(n=t.stateNode,r=t.memoizedProps,n[xn]=t,n.nodeValue!==r&&(t.effectTag|=4)):((n=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[xn]=t,t.stateNode=n)}return null;case 13:return li(Na),r=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=n,t):(n=null!==r,r=!1,null===e?void 0!==t.memoizedProps.fallback&&To(t):(r=null!==(a=e.memoizedState),n||null===a||null!==(a=e.child.sibling)&&(null!==(u=t.firstEffect)?(t.firstEffect=a,a.nextEffect=u):(t.firstEffect=t.lastEffect=a,a.nextEffect=null),a.effectTag=8)),n&&!r&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Na.current)?Tu===_u&&(Tu=ku):(Tu!==_u&&Tu!==ku||(Tu=wu),0!==Ru&&null!==xu&&(Ll(xu,Eu),zl(xu,Ru)))),(n||r)&&(t.effectTag|=4),null);case 4:return Ra(),null;case 10:return ea(t),null;case 17:return hi(t.type)&&mi(),null;case 19:if(li(Na),null===(r=t.memoizedState))return null;if(a=0!=(64&t.effectTag),null===(u=r.rendering)){if(a)Ko(r,!1);else if(Tu!==_u||null!==e&&0!=(64&e.effectTag))for(u=t.child;null!==u;){if(null!==(e=Da(u))){for(t.effectTag|=64,Ko(r,!1),null!==(a=e.updateQueue)&&(t.updateQueue=a,t.effectTag|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=t.child;null!==r;)u=n,(a=r).effectTag&=2,a.nextEffect=null,a.firstEffect=null,a.lastEffect=null,null===(e=a.alternate)?(a.childExpirationTime=0,a.expirationTime=u,a.child=null,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null):(a.childExpirationTime=e.childExpirationTime,a.expirationTime=e.expirationTime,a.child=e.child,a.memoizedProps=e.memoizedProps,a.memoizedState=e.memoizedState,a.updateQueue=e.updateQueue,u=e.dependencies,a.dependencies=null===u?null:{expirationTime:u.expirationTime,firstContext:u.firstContext,responders:u.responders}),r=r.sibling;return ci(Na,1&Na.current|2),t.child}u=u.sibling}}else{if(!a)if(null!==(e=Da(u))){if(t.effectTag|=64,a=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),Ko(r,!0),null===r.tail&&"hidden"===r.tailMode&&!u.alternate)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Bi()-r.renderingStartTime>r.tailExpiration&&1<n&&(t.effectTag|=64,a=!0,Ko(r,!1),t.expirationTime=t.childExpirationTime=n-1);r.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=r.last)?n.sibling=u:t.child=u,r.last=u)}return null!==r.tail?(0===r.tailExpiration&&(r.tailExpiration=Bi()+500),n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Bi(),n.sibling=null,t=Na.current,ci(Na,a?1&t|2:1&t),n):null}throw Error(o(156,t.tag))}function Xo(e){switch(e.tag){case 1:hi(e.type)&&mi();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Ra(),li(di),li(fi),0!=(64&(t=e.effectTag)))throw Error(o(285));return e.effectTag=-4097&t|64,e;case 5:return za(e),null;case 13:return li(Na),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return li(Na),null;case 4:return Ra(),null;case 10:return ea(e),null;default:return null}}function Zo(e,t){return{value:e,source:t,stack:ve(t)}}Mo=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},qo=function(e,t,n,r,a){var o=e.memoizedProps;if(o!==r){var u,l,c=t.stateNode;switch(Oa(Ta.current),e=null,n){case"input":o=we(c,o),r=we(c,r),e=[];break;case"option":o=Ae(c,o),r=Ae(c,r),e=[];break;case"select":o=i({},o,{value:void 0}),r=i({},r,{value:void 0}),e=[];break;case"textarea":o=Oe(c,o),r=Oe(c,r),e=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(c.onclick=cn)}for(u in an(n,r),n=null,o)if(!r.hasOwnProperty(u)&&o.hasOwnProperty(u)&&null!=o[u])if("style"===u)for(l in c=o[u])c.hasOwnProperty(l)&&(n||(n={}),n[l]="");else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(x.hasOwnProperty(u)?e||(e=[]):(e=e||[]).push(u,null));for(u in r){var s=r[u];if(c=null!=o?o[u]:void 0,r.hasOwnProperty(u)&&s!==c&&(null!=s||null!=c))if("style"===u)if(c){for(l in c)!c.hasOwnProperty(l)||s&&s.hasOwnProperty(l)||(n||(n={}),n[l]="");for(l in s)s.hasOwnProperty(l)&&c[l]!==s[l]&&(n||(n={}),n[l]=s[l])}else n||(e||(e=[]),e.push(u,n)),n=s;else"dangerouslySetInnerHTML"===u?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(e=e||[]).push(u,s)):"children"===u?c===s||"string"!=typeof s&&"number"!=typeof s||(e=e||[]).push(u,""+s):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(x.hasOwnProperty(u)?(null!=s&&ln(a,u),e||c===s||(e=[])):(e=e||[]).push(u,s))}n&&(e=e||[]).push("style",n),a=e,(t.updateQueue=a)&&(t.effectTag|=4)}},Uo=function(e,t,n,r){n!==r&&(t.effectTag|=4)};var Jo="function"==typeof WeakSet?WeakSet:Set;function eu(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ve(n)),null!==n&&me(n.type),t=t.value,null!==e&&1===e.tag&&me(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function tu(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){yl(e,t)}else t.current=null}function nu(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Qi(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(o(163))}function ru(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function iu(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function au(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:return void iu(3,n);case 1:if(e=n.stateNode,4&n.effectTag)if(null===t)e.componentDidMount();else{var r=n.elementType===n.type?t.memoizedProps:Qi(n.type,t.memoizedProps);e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=n.updateQueue)&&fa(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}fa(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.effectTag&&vn(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Dt(n)))));case 19:case 17:case 20:case 21:return}throw Error(o(163))}function ou(e,t,n){switch("function"==typeof wl&&wl(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Ui(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var i=t;try{n()}catch(e){yl(i,e)}}e=e.next}while(e!==r)}))}break;case 1:tu(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){yl(e,t)}}(t,n);break;case 5:tu(t);break;case 4:su(e,t,n)}}function uu(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&uu(t)}function lu(e){return 5===e.tag||3===e.tag||4===e.tag}function cu(e){e:{for(var t=e.return;null!==t;){if(lu(t)){var n=t;break e}t=t.return}throw Error(o(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(o(161))}16&n.effectTag&&(Me(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||lu(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}r?function e(t,n,r){var i=t.tag,a=5===i||6===i;if(a)t=a?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=cn));else if(4!==i&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var i=t.tag,a=5===i||6===i;if(a)t=a?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==i&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function su(e,t,n){for(var r,i,a=t,u=!1;;){if(!u){u=a.return;e:for(;;){if(null===u)throw Error(o(160));switch(r=u.stateNode,u.tag){case 5:i=!1;break e;case 3:case 4:r=r.containerInfo,i=!0;break e}u=u.return}u=!0}if(5===a.tag||6===a.tag){e:for(var l=e,c=a,s=n,f=c;;)if(ou(l,f,s),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===c)break e;for(;null===f.sibling;){if(null===f.return||f.return===c)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}i?(l=r,c=a.stateNode,8===l.nodeType?l.parentNode.removeChild(c):l.removeChild(c)):r.removeChild(a.stateNode)}else if(4===a.tag){if(null!==a.child){r=a.stateNode.containerInfo,i=!0,a.child.return=a,a=a.child;continue}}else if(ou(e,a,n),null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)return;4===(a=a.return).tag&&(u=!1)}a.sibling.return=a.return,a=a.sibling}}function fu(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void ru(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,i=null!==e?e.memoizedProps:r;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(n[Cn]=r,"input"===e&&"radio"===r.type&&null!=r.name&&xe(n,r),on(e,i),t=on(e,r),i=0;i<a.length;i+=2){var u=a[i],l=a[i+1];"style"===u?nn(n,l):"dangerouslySetInnerHTML"===u?Be(n,l):"children"===u?Me(n,l):X(n,u,l,t)}switch(e){case"input":Ce(n,r);break;case"textarea":Re(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Pe(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Pe(n,!!r.multiple,r.defaultValue,!0):Pe(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(o(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,Dt(t.containerInfo)));case 12:return;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,zu=Bi()),null!==n)e:for(e=n;;){if(5===e.tag)a=e.stateNode,r?"function"==typeof(a=a.style).setProperty?a.setProperty("display","none","important"):a.display="none":(a=e.stateNode,i=null!=(i=e.memoizedProps.style)&&i.hasOwnProperty("display")?i.display:null,a.style.display=tn("display",i));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(a=e.child.sibling).return=e,e=a;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void du(t);case 19:return void du(t);case 17:return}throw Error(o(163))}function du(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Jo),t.forEach((function(t){var r=_l.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var pu="function"==typeof WeakMap?WeakMap:Map;function gu(e,t,n){(n=ua(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Du||(Du=!0,ju=r),eu(e,t)},n}function hu(e,t,n){(n=ua(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return eu(e,t),r(i)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Iu?Iu=new Set([this]):Iu.add(this),eu(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var mu,vu=Math.ceil,yu=Y.ReactCurrentDispatcher,bu=Y.ReactCurrentOwner,_u=0,ku=3,wu=4,Su=0,xu=null,Cu=null,Eu=0,Tu=_u,Au=null,Pu=1073741823,Ou=1073741823,Fu=null,Ru=0,Lu=!1,zu=0,Nu=null,Du=!1,ju=null,Iu=null,Bu=!1,Mu=null,qu=90,Uu=null,$u=0,Wu=null,Vu=0;function Hu(){return 0!=(48&Su)?1073741821-(Bi()/10|0):0!==Vu?Vu:Vu=1073741821-(Bi()/10|0)}function Gu(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=Mi();if(0==(4&t))return 99===r?1073741823:1073741822;if(0!=(16&Su))return Eu;if(null!==n)e=Gi(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=Gi(e,150,100);break;case 97:case 96:e=Gi(e,5e3,250);break;case 95:e=2;break;default:throw Error(o(326))}return null!==xu&&e===Eu&&--e,e}function Qu(e,t){if(50<$u)throw $u=0,Wu=null,Error(o(185));if(null!==(e=Ku(e,t))){var n=Mi();1073741823===t?0!=(8&Su)&&0==(48&Su)?Ju(e):(Xu(e),0===Su&&Vi()):Xu(e),0==(4&Su)||98!==n&&99!==n||(null===Uu?Uu=new Map([[e,t]]):(void 0===(n=Uu.get(e))||n>t)&&Uu.set(e,t))}}function Ku(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,i=null;if(null===r&&3===e.tag)i=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){i=r.stateNode;break}r=r.return}return null!==i&&(xu===i&&(ol(t),Tu===wu&&Ll(i,Eu)),zl(i,t)),i}function Yu(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!Rl(e,t=e.firstPendingTime))return t;var n=e.lastPingedTime;return 2>=(e=n>(e=e.nextKnownPendingLevel)?n:e)&&t!==e?0:e}function Xu(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Wi(Ju.bind(null,e));else{var t=Yu(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=Hu();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var i=e.callbackPriority;if(e.callbackExpirationTime===t&&i>=r)return;n!==Ri&&Si(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Wi(Ju.bind(null,e)):$i(r,Zu.bind(null,e),{timeout:10*(1073741821-t)-Bi()}),e.callbackNode=t}}}function Zu(e,t){if(Vu=0,t)return Nl(e,t=Hu()),Xu(e),null;var n=Yu(e);if(0!==n){if(t=e.callbackNode,0!=(48&Su))throw Error(o(327));if(hl(),e===xu&&n===Eu||nl(e,n),null!==Cu){var r=Su;Su|=16;for(var i=il();;)try{ll();break}catch(t){rl(e,t)}if(Ji(),Su=r,yu.current=i,1===Tu)throw t=Au,nl(e,n),Ll(e,n),Xu(e),t;if(null===Cu)switch(i=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Tu,xu=null,r){case _u:case 1:throw Error(o(345));case 2:Nl(e,2<n?2:n);break;case ku:if(Ll(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fl(i)),1073741823===Pu&&10<(i=zu+500-Bi())){if(Lu){var a=e.lastPingedTime;if(0===a||a>=n){e.lastPingedTime=n,nl(e,n);break}}if(0!==(a=Yu(e))&&a!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=bn(dl.bind(null,e),i);break}dl(e);break;case wu:if(Ll(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fl(i)),Lu&&(0===(i=e.lastPingedTime)||i>=n)){e.lastPingedTime=n,nl(e,n);break}if(0!==(i=Yu(e))&&i!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==Ou?r=10*(1073741821-Ou)-Bi():1073741823===Pu?r=0:(r=10*(1073741821-Pu)-5e3,0>(r=(i=Bi())-r)&&(r=0),(n=10*(1073741821-n)-i)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*vu(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=bn(dl.bind(null,e),r);break}dl(e);break;case 5:if(1073741823!==Pu&&null!==Fu){a=Pu;var u=Fu;if(0>=(r=0|u.busyMinDurationMs)?r=0:(i=0|u.busyDelayMs,r=(a=Bi()-(10*(1073741821-a)-(0|u.timeoutMs||5e3)))<=i?0:i+r-a),10<r){Ll(e,n),e.timeoutHandle=bn(dl.bind(null,e),r);break}}dl(e);break;default:throw Error(o(329))}if(Xu(e),e.callbackNode===t)return Zu.bind(null,e)}}return null}function Ju(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!=(48&Su))throw Error(o(327));if(hl(),e===xu&&t===Eu||nl(e,t),null!==Cu){var n=Su;Su|=16;for(var r=il();;)try{ul();break}catch(t){rl(e,t)}if(Ji(),Su=n,yu.current=r,1===Tu)throw n=Au,nl(e,t),Ll(e,t),Xu(e),n;if(null!==Cu)throw Error(o(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,xu=null,dl(e),Xu(e)}return null}function el(e,t){var n=Su;Su|=1;try{return e(t)}finally{0===(Su=n)&&Vi()}}function tl(e,t){var n=Su;Su&=-2,Su|=8;try{return e(t)}finally{0===(Su=n)&&Vi()}}function nl(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,_n(n)),null!==Cu)for(n=Cu.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&mi();break;case 3:Ra(),li(di),li(fi);break;case 5:za(r);break;case 4:Ra();break;case 13:case 19:li(Na);break;case 10:ea(r)}n=n.return}xu=e,Cu=El(e.current,null),Eu=t,Tu=_u,Au=null,Ou=Pu=1073741823,Fu=null,Ru=0,Lu=!1}function rl(e,t){for(;;){try{if(Ji(),Ia.current=mo,Wa)for(var n=qa.memoizedState;null!==n;){var r=n.queue;null!==r&&(r.pending=null),n=n.next}if(Ma=0,$a=Ua=qa=null,Wa=!1,null===Cu||null===Cu.return)return Tu=1,Au=t,Cu=null;e:{var i=e,a=Cu.return,o=Cu,u=t;if(t=Eu,o.effectTag|=2048,o.firstEffect=o.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var l=u;if(0==(2&o.mode)){var c=o.alternate;c?(o.updateQueue=c.updateQueue,o.memoizedState=c.memoizedState,o.expirationTime=c.expirationTime):(o.updateQueue=null,o.memoizedState=null)}var s=0!=(1&Na.current),f=a;do{var d;if(d=13===f.tag){var p=f.memoizedState;if(null!==p)d=null!==p.dehydrated;else{var g=f.memoizedProps;d=void 0!==g.fallback&&(!0!==g.unstable_avoidThisFallback||!s)}}if(d){var h=f.updateQueue;if(null===h){var m=new Set;m.add(l),f.updateQueue=m}else h.add(l);if(0==(2&f.mode)){if(f.effectTag|=64,o.effectTag&=-2981,1===o.tag)if(null===o.alternate)o.tag=17;else{var v=ua(1073741823,null);v.tag=2,la(o,v)}o.expirationTime=1073741823;break e}u=void 0,o=t;var y=i.pingCache;if(null===y?(y=i.pingCache=new pu,u=new Set,y.set(l,u)):void 0===(u=y.get(l))&&(u=new Set,y.set(l,u)),!u.has(o)){u.add(o);var b=bl.bind(null,i,l,o);l.then(b,b)}f.effectTag|=4096,f.expirationTime=t;break e}f=f.return}while(null!==f);u=Error((me(o.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ve(o))}5!==Tu&&(Tu=2),u=Zo(u,o),f=a;do{switch(f.tag){case 3:l=u,f.effectTag|=4096,f.expirationTime=t,ca(f,gu(f,l,t));break e;case 1:l=u;var _=f.type,k=f.stateNode;if(0==(64&f.effectTag)&&("function"==typeof _.getDerivedStateFromError||null!==k&&"function"==typeof k.componentDidCatch&&(null===Iu||!Iu.has(k)))){f.effectTag|=4096,f.expirationTime=t,ca(f,hu(f,l,t));break e}}f=f.return}while(null!==f)}Cu=sl(Cu)}catch(e){t=e;continue}break}}function il(){var e=yu.current;return yu.current=mo,null===e?mo:e}function al(e,t){e<Pu&&2<e&&(Pu=e),null!==t&&e<Ou&&2<e&&(Ou=e,Fu=t)}function ol(e){e>Ru&&(Ru=e)}function ul(){for(;null!==Cu;)Cu=cl(Cu)}function ll(){for(;null!==Cu&&!Li();)Cu=cl(Cu)}function cl(e){var t=mu(e.alternate,e,Eu);return e.memoizedProps=e.pendingProps,null===t&&(t=sl(e)),bu.current=null,t}function sl(e){Cu=e;do{var t=Cu.alternate;if(e=Cu.return,0==(2048&Cu.effectTag)){if(t=Yo(t,Cu,Eu),1===Eu||1!==Cu.childExpirationTime){for(var n=0,r=Cu.child;null!==r;){var i=r.expirationTime,a=r.childExpirationTime;i>n&&(n=i),a>n&&(n=a),r=r.sibling}Cu.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Cu.firstEffect),null!==Cu.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Cu.firstEffect),e.lastEffect=Cu.lastEffect),1<Cu.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Cu:e.firstEffect=Cu,e.lastEffect=Cu))}else{if(null!==(t=Xo(Cu)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Cu.sibling))return t;Cu=e}while(null!==Cu);return Tu===_u&&(Tu=5),null}function fl(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function dl(e){var t=Mi();return Ui(99,pl.bind(null,e,t)),null}function pl(e,t){do{hl()}while(null!==Mu);if(0!=(48&Su))throw Error(o(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(o(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var i=fl(n);if(e.firstPendingTime=i,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===xu&&(Cu=xu=null,Eu=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,i=n.firstEffect):i=n:i=n.firstEffect,null!==i){var a=Su;Su|=32,bu.current=null,hn=Ht;var u=pn();if(gn(u)){if("selectionStart"in u)var l={start:u.selectionStart,end:u.selectionEnd};else e:{var c=(l=(l=u.ownerDocument)&&l.defaultView||window).getSelection&&l.getSelection();if(c&&0!==c.rangeCount){l=c.anchorNode;var s=c.anchorOffset,f=c.focusNode;c=c.focusOffset;try{l.nodeType,f.nodeType}catch(e){l=null;break e}var d=0,p=-1,g=-1,h=0,m=0,v=u,y=null;t:for(;;){for(var b;v!==l||0!==s&&3!==v.nodeType||(p=d+s),v!==f||0!==c&&3!==v.nodeType||(g=d+c),3===v.nodeType&&(d+=v.nodeValue.length),null!==(b=v.firstChild);)y=v,v=b;for(;;){if(v===u)break t;if(y===l&&++h===s&&(p=d),y===f&&++m===c&&(g=d),null!==(b=v.nextSibling))break;y=(v=y).parentNode}v=b}l=-1===p||-1===g?null:{start:p,end:g}}else l=null}l=l||{start:0,end:0}}else l=null;mn={activeElementDetached:null,focusedElem:u,selectionRange:l},Ht=!1,Nu=i;do{try{gl()}catch(e){if(null===Nu)throw Error(o(330));yl(Nu,e),Nu=Nu.nextEffect}}while(null!==Nu);Nu=i;do{try{for(u=e,l=t;null!==Nu;){var _=Nu.effectTag;if(16&_&&Me(Nu.stateNode,""),128&_){var k=Nu.alternate;if(null!==k){var w=k.ref;null!==w&&("function"==typeof w?w(null):w.current=null)}}switch(1038&_){case 2:cu(Nu),Nu.effectTag&=-3;break;case 6:cu(Nu),Nu.effectTag&=-3,fu(Nu.alternate,Nu);break;case 1024:Nu.effectTag&=-1025;break;case 1028:Nu.effectTag&=-1025,fu(Nu.alternate,Nu);break;case 4:fu(Nu.alternate,Nu);break;case 8:su(u,s=Nu,l),uu(s)}Nu=Nu.nextEffect}}catch(e){if(null===Nu)throw Error(o(330));yl(Nu,e),Nu=Nu.nextEffect}}while(null!==Nu);if(w=mn,k=pn(),_=w.focusedElem,l=w.selectionRange,k!==_&&_&&_.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(_.ownerDocument.documentElement,_)){null!==l&&gn(_)&&(k=l.start,void 0===(w=l.end)&&(w=k),"selectionStart"in _?(_.selectionStart=k,_.selectionEnd=Math.min(w,_.value.length)):(w=(k=_.ownerDocument||document)&&k.defaultView||window).getSelection&&(w=w.getSelection(),s=_.textContent.length,u=Math.min(l.start,s),l=void 0===l.end?u:Math.min(l.end,s),!w.extend&&u>l&&(s=l,l=u,u=s),s=dn(_,u),f=dn(_,l),s&&f&&(1!==w.rangeCount||w.anchorNode!==s.node||w.anchorOffset!==s.offset||w.focusNode!==f.node||w.focusOffset!==f.offset)&&((k=k.createRange()).setStart(s.node,s.offset),w.removeAllRanges(),u>l?(w.addRange(k),w.extend(f.node,f.offset)):(k.setEnd(f.node,f.offset),w.addRange(k))))),k=[];for(w=_;w=w.parentNode;)1===w.nodeType&&k.push({element:w,left:w.scrollLeft,top:w.scrollTop});for("function"==typeof _.focus&&_.focus(),_=0;_<k.length;_++)(w=k[_]).element.scrollLeft=w.left,w.element.scrollTop=w.top}Ht=!!hn,mn=hn=null,e.current=n,Nu=i;do{try{for(_=e;null!==Nu;){var S=Nu.effectTag;if(36&S&&au(_,Nu.alternate,Nu),128&S){k=void 0;var x=Nu.ref;if(null!==x){var C=Nu.stateNode;switch(Nu.tag){case 5:k=C;break;default:k=C}"function"==typeof x?x(k):x.current=k}}Nu=Nu.nextEffect}}catch(e){if(null===Nu)throw Error(o(330));yl(Nu,e),Nu=Nu.nextEffect}}while(null!==Nu);Nu=null,zi(),Su=a}else e.current=n;if(Bu)Bu=!1,Mu=e,qu=t;else for(Nu=i;null!==Nu;)t=Nu.nextEffect,Nu.nextEffect=null,Nu=t;if(0===(t=e.firstPendingTime)&&(Iu=null),1073741823===t?e===Wu?$u++:($u=0,Wu=e):$u=0,"function"==typeof kl&&kl(n.stateNode,r),Xu(e),Du)throw Du=!1,e=ju,ju=null,e;return 0!=(8&Su)||Vi(),null}function gl(){for(;null!==Nu;){var e=Nu.effectTag;0!=(256&e)&&nu(Nu.alternate,Nu),0==(512&e)||Bu||(Bu=!0,$i(97,(function(){return hl(),null}))),Nu=Nu.nextEffect}}function hl(){if(90!==qu){var e=97<qu?97:qu;return qu=90,Ui(e,ml)}}function ml(){if(null===Mu)return!1;var e=Mu;if(Mu=null,0!=(48&Su))throw Error(o(331));var t=Su;for(Su|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:case 22:ru(5,n),iu(5,n)}}catch(t){if(null===e)throw Error(o(330));yl(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return Su=t,Vi(),!0}function vl(e,t,n){la(e,t=gu(e,t=Zo(n,t),1073741823)),null!==(e=Ku(e,1073741823))&&Xu(e)}function yl(e,t){if(3===e.tag)vl(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){vl(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Iu||!Iu.has(r))){la(n,e=hu(n,e=Zo(t,e),1073741823)),null!==(n=Ku(n,1073741823))&&Xu(n);break}}n=n.return}}function bl(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),xu===e&&Eu===n?Tu===wu||Tu===ku&&1073741823===Pu&&Bi()-zu<500?nl(e,Eu):Lu=!0:Rl(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,Xu(e)))}function _l(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=Gu(t=Hu(),e,null)),null!==(e=Ku(e,t))&&Xu(e)}mu=function(e,t,n){var r=t.expirationTime;if(null!==e){var i=t.pendingProps;if(e.memoizedProps!==i||di.current)Oo=!0;else{if(r<n){switch(Oo=!1,t.tag){case 3:Bo(t),Ao();break;case 5:if(La(t),4&t.mode&&1!==n&&i.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:hi(t.type)&&bi(t);break;case 4:Fa(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value,i=t.type._context,ci(Ki,i._currentValue),i._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Wo(e,t,n):(ci(Na,1&Na.current),null!==(t=Qo(e,t,n))?t.sibling:null);ci(Na,1&Na.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return Go(e,t,n);t.effectTag|=64}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null),ci(Na,Na.current),!r)return null}return Qo(e,t,n)}Oo=!1}}else Oo=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,i=gi(t,fi.current),na(t,n),i=Ga(null,t,r,e,i,n),t.effectTag|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,hi(r)){var a=!0;bi(t)}else a=!1;t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,aa(t);var u=r.getDerivedStateFromProps;"function"==typeof u&&ga(t,r,u,e),i.updater=ha,t.stateNode=i,i._reactInternalFiber=t,ba(t,r,e,n),t=Io(null,t,r,!0,a,n)}else t.tag=0,Fo(null,t,i,n),t=t.child;return t;case 16:e:{if(i=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(i),1!==i._status)throw i._result;switch(i=i._result,t.type=i,a=t.tag=function(e){if("function"==typeof e)return Cl(e)?1:0;if(null!=e){if((e=e.$$typeof)===le)return 11;if(e===fe)return 14}return 2}(i),e=Qi(i,e),a){case 0:t=Do(null,t,i,e,n);break e;case 1:t=jo(null,t,i,e,n);break e;case 11:t=Ro(null,t,i,e,n);break e;case 14:t=Lo(null,t,i,Qi(i.type,e),r,n);break e}throw Error(o(306,i,""))}return t;case 0:return r=t.type,i=t.pendingProps,Do(e,t,r,i=t.elementType===r?i:Qi(r,i),n);case 1:return r=t.type,i=t.pendingProps,jo(e,t,r,i=t.elementType===r?i:Qi(r,i),n);case 3:if(Bo(t),r=t.updateQueue,null===e||null===r)throw Error(o(282));if(r=t.pendingProps,i=null!==(i=t.memoizedState)?i.element:null,oa(e,t),sa(t,r,null,n),(r=t.memoizedState.element)===i)Ao(),t=Qo(e,t,n);else{if((i=t.stateNode.hydrate)&&(ko=kn(t.stateNode.containerInfo.firstChild),_o=t,i=wo=!0),i)for(n=Ca(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else Fo(e,t,r,n),Ao();t=t.child}return t;case 5:return La(t),null===e&&Co(t),r=t.type,i=t.pendingProps,a=null!==e?e.memoizedProps:null,u=i.children,yn(r,i)?u=null:null!==a&&yn(r,a)&&(t.effectTag|=16),No(e,t),4&t.mode&&1!==n&&i.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Fo(e,t,u,n),t=t.child),t;case 6:return null===e&&Co(t),null;case 13:return Wo(e,t,n);case 4:return Fa(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=xa(t,null,r,n):Fo(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,Ro(e,t,r,i=t.elementType===r?i:Qi(r,i),n);case 7:return Fo(e,t,t.pendingProps,n),t.child;case 8:case 12:return Fo(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,i=t.pendingProps,u=t.memoizedProps,a=i.value;var l=t.type._context;if(ci(Ki,l._currentValue),l._currentValue=a,null!==u)if(l=u.value,0===(a=jr(l,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,a):1073741823))){if(u.children===i.children&&!di.current){t=Qo(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var c=l.dependencies;if(null!==c){u=l.child;for(var s=c.firstContext;null!==s;){if(s.context===r&&0!=(s.observedBits&a)){1===l.tag&&((s=ua(n,null)).tag=2,la(l,s)),l.expirationTime<n&&(l.expirationTime=n),null!==(s=l.alternate)&&s.expirationTime<n&&(s.expirationTime=n),ta(l.return,n),c.expirationTime<n&&(c.expirationTime=n);break}s=s.next}}else u=10===l.tag&&l.type===t.type?null:l.child;if(null!==u)u.return=l;else for(u=l;null!==u;){if(u===t){u=null;break}if(null!==(l=u.sibling)){l.return=u.return,u=l;break}u=u.return}l=u}Fo(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=(a=t.pendingProps).children,na(t,n),r=r(i=ra(i,a.unstable_observedBits)),t.effectTag|=1,Fo(e,t,r,n),t.child;case 14:return a=Qi(i=t.type,t.pendingProps),Lo(e,t,i,a=Qi(i.type,a),r,n);case 15:return zo(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:Qi(r,i),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,hi(r)?(e=!0,bi(t)):e=!1,na(t,n),va(t,r,i),ba(t,r,i,n),Io(null,t,r,!0,e,n);case 19:return Go(e,t,n)}throw Error(o(156,t.tag))};var kl=null,wl=null;function Sl(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function xl(e,t,n,r){return new Sl(e,t,n,r)}function Cl(e){return!(!(e=e.prototype)||!e.isReactComponent)}function El(e,t){var n=e.alternate;return null===n?((n=xl(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Tl(e,t,n,r,i,a){var u=2;if(r=e,"function"==typeof e)Cl(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case ne:return Al(n.children,i,a,t);case ue:u=8,i|=7;break;case re:u=8,i|=1;break;case ie:return(e=xl(12,n,t,8|i)).elementType=ie,e.type=ie,e.expirationTime=a,e;case ce:return(e=xl(13,n,t,i)).type=ce,e.elementType=ce,e.expirationTime=a,e;case se:return(e=xl(19,n,t,i)).elementType=se,e.expirationTime=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case ae:u=10;break e;case oe:u=9;break e;case le:u=11;break e;case fe:u=14;break e;case de:u=16,r=null;break e;case pe:u=22;break e}throw Error(o(130,null==e?e:typeof e,""))}return(t=xl(u,n,t,i)).elementType=e,t.type=r,t.expirationTime=a,t}function Al(e,t,n,r){return(e=xl(7,e,r,t)).expirationTime=n,e}function Pl(e,t,n){return(e=xl(6,e,null,t)).expirationTime=n,e}function Ol(e,t,n){return(t=xl(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Fl(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Rl(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Ll(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function zl(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Nl(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Dl(e,t,n,r){var i=t.current,a=Hu(),u=da.suspense;a=Gu(a,i,u);e:if(n){t:{if(Je(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(o(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(hi(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(o(171))}if(1===n.tag){var c=n.type;if(hi(c)){n=yi(n,c,l);break e}}n=l}else n=si;return null===t.context?t.context=n:t.pendingContext=n,(t=ua(a,u)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),la(i,t),Qu(i,a),a}function jl(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Il(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function Bl(e,t){Il(e,t),(e=e.alternate)&&Il(e,t)}function Ml(e,t,n){var r=new Fl(e,t,n=null!=n&&!0===n.hydrate),i=xl(3,null,null,2===t?7:1===t?3:0);r.current=i,i.stateNode=r,aa(i),e[En]=r.current,n&&0!==t&&function(e,t){var n=Ze(t);Et.forEach((function(e){gt(e,t,n)})),Tt.forEach((function(e){gt(e,t,n)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function ql(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Ul(e,t,n,r,i){var a=n._reactRootContainer;if(a){var o=a._internalRoot;if("function"==typeof i){var u=i;i=function(){var e=jl(o);u.call(e)}}Dl(t,o,e,i)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Ml(e,0,t?{hydrate:!0}:void 0)}(n,r),o=a._internalRoot,"function"==typeof i){var l=i;i=function(){var e=jl(o);l.call(e)}}tl((function(){Dl(t,o,e,i)}))}return jl(o)}function $l(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Wl(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!ql(t))throw Error(o(200));return $l(e,t,null,n)}Ml.prototype.render=function(e){Dl(e,this._internalRoot,null,null)},Ml.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Dl(null,e,null,(function(){t[En]=null}))},ht=function(e){if(13===e.tag){var t=Gi(Hu(),150,100);Qu(e,t),Bl(e,t)}},mt=function(e){13===e.tag&&(Qu(e,3),Bl(e,3))},vt=function(e){if(13===e.tag){var t=Hu();Qu(e,t=Gu(t,e,null)),Bl(e,t)}},A=function(e,t,n){switch(t){case"input":if(Ce(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=On(r);if(!i)throw Error(o(90));ke(r),Ce(r,i)}}}break;case"textarea":Re(e,n);break;case"select":null!=(t=n.value)&&Pe(e,!!n.multiple,t,!1)}},z=el,N=function(e,t,n,r,i){var a=Su;Su|=4;try{return Ui(98,e.bind(null,t,n,r,i))}finally{0===(Su=a)&&Vi()}},D=function(){0==(49&Su)&&(function(){if(null!==Uu){var e=Uu;Uu=null,e.forEach((function(e,t){Nl(t,e),Xu(t)})),Vi()}}(),hl())},j=function(e,t){var n=Su;Su|=2;try{return e(t)}finally{0===(Su=n)&&Vi()}};var Vl,Hl,Gl={Events:[An,Pn,On,E,S,jn,function(e){it(e,Dn)},R,L,Xt,ut,hl,{current:!1}]};Hl=(Vl={findFiberByHostInstance:Tn,bundleType:0,version:"16.13.1",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);kl=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},wl=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(i({},Vl,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Y.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=nt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return Hl?Hl(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null})),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Gl,t.createPortal=Wl,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(o(188));throw Error(o(268,Object.keys(e)))}return e=null===(e=nt(t))?null:e.stateNode},t.flushSync=function(e,t){if(0!=(48&Su))throw Error(o(187));var n=Su;Su|=1;try{return Ui(99,e.bind(null,t))}finally{Su=n,Vi()}},t.hydrate=function(e,t,n){if(!ql(t))throw Error(o(200));return Ul(null,e,t,!0,n)},t.render=function(e,t,n){if(!ql(t))throw Error(o(200));return Ul(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!ql(e))throw Error(o(40));return!!e._reactRootContainer&&(tl((function(){Ul(null,null,e,!1,(function(){e._reactRootContainer=null,e[En]=null}))})),!0)},t.unstable_batchedUpdates=el,t.unstable_createPortal=function(e,t){return Wl(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!ql(n))throw Error(o(200));if(null==e||void 0===e._reactInternalFiber)throw Error(o(38));return Ul(e,t,n,!1,r)},t.version="16.13.1"},function(e,t,n){"use strict";e.exports=n(50)},function(e,t,n){"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,i,a,o,u;if("undefined"==typeof window||"function"!=typeof MessageChannel){var l=null,c=null,s=function(){if(null!==l)try{var e=t.unstable_now();l(!0,e),l=null}catch(e){throw setTimeout(s,0),e}},f=Date.now();t.unstable_now=function(){return Date.now()-f},r=function(e){null!==l?setTimeout(r,0,e):(l=e,setTimeout(s,0))},i=function(e,t){c=setTimeout(e,t)},a=function(){clearTimeout(c)},o=function(){return!1},u=t.unstable_forceFrameRate=function(){}}else{var d=window.performance,p=window.Date,g=window.setTimeout,h=window.clearTimeout;if("undefined"!=typeof console){var m=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof m&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof d&&"function"==typeof d.now)t.unstable_now=function(){return d.now()};else{var v=p.now();t.unstable_now=function(){return p.now()-v}}var y=!1,b=null,_=-1,k=5,w=0;o=function(){return t.unstable_now()>=w},u=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):k=0<e?Math.floor(1e3/e):5};var S=new MessageChannel,x=S.port2;S.port1.onmessage=function(){if(null!==b){var e=t.unstable_now();w=e+k;try{b(!0,e)?x.postMessage(null):(y=!1,b=null)}catch(e){throw x.postMessage(null),e}}else y=!1},r=function(e){b=e,y||(y=!0,x.postMessage(null))},i=function(e,n){_=g((function(){e(t.unstable_now())}),n)},a=function(){h(_),_=-1}}function C(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,i=e[r];if(!(void 0!==i&&0<A(i,t)))break e;e[r]=t,e[n]=i,n=r}}function E(e){return void 0===(e=e[0])?null:e}function T(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length;r<i;){var a=2*(r+1)-1,o=e[a],u=a+1,l=e[u];if(void 0!==o&&0>A(o,n))void 0!==l&&0>A(l,o)?(e[r]=l,e[u]=n,r=u):(e[r]=o,e[a]=n,r=a);else{if(!(void 0!==l&&0>A(l,n)))break e;e[r]=l,e[u]=n,r=u}}}return t}return null}function A(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var P=[],O=[],F=1,R=null,L=3,z=!1,N=!1,D=!1;function j(e){for(var t=E(O);null!==t;){if(null===t.callback)T(O);else{if(!(t.startTime<=e))break;T(O),t.sortIndex=t.expirationTime,C(P,t)}t=E(O)}}function I(e){if(D=!1,j(e),!N)if(null!==E(P))N=!0,r(B);else{var t=E(O);null!==t&&i(I,t.startTime-e)}}function B(e,n){N=!1,D&&(D=!1,a()),z=!0;var r=L;try{for(j(n),R=E(P);null!==R&&(!(R.expirationTime>n)||e&&!o());){var u=R.callback;if(null!==u){R.callback=null,L=R.priorityLevel;var l=u(R.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?R.callback=l:R===E(P)&&T(P),j(n)}else T(P);R=E(P)}if(null!==R)var c=!0;else{var s=E(O);null!==s&&i(I,s.startTime-n),c=!1}return c}finally{R=null,L=r,z=!1}}function M(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var q=u;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){N||z||(N=!0,r(B))},t.unstable_getCurrentPriorityLevel=function(){return L},t.unstable_getFirstCallbackNode=function(){return E(P)},t.unstable_next=function(e){switch(L){case 1:case 2:case 3:var t=3;break;default:t=L}var n=L;L=t;try{return e()}finally{L=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=q,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=L;L=e;try{return t()}finally{L=n}},t.unstable_scheduleCallback=function(e,n,o){var u=t.unstable_now();if("object"==typeof o&&null!==o){var l=o.delay;l="number"==typeof l&&0<l?u+l:u,o="number"==typeof o.timeout?o.timeout:M(e)}else o=M(e),l=u;return e={id:F++,callback:n,priorityLevel:e,startTime:l,expirationTime:o=l+o,sortIndex:-1},l>u?(e.sortIndex=l,C(O,e),null===E(P)&&e===E(O)&&(D?a():D=!0,i(I,l-u))):(e.sortIndex=o,C(P,e),N||z||(N=!0,r(B))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();j(e);var n=E(P);return n!==R&&null!==R&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<R.expirationTime||o()},t.unstable_wrapCallback=function(e){var t=L;return function(){var n=L;L=t;try{return e.apply(this,arguments)}finally{L=n}}}},function(e,t,n){"use strict";var r=n(0),i=n(52),a=n(87),o=n(99),u=n(101),l=n(7),c=n(103),s=n(105),f=n(107),d=n(108),p=n(109),g=document.createElement("style");document.head.appendChild(g),g.innerHTML=d.globalStyles;var h=function(e){var t,n=f.appRoutesConfig(0);if("number"==typeof n)switch(n){case 0:t=r.createElement(i.make,{});break;case 1:t=r.createElement(o.make,{});break;case 2:t=r.createElement(p.make,{});break;case 3:t=l.textEl("Not found")}else t=r.createElement(a.make,{slug:n[0]});return r.createElement(u.make,{children:r.createElement("main",{className:"wrapper",style:{background:"#fff",display:"grid",margin:"0 auto",maxWidth:"50%",minHeight:"100%",position:"relative",zIndex:"10",gridTemplateRows:"auto 1fr auto"}},r.createElement(s.make,{}),t,r.createElement(c.make,{}))})};t.applyToHeadEl=g,t.make=h},function(e,t,n){"use strict";var r=n(0),i=n(16),a=n(15),o=n(43),u=n(24),l=n(7),c=n(5),s=n(86);var f=function(e){var t=o.useSelector((function(e){return e.fileSystemState.loading})),n=o.useSelector((function(e){return e.fileSystemState.dir}));o.useSelector((function(e){return e.fileSystemState.errors}));var f=o.useSelector((function(e){return e.fileSystemState.description}));return r.useEffect((function(){l.ReduxUtils.dispatch("@@filesystem/LOAD")}),[]),r.createElement(c.make,{children:t?r.createElement("span",void 0,l.textEl("Loading")):r.createElement("ul",{className:s.Styles.list},i.mapWithIndex(n,(function(e,t){var n=String(t),i=String(a.caml_array_get(f,e));return r.createElement("li",{key:String(e)},r.createElement(u.make,{href:"/#/post/"+n,children:l.textEl(n)}),r.createElement("span",{className:"abstract-description"},l.textEl(i)))})))})};t.make=f},function(e,t,n){"use strict";var r=n(54);function i(e){return e>r.max?r.max:e<r.min?r.min:Math.ceil(e)}function a(e){return e>r.max?r.max:e<r.min?r.min:Math.floor(e)}var o=i,u=a;t.unsafe_ceil=function(e){return Math.ceil(e)},t.ceil_int=i,t.ceil=o,t.unsafe_floor=function(e){return Math.floor(e)},t.floor_int=a,t.floor=u,t.random_int=function(e,t){return a(Math.random()*(t-e|0))+e|0}},function(e,t,n){"use strict";t.equal=function(e,t){return e===t},t.max=2147483647,t.min=-2147483648},function(e,t,n){e.exports=n(56)()},function(e,t,n){"use strict";var r=n(57);function i(){}function a(){}a.resetWarningCache=i,e.exports=function(){function e(e,t,n,i,a,o){if(o!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:i};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,i=r?Symbol.for("react.element"):60103,a=r?Symbol.for("react.portal"):60106,o=r?Symbol.for("react.fragment"):60107,u=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,g=r?Symbol.for("react.suspense"):60113,h=r?Symbol.for("react.suspense_list"):60120,m=r?Symbol.for("react.memo"):60115,v=r?Symbol.for("react.lazy"):60116,y=r?Symbol.for("react.block"):60121,b=r?Symbol.for("react.fundamental"):60117,_=r?Symbol.for("react.responder"):60118,k=r?Symbol.for("react.scope"):60119;function w(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case i:switch(e=e.type){case f:case d:case o:case l:case u:case g:return e;default:switch(e=e&&e.$$typeof){case s:case p:case v:case m:case c:return e;default:return t}}case a:return t}}}function S(e){return w(e)===d}t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=s,t.ContextProvider=c,t.Element=i,t.ForwardRef=p,t.Fragment=o,t.Lazy=v,t.Memo=m,t.Portal=a,t.Profiler=l,t.StrictMode=u,t.Suspense=g,t.isAsyncMode=function(e){return S(e)||w(e)===f},t.isConcurrentMode=S,t.isContextConsumer=function(e){return w(e)===s},t.isContextProvider=function(e){return w(e)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===i},t.isForwardRef=function(e){return w(e)===p},t.isFragment=function(e){return w(e)===o},t.isLazy=function(e){return w(e)===v},t.isMemo=function(e){return w(e)===m},t.isPortal=function(e){return w(e)===a},t.isProfiler=function(e){return w(e)===l},t.isStrictMode=function(e){return w(e)===u},t.isSuspense=function(e){return w(e)===g},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===d||e===l||e===u||e===g||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===m||e.$$typeof===c||e.$$typeof===s||e.$$typeof===p||e.$$typeof===b||e.$$typeof===_||e.$$typeof===k||e.$$typeof===y)},t.typeOf=w},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";t.__esModule=!0;var r=n(12),i=n(61),a=n(64);t.RootReducers=r.combineReducers({countState:i.countReducer,fileSystemState:a.fileSystemReducer})},function(e,t,n){"use strict";t.__esModule=!0;var r=n(10),i={count:0};t.countReducer=function(e,t){switch(void 0===e&&(e=i),t.type){case r.CountActionTypes.INCREMENT:return{count:e.count+1};case r.CountActionTypes.DECREMENT:return{count:e.count-1};default:return e}}},function(e,t,n){"use strict";t.__esModule=!0,function(e){e.INCREMENT="@@count/INCREMENT",e.DECREMENT="@@count/DECREMENT"}(t.CountActionTypes||(t.CountActionTypes={}))},function(e,t,n){"use strict";t.__esModule=!0,function(e){e.REQUEST="@@filesystem/REQUEST",e.LOAD="@@filesystem/LOAD",e.ERROR="@@filesystem/ERROR"}(t.FileSystemActionTypes||(t.FileSystemActionTypes={}))},function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};t.__esModule=!0;var i=n(10),a={loading:!1,errors:void 0,dir:[],description:[]};t.fileSystemReducer=function(e,t){switch(void 0===e&&(e=a),t.type){case i.FileSystemActionTypes.REQUEST:return r(r({},e),{loading:!0});case i.FileSystemActionTypes.LOAD:return r(r({},e),{loading:!1,dir:t.payload.data,description:t.payload.article_description});case i.FileSystemActionTypes.ERROR:return r(r({},e),{loading:!1,errors:t.payload.message});default:return e}}},function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}t.__esModule=!0,r(n(66)),r(n(67))},function(e,t,n){"use strict";t.__esModule=!0;var r=n(10),i=n(26);t.increment=function(){return i.action(r.CountActionTypes.INCREMENT)},t.decrement=function(){return i.action(r.CountActionTypes.DECREMENT)}},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,a){function o(e){try{l(r.next(e))}catch(e){a(e)}}function u(e){try{l(r.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,u)}l((r=r.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function u(a){return function(u){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(i=o.trys,(i=i.length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}};t.__esModule=!0;var a=n(10),o=n(26),u=n(27),l=n(27);t.fetch_request=function(){return o.action(a.FileSystemActionTypes.REQUEST)},t.fetch_dir=function(){return function(e){return r(void 0,void 0,void 0,(function(){return i(this,(function(n){switch(n.label){case 0:return e(t.fetch_request()),[4,l.findDirectory("../../../posts/").then((function(t){u.findMarkdownPath(t).then((function(n){e({type:a.FileSystemActionTypes.LOAD,payload:{data:t,article_description:n}})}))})).catch((function(t){e({type:a.FileSystemActionTypes.ERROR,payload:{message:t}})}))];case 1:return n.sent(),[2]}}))}))}}},function(e,t,n){"use strict";function r(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(i){return"function"==typeof i?i(n,r,e):t(i)}}}}n.r(t);var i=r();i.withExtraArgument=r,t.default=i},function(e,t,n){"use strict";var r=n(4),i={container:r.style([r.margin2([25096,0],-1065951377),[r.maxWidth([22632,41]),[r.width([-119887163,92]),[r.padding2([25096,10],[25096,0]),0]]]])};t.Styles=i},function(e,t,n){"use strict";var r=n(2),i=n(71),a=n(72),o=n(11),u=n(73),l=n(75),c=n(18),s=n(33),f=n(76),d=n(1),p=n(77);var g=c.create("Pervasives.Exit");function h(e){try{return u.caml_int_of_string(e)}catch(e){var t=s.internalToOCamlException(e);if(t[0]===d.failure)return;throw t}}function m(e){for(var t=e.length,n=0;;){var r=n;if(r>=t)return e+".";var i=l.get(e,r);if(i>=48){if(i>=58)return e;n=r+1|0}else{if(45!==i)return e;n=r+1|0}}}function v(e){try{return u.caml_float_of_string(e)}catch(e){var t=s.internalToOCamlException(e);if(t[0]===d.failure)return;throw t}}var y=i.stdin,b=i.stdout,_=i.stderr;function k(e,t,n){var r=f.resolve("caml_ml_open_descriptor_out")(f.resolve("caml_sys_open")(n,e,t));return f.resolve("caml_ml_set_channel_name")(r,n),r}function w(e){for(var t=i.caml_ml_out_channels_list(0);;){var n=t;if(!n)return 0;try{i.caml_ml_flush(n[0])}catch(e){var r=s.internalToOCamlException(e);if(r[0]!==d.sys_error)throw r}t=n[1]}}function S(e,t){return f.resolve("caml_ml_output_bytes")(e,t,0,t.length)}function x(e,t){return i.caml_ml_output(e,t,0,t.length)}function C(e,t,n){var r=f.resolve("caml_ml_open_descriptor_in")(f.resolve("caml_sys_open")(n,e,t));return f.resolve("caml_ml_set_channel_name")(r,n),r}function E(e,t,n,r){for(;;){var i=r,a=n;if(i<=0)return 0;var o=f.resolve("caml_ml_input")(e,t,a,i);if(0===o)throw d.end_of_file;r=i-o|0,n=a+o|0}}function T(e,t,n,r){if(n<0||r<0||n>(t.length-r|0))throw[d.invalid_argument,"really_input"];return E(e,t,n,r)}function A(e){var t=function(e,t,n){for(;;){var r=n,i=t;if(!r)return e;var a=r[0],u=a.length;o.caml_blit_bytes(a,0,e,i-u|0,u),n=r[1],t=i-u|0}};return o.bytes_to_string(function(n,r){for(;;){var i=r,a=n,u=f.resolve("caml_ml_input_scan_line")(e);if(0===u){if(a)return t(o.caml_create_bytes(i),i,a);throw d.end_of_file}if(u>0){var l=o.caml_create_bytes(u-1|0);if(f.resolve("caml_ml_input")(e,l,0,u-1|0),f.resolve("caml_ml_input_char")(e),a){var c=(i+u|0)-1|0;return t(o.caml_create_bytes(c),c,[l,a])}return l}var s=o.caml_create_bytes(0|-u);f.resolve("caml_ml_input")(e,s,0,0|-u),r=i-u|0,n=[s,a]}}(0,0))}var P=[w];function O(e){return r._1(P[0],0)}var F=i.caml_ml_flush,R=i.caml_ml_output_char,L=i.caml_ml_output_char;var z={seek_out:function(e,t){return f.resolve("caml_ml_seek_out_64")(e,t)},pos_out:function(e){return f.resolve("caml_ml_pos_out_64")(e)},out_channel_length:function(e){return f.resolve("caml_ml_channel_size_64")(e)},seek_in:function(e,t){return f.resolve("caml_ml_seek_in_64")(e,t)},pos_in:function(e){return f.resolve("caml_ml_pos_in_64")(e)},in_channel_length:function(e){return f.resolve("caml_ml_channel_size_64")(e)}};t.invalid_arg=function(e){throw[d.invalid_argument,e]},t.failwith=function(e){throw[d.failure,e]},t.Exit=g,t.abs=function(e){return e>=0?e:0|-e},t.max_int=2147483647,t.min_int=-2147483648,t.lnot=function(e){return-1^e},t.infinity=1/0,t.neg_infinity=-1/0,t.max_float=17976931348623157e292,t.min_float=22250738585072014e-324,t.epsilon_float=2220446049250313e-31,t.classify_float=function(e){return isFinite(e)?Math.abs(e)>=22250738585072014e-324?0:0!==e?1:2:isNaN(e)?4:3},t.char_of_int=function(e){if(e<0||e>255)throw[d.invalid_argument,"char_of_int"];return e},t.string_of_bool=function(e){return e?"true":"false"},t.bool_of_string=function(e){switch(e){case"false":return!1;case"true":return!0;default:throw[d.invalid_argument,"bool_of_string"]}},t.bool_of_string_opt=function(e){switch(e){case"false":return!1;case"true":return!0;default:return}},t.int_of_string_opt=h,t.string_of_float=function(e){return m(u.caml_format_float("%.12g",e))},t.float_of_string_opt=v,t.$at=function e(t,n){return t?[t[0],e(t[1],n)]:n},t.stdin=y,t.stdout=b,t.stderr=_,t.print_char=function(e){return i.caml_ml_output_char(b,e)},t.print_string=function(e){return x(b,e)},t.print_bytes=function(e){return S(b,e)},t.print_int=function(e){return x(b,String(e))},t.print_float=function(e){return x(b,m(u.caml_format_float("%.12g",e)))},t.print_newline=function(e){return i.caml_ml_output_char(b,10),i.caml_ml_flush(b)},t.prerr_char=function(e){return i.caml_ml_output_char(_,e)},t.prerr_string=function(e){return x(_,e)},t.prerr_bytes=function(e){return S(_,e)},t.prerr_int=function(e){return x(_,String(e))},t.prerr_float=function(e){return x(_,m(u.caml_format_float("%.12g",e)))},t.prerr_newline=function(e){return i.caml_ml_output_char(_,10),i.caml_ml_flush(_)},t.read_line=function(e){return i.caml_ml_flush(b),A(y)},t.read_int=function(e){return u.caml_int_of_string((i.caml_ml_flush(b),A(y)))},t.read_int_opt=function(e){return h((i.caml_ml_flush(b),A(y)))},t.read_float=function(e){return u.caml_float_of_string((i.caml_ml_flush(b),A(y)))},t.read_float_opt=function(e){return v((i.caml_ml_flush(b),A(y)))},t.open_out=function(e){return k([1,[3,[4,[7,0]]]],438,e)},t.open_out_bin=function(e){return k([1,[3,[4,[6,0]]]],438,e)},t.open_out_gen=k,t.flush=F,t.flush_all=w,t.output_char=R,t.output_string=x,t.output_bytes=S,t.output=function(e,t,n,r){if(n<0||r<0||n>(t.length-r|0))throw[d.invalid_argument,"output"];return f.resolve("caml_ml_output_bytes")(e,t,n,r)},t.output_substring=function(e,t,n,r){if(n<0||r<0||n>(t.length-r|0))throw[d.invalid_argument,"output_substring"];return i.caml_ml_output(e,t,n,r)},t.output_byte=L,t.output_binary_int=function(e,t){return f.resolve("caml_ml_output_int")(e,t)},t.output_value=function(e,t){return f.resolve("caml_output_value")(e,t,0)},t.seek_out=function(e,t){return f.resolve("caml_ml_seek_out")(e,t)},t.pos_out=function(e){return f.resolve("caml_ml_pos_out")(e)},t.out_channel_length=function(e){return f.resolve("caml_ml_channel_size")(e)},t.close_out=function(e){return i.caml_ml_flush(e),f.resolve("caml_ml_close_channel")(e)},t.close_out_noerr=function(e){try{i.caml_ml_flush(e)}catch(e){}try{return f.resolve("caml_ml_close_channel")(e)}catch(e){return 0}},t.set_binary_mode_out=function(e,t){return f.resolve("caml_ml_set_binary_mode")(e,t)},t.open_in=function(e){return C([0,[7,0]],0,e)},t.open_in_bin=function(e){return C([0,[6,0]],0,e)},t.open_in_gen=C,t.input_char=function(e){return f.resolve("caml_ml_input_char")(e)},t.input_line=A,t.input=function(e,t,n,r){if(n<0||r<0||n>(t.length-r|0))throw[d.invalid_argument,"input"];return f.resolve("caml_ml_input")(e,t,n,r)},t.really_input=T,t.really_input_string=function(e,t){var n=o.caml_create_bytes(t);return T(e,n,0,t),o.bytes_to_string(n)},t.input_byte=function(e){return f.resolve("caml_ml_input_char")(e)},t.input_binary_int=function(e){return f.resolve("caml_ml_input_int")(e)},t.input_value=function(e){return f.resolve("caml_input_value")(e)},t.seek_in=function(e,t){return f.resolve("caml_ml_seek_in")(e,t)},t.pos_in=function(e){return f.resolve("caml_ml_pos_in")(e)},t.in_channel_length=function(e){return f.resolve("caml_ml_channel_size")(e)},t.close_in=function(e){return f.resolve("caml_ml_close_channel")(e)},t.close_in_noerr=function(e){try{return f.resolve("caml_ml_close_channel")(e)}catch(e){return 0}},t.set_binary_mode_in=function(e,t){return f.resolve("caml_ml_set_binary_mode")(e,t)},t.LargeFile=z,t.string_of_format=function(e){return e[1]},t.$caret$caret=function(e,t){return[p.concat_fmt(e[0],t[0]),e[1]+"%,"+t[1]]},t.exit=function(e){return O(),a.caml_sys_exit(e)},t.at_exit=function(e){var t=P[0];return P[0]=function(n){return r._1(e,0),r._1(t,0)},0},t.valid_float_lexem=m,t.unsafe_really_input=E,t.do_at_exit=O},function(e,t,n){"use strict";(function(e){var r=n(2),i=["",function(t,n){var r=n.length-1|0;return void 0!==e&&e.stdout&&e.stdout.write?e.stdout.write(n):"\n"===n[r]?(console.log(n.slice(0,r)),0):(console.log(n),0)}],a=["",function(e,t){var n=t.length-1|0;return"\n"===t[n]?(console.log(t.slice(0,n)),0):(console.log(t),0)}];function o(e){return""!==e[0]?(r._2(e[1],e,e[0]),e[0]="",0):0}function u(t,n,r,a){var u=0===r&&a===n.length?n:n.slice(r,a);if(void 0!==e&&e.stdout&&e.stdout.write&&t===i)return e.stdout.write(u);var l=u.lastIndexOf("\n");return l<0?(t[0]=t[0]+u,0):(t[0]=t[0]+u.slice(0,l+1|0),o(t),t[0]=t[0]+u.slice(l+1|0),0)}t.stdin=void 0,t.stdout=i,t.stderr=a,t.caml_ml_flush=o,t.caml_ml_output=u,t.caml_ml_output_char=function(e,t){return u(e,String.fromCharCode(t),0,1)},t.caml_ml_out_channels_list=function(e){return[i,[a,0]]}}).call(this,n(30))},function(e,t,n){"use strict";(function(e){var r=n(1);t.caml_sys_getenv=function(t){if(void 0===e||void 0===e.env)throw r.not_found;var n=e.env[t];if(void 0!==n)return n;throw r.not_found},t.caml_sys_time=function(t){return void 0===e||void 0===e.uptime?-1:e.uptime()},t.caml_sys_random_seed=function(e){return[(4294967295^(0|Date.now()))*Math.random()|0]},t.caml_sys_system_command=function(e){return 127},t.caml_sys_getcwd=function(t){return void 0===e?"/":e.cwd()},t.caml_sys_get_argv=function(t){if(void 0===e)return["",[""]];var n=e.argv;return null==n?["",[""]]:[n[0],n]},t.caml_sys_exit=function(t){return void 0!==e?e.exit(t):0},t.caml_sys_is_directory=function(e){throw[r.failure,"caml_sys_is_directory not implemented"]},t.caml_sys_file_exists=function(e){throw[r.failure,"caml_sys_file_exists not implemented"]}}).call(this,n(30))},function(e,t,n){"use strict";var r=n(31),i=n(74),a=n(32),o=n(1);function u(e){return e>=65?e>=97?e>=123?-1:e-87|0:e>=91?-1:e-55|0:e>57||e<48?-1:e-48|0}function l(e){switch(e){case 0:return 8;case 1:return 16;case 2:return 10;case 3:return 2}}function c(e){var t=1,n=2,r=0;switch(e.charCodeAt(r)){case 43:r=r+1|0;break;case 44:break;case 45:t=-1,r=r+1|0}if("0"===e[r]){var i=e.charCodeAt(r+1|0);if(i>=89)if(i>=111){if(i<121)switch(i-111|0){case 0:n=0,r=r+2|0;break;case 6:r=r+2|0;break;case 1:case 2:case 3:case 4:case 5:case 7:case 8:break;case 9:n=1,r=r+2|0}}else 98===i&&(n=3,r=r+2|0);else if(66!==i){if(i>=79)switch(i-79|0){case 0:n=0,r=r+2|0;break;case 6:r=r+2|0;break;case 1:case 2:case 3:case 4:case 5:case 7:case 8:break;case 9:n=1,r=r+2|0}}else n=3,r=r+2|0}return[r,t,n]}function s(e){var t=c(e),n=t[0],r=l(t[2]),i=e.length,a=u(n<i?e.charCodeAt(n):0);if(a<0||a>=r)throw[o.failure,"int_of_string"];var s=t[1]*function(t,n){for(;;){var a=n,l=t;if(a===i)return l;var c=e.charCodeAt(a);if(95!==c){var s=u(c);if(s<0||s>=r)throw[o.failure,"int_of_string"];var f=r*l+s;if(f>4294967295)throw[o.failure,"int_of_string"];n=a+1|0,t=f}else n=a+1|0}}(a,n+1|0),f=0|s;if(10===r&&s!==f)throw[o.failure,"int_of_string"];return f}function f(e){return e>=65&&e<=90||e>=192&&e<=214||e>=216&&e<=222?e+32|0:e}function d(e){var t=e.length;if(t>31)throw[o.invalid_argument,"format_int: format too long"];for(var n=["+","-"," ",!1,2,!1,0,!1,1,-1,"f"],i=0;;){var a=i;if(a>=t)return n;var u=e.charCodeAt(a),l=0;if(u>=69)if(u>=88)if(u>=121)l=1;else switch(u-88|0){case 0:n[4]=1,n[7]=!0,i=a+1|0;continue;case 13:case 14:case 15:l=5;break;case 12:case 17:l=4;break;case 23:n[4]=0,i=a+1|0;continue;case 29:n[4]=2,i=a+1|0;continue;case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 16:case 18:case 19:case 20:case 21:case 22:case 24:case 25:case 26:case 27:case 28:case 30:case 31:l=1;break;case 32:n[4]=1,i=a+1|0;continue}else{if(!(u>=72)){n[5]=!0,n[7]=!0,n[10]=String.fromCharCode(f(u)),i=a+1|0;continue}l=1}else switch(u){case 35:n[3]=!0,i=a+1|0;continue;case 32:case 43:l=2;break;case 45:n[0]="-",i=a+1|0;continue;case 46:n[9]=0;for(var c=a+1|0;function(t){return function(){var n=e.charCodeAt(t)-48|0;return n>=0&&n<=9}}(c)();)n[9]=(r.imul(n[9],10)+e.charCodeAt(c)|0)-48|0,c=c+1|0;i=c;continue;case 33:case 34:case 36:case 37:case 38:case 39:case 40:case 41:case 42:case 44:case 47:l=1;break;case 48:n[2]="0",i=a+1|0;continue;case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:l=3;break;default:l=1}switch(l){case 1:i=a+1|0;continue;case 2:n[1]=String.fromCharCode(u),i=a+1|0;continue;case 3:n[6]=0;for(var s=a;function(t){return function(){var n=e.charCodeAt(t)-48|0;return n>=0&&n<=9}}(s)();)n[6]=(r.imul(n[6],10)+e.charCodeAt(s)|0)-48|0,s=s+1|0;i=s;continue;case 4:n[5]=!0,n[4]=2,i=a+1|0;continue;case 5:n[5]=!0,n[10]=String.fromCharCode(u),i=a+1|0;continue}}}function p(e,t){var n=e[0],r=e[1],i=e[2],a=e[3],o=e[4],u=e[5],l=e[6],c=e[7],s=e[8],f=t.length;u&&(s<0||"-"!==r)&&(f=f+1|0),a&&(0===o?f=f+1|0:1===o&&(f=f+2|0));var d="";if("+"===n&&" "===i)for(var p=f,g=l-1|0;p<=g;++p)d+=i;if(u&&(s<0?d+="-":"-"!==r&&(d+=r)),a&&0===o&&(d+="0"),a&&1===o&&(d+="0x"),"+"===n&&"0"===i)for(var h=f,m=l-1|0;h<=m;++h)d+=i;if(d=c?d+t.toUpperCase():d+t,"-"===n)for(var v=f,y=l-1|0;v<=y;++v)d+=" ";return d}function g(e,t){if("%d"===e)return String(t);var n=d(e),r=t,i=(r<0?n[5]?(n[8]=-1,-r):r>>>0:r).toString(function(e){switch(e){case 0:return 8;case 1:return 16;case 2:return 10}}(n[4]));if(n[9]>=0){n[2]=" ";var o=n[9]-i.length|0;o>0&&(i=a.repeat(o,"0")+i)}return p(n,i)}var h=g,m=g,v=s,y=s;t.caml_format_float=function(e,t){var n=d(e),r=n[9]<0?6:n[9],i=t<0?(n[8]=-1,-t):t,a="";if(isNaN(i))a="nan",n[2]=" ";else if(isFinite(i)){switch(n[10]){case"e":var o=(a=i.toExponential(r)).length;"e"===a[o-3|0]&&(a=a.slice(0,o-1|0)+"0"+a.slice(o-1|0));break;case"f":a=i.toFixed(r);break;case"g":var u=0!==r?r:1,l=(a=i.toExponential(u-1|0)).indexOf("e"),c=0|Number(a.slice(l+1|0));if(c<-4||i>=1e21||i.toFixed().length>u){for(var s=l-1|0;"0"===a[s];)s=s-1|0;"."===a[s]&&(s=s-1|0);var f=(a=a.slice(0,s+1|0)+a.slice(l)).length;"e"===a[f-3|0]&&(a=a.slice(0,f-1|0)+"0"+a.slice(f-1|0))}else{var g=u;if(c<0)g=g-(c+1|0)|0,a=i.toFixed(g);else for(;(a=i.toFixed(g)).length>(u+1|0);)g=g-1|0;if(0!==g){for(var h=a.length-1|0;"0"===a[h];)h=h-1|0;"."===a[h]&&(h=h-1|0),a=a.slice(0,h+1|0)}}}}else a="inf",n[2]=" ";return p(n,a)},t.caml_hexstring_of_float=function(e,t,n){if(!isFinite(e))return isNaN(e)?"nan":e>0?"infinity":"-infinity";var r=0==e&&1/e==-1/0?1:e>=0?0:1;r&&(e=-e);var i=0;if(0==e);else if(e<1)for(;e<1&&i>-1022;)e*=2,i--;else for(;e>=2;)e/=2,i++;var a=i<0?"":"+",o="";if(r)o="-";else switch(n){case 43:o="+";break;case 32:o=" "}if(t>=0&&t<13){var u=Math.pow(2,4*t);e=Math.round(e*u)/u}var l=e.toString(16);if(t>=0){var c=l.indexOf(".");if(c<0)l+="."+"0".repeat(t);else{var s=c+1+t;l.length<s?l+="0".repeat(s-l.length):l=l.substr(0,s)}}return o+"0x"+l+"p"+a+i.toString(10)},t.caml_format_int=g,t.caml_nativeint_format=h,t.caml_int32_format=m,t.caml_float_of_string=function(e){return function(e,t){var n=+e;if(e.length>0&&n==n)return n;if(n=+(e=e.replace(/_/g,"")),e.length>0&&n==n||/^[+-]?nan$/i.test(e))return n;var r=/^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)p([+-]?[0-9]+)/i.exec(e);if(r){var i=r[3].replace(/0+$/,""),a=parseInt(r[1]+r[2]+i,16),o=(0|r[4])-4*i.length;return n=a*Math.pow(2,o)}if(/^\+?inf(inity)?$/i.test(e))return 1/0;if(/^-inf(inity)?$/i.test(e))return-1/0;throw t}(e,[o.failure,"float_of_string"])},t.caml_int64_format=function(e,t){var n=d(e),r=n[5]&&i.lt(t,[0,0])?(n[8]=-1,i.neg(t)):t,o="";switch(n[4]){case 0:var u=[0,8],l="01234567";if(i.lt(r,[0,0])){var c=i.discard_sign(r),s=i.div_mod(c,u),f=i.add([268435456,0],s[0]),g=s[1];for(o=String.fromCharCode(l.charCodeAt(0|g[1]))+o;i.neq(f,[0,0]);){var h=i.div_mod(f,u);f=h[0],g=h[1],o=String.fromCharCode(l.charCodeAt(0|g[1]))+o}}else{var m=i.div_mod(r,u),v=m[0],y=m[1];for(o=String.fromCharCode(l.charCodeAt(0|y[1]))+o;i.neq(v,[0,0]);){var b=i.div_mod(v,u);v=b[0],y=b[1],o=String.fromCharCode(l.charCodeAt(0|y[1]))+o}}break;case 1:o=i.to_hex(r)+o;break;case 2:var _=[0,10];if(i.lt(r,[0,0])){var k=i.discard_sign(r),w=i.div_mod(k,_),S=i.div_mod(i.add([0,8],w[1]),_),x=i.add(i.add([214748364,3435973836],w[0]),S[0]),C=S[1];for(o=String.fromCharCode("0123456789".charCodeAt(0|C[1]))+o;i.neq(x,[0,0]);){var E=i.div_mod(x,_);x=E[0],C=E[1],o=String.fromCharCode("0123456789".charCodeAt(0|C[1]))+o}}else{var T=i.div_mod(r,_),A=T[0],P=T[1];for(o=String.fromCharCode("0123456789".charCodeAt(0|P[1]))+o;i.neq(A,[0,0]);){var O=i.div_mod(A,_);A=O[0],P=O[1],o=String.fromCharCode("0123456789".charCodeAt(0|P[1]))+o}}}if(n[9]>=0){n[2]=" ";var F=n[9]-o.length|0;F>0&&(o=a.repeat(F,"0")+o)}return p(n,o)},t.caml_int_of_string=s,t.caml_int32_of_string=v,t.caml_int64_of_string=function(e){var t,n=c(e),r=n[2],a=n[0],s=i.of_int32(l(r)),f=i.of_int32(n[1]);switch(r){case 0:t=[536870911,4294967295];break;case 1:t=[268435455,4294967295];break;case 2:t=[429496729,2576980377];break;case 3:t=[2147483647,4294967295]}var d=e.length,p=a<d?e.charCodeAt(a):0,g=i.of_int32(u(p));if(i.lt(g,[0,0])||i.ge(g,s))throw[o.failure,"int64_of_string"];var h=i.mul(f,function(n,r){for(;;){var a=r,l=n;if(a===d)return l;var c=e.charCodeAt(a);if(95!==c){var f=i.of_int32(u(c));if(i.lt(f,[0,0])||i.ge(f,s)||i.gt(l,t))throw[o.failure,"int64_of_string"];r=a+1|0,n=i.add(i.mul(s,l),f)}else r=a+1|0}}(g,a+1|0)),m=i.or_(h,[0,0]);if(i.eq(s,[0,10])&&i.neq(h,m))throw[o.failure,"int64_of_string"];return m},t.caml_nativeint_of_string=y},function(e,t,n){"use strict";var r=n(31),i=n(32),a=n(6),o=n(1),u=[-2147483648,0],l=[2147483647,1],c=[0,1],s=[0,0],f=[-1,4294967295];function d(e){return 0!=(2147483648&e)}function p(e,t){var n=t[1],r=e[1],i=r+n&4294967295,a=d(r)&&(d(n)||!d(i))||d(n)&&!d(i)?1:0;return[e[0]+t[0]+a&4294967295,i>>>0]}function g(e){return[-1^e[0],(-1^e[1])>>>0]}function h(e,t){return e[0]===t[0]&&e[1]===t[1]}function m(e){return h(e,u)?u:p(g(e),c)}function v(e,t){if(0===t)return e;var n=e[1];return t>=32?[n<<(t-32|0),0]:[n>>>(32-t|0)|e[0]<<t,n<<t>>>0]}function y(e,t){if(0===t)return e;var n=e[0];return t<32?[n>>t,(n<<(32-t|0)|e[1]>>>t)>>>0]:[n>=0?0:-1,n>>(t-32|0)>>>0]}function b(e){return 0===e[0]&&0===e[1]}function _(e,t){for(;;){var n,r=t,i=e,a=i[0],o=0,l=0;if(0===a&&0===i[1])return s;if(4===4){if(0===r[0]&&0===r[1])return s;l=3}if(3===l&&(-2147483648!==a||0!==i[1]?o=2:n=r[1]),2===o){var c=r[0],f=i[1],d=0;if(-2147483648!==c||0!==r[1]?d=3:n=f,3===d){var p=r[1];if(a<0){if(c<0){t=m(r),e=m(i);continue}return m(_(m(i),r))}if(c<0)return m(_(i,m(r)));var g=65535&a,h=f>>>16,v=65535&f,y=65535&c,b=p>>>16,k=65535&p,w=0,S=0,x=0,C=v*k;return w=(S=(S=(x=(C>>>16)+h*k)>>>16)+((x=(65535&x)+v*b)>>>16)+g*k)>>>16,w+=(S=(65535&S)+h*b)>>>16,w+=(S=(65535&S)+v*y)>>>16,[(S&=65535)|(w=w+((a>>>16)*k+g*b+h*y+v*(c>>>16))&65535)<<16,(65535&C|(65535&x)<<16)>>>0]}}return 0==(1&n)?s:u}}function k(e,t){var n=t[0],r=e[0];return r>n||!(r<n)&&e[1]>=t[1]}function w(e,t){return e[0]>t[0]||!(e[0]<t[0])&&e[1]>t[1]}function S(e){return 4294967296*e[0]+e[1]}function x(e){return isNaN(e)||!isFinite(e)?s:e<=-0x8000000000000000?u:e+1>=0x8000000000000000?l:e<0?m(x(-e)):[e/4294967296|0,(e%4294967296|0)>>>0]}function C(e,t){for(;;){var n=t,r=e,i=r[0],l=0;if(0===n[0]&&0===n[1])throw o.division_by_zero;if(2===2)if(-2147483648!==i){if(0===i&&0===r[1])return s;l=1}else{if(0===r[1]){if(h(n,c)||h(n,f))return r;if(h(n,u))return c;var d=n[0],g=v(C(y(r,1),n),1);if(0===g[0]&&0===g[1])return d<0?c:m(c);var E=p(r,m(_(n,g)));return p(g,C(E,n))}l=1}if(1===l){var T=n[0];if(-2147483648===T&&0===n[1])return s;if(i<0){if(T<0){t=m(n),e=m(r);continue}return m(C(m(r),n))}if(T<0)return m(C(r,m(n)));for(var A=s,P=r;k(P,n);){for(var O=a.caml_float_max(1,Math.floor(S(P)/S(n))),F=Math.ceil(Math.log(O)/Math.LN2),R=F<=48?1:Math.pow(2,F-48),L=x(O),z=_(L,n);z[0]<0||w(z,P);)z=_(L=x(O-=R),n);b(L)&&(L=c),A=p(A,L),P=p(P,m(z))}return A}}}t.min_int=u,t.max_int=l,t.one=c,t.zero=s,t.not=g,t.of_int32=function(e){return[e<0?-1:0,e>>>0]},t.to_int32=function(e){return 0|e[1]},t.add=p,t.neg=m,t.sub=function(e,t){return p(e,m(t))},t.lsl_=v,t.lsr_=function(e,t){if(0===t)return e;var n=e[0],r=t-32|0;return 0===r?[0,n>>>0]:r>0?[0,n>>>r>>>0]:[n>>>t,(n<<(0|-r)|e[1]>>>t)>>>0]},t.asr_=y,t.is_zero=b,t.mul=_,t.xor=function(e,t){return[e[0]^t[0],(e[1]^t[1])>>>0]},t.or_=function(e,t){return[e[0]|t[0],(e[1]|t[1])>>>0]},t.and_=function(e,t){return[e[0]&t[0],(e[1]&t[1])>>>0]},t.swap=function(e){return[r.caml_int32_bswap(e[1]),r.caml_int32_bswap(e[0])>>>0]},t.ge=k,t.eq=h,t.neq=function(e,t){return!h(e,t)},t.lt=function(e,t){return!k(e,t)},t.gt=w,t.le=function(e,t){return!w(e,t)},t.equal_null=function(e,t){return null!==t&&h(e,t)},t.equal_undefined=function(e,t){return void 0!==t&&h(e,t)},t.equal_nullable=function(e,t){return null!=t&&h(e,t)},t.min=function(e,t){return k(e,t)?t:e},t.max=function(e,t){return w(e,t)?e:t},t.to_float=S,t.of_float=x,t.div=C,t.mod_=function(e,t){return p(e,m(_(C(e,t),t)))},t.compare=function(e,t){var n=a.caml_nativeint_compare(e[0],t[0]);return 0===n?a.caml_nativeint_compare(e[1],t[1]):n},t.float_of_bits=function(e){return new Float64Array(new Int32Array([e[1],e[0]]).buffer)[0]},t.bits_of_float=function(e){var t=new Int32Array(new Float64Array([e]).buffer);return[t[1],t[0]>>>0]},t.get64=function(e,t){return[e.charCodeAt(t+4|0)<<32|e.charCodeAt(t+5|0)<<40|e.charCodeAt(t+6|0)<<48|e.charCodeAt(t+7|0)<<56,(e.charCodeAt(t)|e.charCodeAt(t+1|0)<<8|e.charCodeAt(t+2|0)<<16|e.charCodeAt(t+3|0)<<24)>>>0]},t.div_mod=function(e,t){var n=C(e,t);return[n,p(e,m(_(n,t)))]},t.to_hex=function(e){var t=e[1],n=e[0],r=function(e){return(e>>>0).toString(16)};if(0===n&&0===t)return"0";if(0!==t){if(0!==n){var a=r(t),o=8-a.length|0;return o<=0?r(n)+a:r(n)+(i.repeat(o,"0")+a)}return r(t)}return r(n)+"00000000"},t.discard_sign=function(e){return[2147483647&e[0],e[1]]}},function(e,t,n){"use strict";var r=n(1);t.caml_string_get=function(e,t){if(t>=e.length||t<0)throw[r.invalid_argument,"index out of bounds"];return e.charCodeAt(t)},t.caml_string_get16=function(e,t){return e.charCodeAt(t)+(e.charCodeAt(t+1|0)<<8)|0},t.caml_string_get32=function(e,t){return((e.charCodeAt(t)+(e.charCodeAt(t+1|0)<<8)|0)+(e.charCodeAt(t+2|0)<<16)|0)+(e.charCodeAt(t+3|0)<<24)|0},t.get=function(e,t){if(t<0||t>=e.length)throw[r.invalid_argument,"index out of bounds"];return e.charCodeAt(t)}},function(e,t,n){"use strict";(function(e){function n(){if("undefined"!=typeof globalThis)return globalThis;if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==e)return e;if(void 0!==this)return this;throw new Error("Unable to locate global `this`")}t.getGlobalThis=n,t.resolve=function(e){var t=n();if(void 0===t[e])throw new Error(e+" not polyfilled by BuckleScript yet\n");return t[e]},t.register=function(e,t){return n()[e]=t,0}}).call(this,n(23))},function(e,t,n){"use strict";var r=n(17);t.concat_fmtty=function e(t,n){if("number"==typeof t)return n;switch(0|t.tag){case 0:return r.__(0,[e(t[0],n)]);case 1:return r.__(1,[e(t[0],n)]);case 2:return r.__(2,[e(t[0],n)]);case 3:return r.__(3,[e(t[0],n)]);case 4:return r.__(4,[e(t[0],n)]);case 5:return r.__(5,[e(t[0],n)]);case 6:return r.__(6,[e(t[0],n)]);case 7:return r.__(7,[e(t[0],n)]);case 8:return r.__(8,[t[0],e(t[1],n)]);case 9:return r.__(9,[t[0],t[1],e(t[2],n)]);case 10:return r.__(10,[e(t[0],n)]);case 11:return r.__(11,[e(t[0],n)]);case 12:return r.__(12,[e(t[0],n)]);case 13:return r.__(13,[e(t[0],n)]);case 14:return r.__(14,[e(t[0],n)])}},t.erase_rel=function e(t){if("number"==typeof t)return 0;switch(0|t.tag){case 0:return r.__(0,[e(t[0])]);case 1:return r.__(1,[e(t[0])]);case 2:return r.__(2,[e(t[0])]);case 3:return r.__(3,[e(t[0])]);case 4:return r.__(4,[e(t[0])]);case 5:return r.__(5,[e(t[0])]);case 6:return r.__(6,[e(t[0])]);case 7:return r.__(7,[e(t[0])]);case 8:return r.__(8,[t[0],e(t[1])]);case 9:var n=t[0];return r.__(9,[n,n,e(t[2])]);case 10:return r.__(10,[e(t[0])]);case 11:return r.__(11,[e(t[0])]);case 12:return r.__(12,[e(t[0])]);case 13:return r.__(13,[e(t[0])]);case 14:return r.__(14,[e(t[0])])}},t.concat_fmt=function e(t,n){if("number"==typeof t)return n;switch(0|t.tag){case 0:return r.__(0,[e(t[0],n)]);case 1:return r.__(1,[e(t[0],n)]);case 2:return r.__(2,[t[0],e(t[1],n)]);case 3:return r.__(3,[t[0],e(t[1],n)]);case 4:return r.__(4,[t[0],t[1],t[2],e(t[3],n)]);case 5:return r.__(5,[t[0],t[1],t[2],e(t[3],n)]);case 6:return r.__(6,[t[0],t[1],t[2],e(t[3],n)]);case 7:return r.__(7,[t[0],t[1],t[2],e(t[3],n)]);case 8:return r.__(8,[t[0],t[1],t[2],e(t[3],n)]);case 9:return r.__(9,[t[0],e(t[1],n)]);case 10:return r.__(10,[e(t[0],n)]);case 11:return r.__(11,[t[0],e(t[1],n)]);case 12:return r.__(12,[t[0],e(t[1],n)]);case 13:return r.__(13,[t[0],t[1],e(t[2],n)]);case 14:return r.__(14,[t[0],t[1],e(t[2],n)]);case 15:return r.__(15,[e(t[0],n)]);case 16:return r.__(16,[e(t[0],n)]);case 17:return r.__(17,[t[0],e(t[1],n)]);case 18:return r.__(18,[t[0],e(t[1],n)]);case 19:return r.__(19,[e(t[0],n)]);case 20:return r.__(20,[t[0],t[1],e(t[2],n)]);case 21:return r.__(21,[t[0],e(t[1],n)]);case 22:return r.__(22,[e(t[0],n)]);case 23:return r.__(23,[t[0],e(t[1],n)]);case 24:return r.__(24,[t[0],t[1],e(t[2],n)])}}},function(e,t,n){"use strict";var r=n(2),i=n(29),a=n(15),o=n(18),u=n(33),l=n(1),c=a.caml_make_float_vect;function s(e,t,n){for(var r=a.caml_make_vect(e,[]),i=0,o=e-1|0;i<=o;++i)r[i]=a.caml_make_vect(t,n);return r}function f(e){var t=e.length;return 0===t?[]:a.caml_array_sub(e,0,t)}function d(e,t,n,r,i){if(i<0||t<0||t>(e.length-i|0)||r<0||r>(n.length-i|0))throw[l.invalid_argument,"Array.blit"];return a.caml_array_blit(e,t,n,r,i)}var p=o.create("Array.Bottom");function g(e,t){var n=function(n,i,o,u,l,c,s){for(var f=n+i|0,p=u+l|0,g=n,h=a.caml_array_get(t,n),m=u,v=a.caml_array_get(o,u),y=s;;){var b=y,_=v,k=m,w=h,S=g;if(r._2(e,w,_)<=0){a.caml_array_set(c,b,w);var x=S+1|0;if(x<f){y=b+1|0,h=a.caml_array_get(t,x),g=x;continue}return d(o,k,c,b+1|0,p-k|0)}a.caml_array_set(c,b,_);var C=k+1|0;if(!(C<p))return d(t,S,c,b+1|0,f-S|0);y=b+1|0,v=a.caml_array_get(o,C),m=C}},i=function(n,i,o,u){for(var l=0,c=u-1|0;l<=c;++l){for(var s=a.caml_array_get(t,n+l|0),f=(o+l|0)-1|0;f>=o&&r._2(e,a.caml_array_get(i,f),s)>0;)a.caml_array_set(i,f+1|0,a.caml_array_get(i,f)),f=f-1|0;a.caml_array_set(i,f+1|0,s)}return 0},o=function(e,r,a,u){if(u<=5)return i(e,r,a,u);var l=u/2|0,c=u-l|0;return o(e+l|0,r,a+l|0,c),o(e,t,e+c|0,l),n(e+c|0,l,r,a+l|0,c,r,a)},u=t.length;if(u<=5)return i(0,t,0,u);var l=u/2|0,c=u-l|0,s=a.caml_make_vect(c,a.caml_array_get(t,0));return o(l,s,0,c),o(0,t,c,l),n(c,l,s,0,c,t,0)}var h=s,m=a.caml_array_concat,v=g;t.make_float=c,t.init=function(e,t){if(0===e)return[];if(e<0)throw[l.invalid_argument,"Array.init"];for(var n=a.caml_make_vect(e,r._1(t,0)),i=1,o=e-1|0;i<=o;++i)n[i]=r._1(t,i);return n},t.make_matrix=s,t.create_matrix=h,t.append=function(e,t){var n=e.length;return 0===n?f(t):0===t.length?a.caml_array_sub(e,0,n):e.concat(t)},t.concat=m,t.sub=function(e,t,n){if(t<0||n<0||t>(e.length-n|0))throw[l.invalid_argument,"Array.sub"];return a.caml_array_sub(e,t,n)},t.copy=f,t.fill=function(e,t,n,r){if(t<0||n<0||t>(e.length-n|0))throw[l.invalid_argument,"Array.fill"];for(var i=t,a=(t+n|0)-1|0;i<=a;++i)e[i]=r;return 0},t.blit=d,t.to_list=function(e){for(var t=e.length-1|0,n=0;;){var r=n,i=t;if(i<0)return r;n=[e[i],r],t=i-1|0}},t.of_list=function(e){if(!e)return[];for(var t=a.caml_make_vect(function(e,t){for(;;){var n=e;if(!t)return n;t=t[1],e=n+1|0}}(0,e),e[0]),n=1,r=e[1];;){var i=r,o=n;if(!i)return t;t[o]=i[0],r=i[1],n=o+1|0}},t.iter=function(e,t){for(var n=0,i=t.length-1|0;n<=i;++n)r._1(e,t[n]);return 0},t.iteri=function(e,t){for(var n=0,i=t.length-1|0;n<=i;++n)r._2(e,n,t[n]);return 0},t.map=function(e,t){var n=t.length;if(0===n)return[];for(var i=a.caml_make_vect(n,r._1(e,t[0])),o=1,u=n-1|0;o<=u;++o)i[o]=r._1(e,t[o]);return i},t.mapi=function(e,t){var n=t.length;if(0===n)return[];for(var i=a.caml_make_vect(n,r._2(e,0,t[0])),o=1,u=n-1|0;o<=u;++o)i[o]=r._2(e,o,t[o]);return i},t.fold_left=function(e,t,n){for(var i=t,a=0,o=n.length-1|0;a<=o;++a)i=r._2(e,i,n[a]);return i},t.fold_right=function(e,t,n){for(var i=n,a=t.length-1|0;a>=0;--a)i=r._2(e,t[a],i);return i},t.iter2=function(e,t,n){if(t.length!==n.length)throw[l.invalid_argument,"Array.iter2: arrays must have the same length"];for(var i=0,a=t.length-1|0;i<=a;++i)r._2(e,t[i],n[i]);return 0},t.map2=function(e,t,n){var i=t.length;if(i!==n.length)throw[l.invalid_argument,"Array.map2: arrays must have the same length"];if(0===i)return[];for(var o=a.caml_make_vect(i,r._2(e,t[0],n[0])),u=1,c=i-1|0;u<=c;++u)o[u]=r._2(e,t[u],n[u]);return o},t.for_all=function(e,t){for(var n=t.length,i=0;;){var a=i;if(a===n)return!0;if(!r._1(e,t[a]))return!1;i=a+1|0}},t.exists=function(e,t){for(var n=t.length,i=0;;){var a=i;if(a===n)return!1;if(r._1(e,t[a]))return!0;i=a+1|0}},t.mem=function(e,t){for(var n=t.length,r=0;;){var a=r;if(a===n)return!1;if(i.caml_equal(t[a],e))return!0;r=a+1|0}},t.memq=function(e,t){for(var n=t.length,r=0;;){var i=r;if(i===n)return!1;if(e===t[i])return!0;r=i+1|0}},t.sort=function(e,t){for(var n=function(n,i){var o=1+((i+i|0)+i|0)|0,u=o;if((o+2|0)<n)return r._2(e,a.caml_array_get(t,o),a.caml_array_get(t,o+1|0))<0&&(u=o+1|0),r._2(e,a.caml_array_get(t,u),a.caml_array_get(t,o+2|0))<0&&(u=o+2|0),u;if((o+1|0)<n&&r._2(e,a.caml_array_get(t,o),a.caml_array_get(t,o+1|0))<0)return o+1|0;if(o<n)return o;throw[p,i]},i=function(i,o,l){try{for(var c=i,s=o,f=l;;){var d=s,g=n(c,d);if(!(r._2(e,a.caml_array_get(t,g),f)>0))return a.caml_array_set(t,d,f);a.caml_array_set(t,d,a.caml_array_get(t,g)),s=g}}catch(e){var h=u.internalToOCamlException(e);if(h[0]===p)return a.caml_array_set(t,h[1],l);throw h}},o=function(e,r){try{for(var i=e,o=r;;){var l=o,c=n(i,l);a.caml_array_set(t,l,a.caml_array_get(t,c)),o=c}}catch(e){var s=u.internalToOCamlException(e);if(s[0]===p)return s[1];throw s}},c=function(n,i){for(;;){var o=n,u=(o-1|0)/3|0;if(o===u)throw[l.assert_failure,["array.ml",238,4]];if(r._2(e,a.caml_array_get(t,u),i)<0){if(a.caml_array_set(t,o,a.caml_array_get(t,u)),u>0){n=u;continue}return a.caml_array_set(t,0,i)}return a.caml_array_set(t,o,i)}},s=t.length,f=((s+1|0)/3|0)-1|0;f>=0;--f)i(s,f,a.caml_array_get(t,f));for(var d=s-1|0;d>=2;--d){var g=a.caml_array_get(t,d);a.caml_array_set(t,d,a.caml_array_get(t,0)),c(o(d,0),g)}if(s>1){var h=a.caml_array_get(t,1);return a.caml_array_set(t,1,a.caml_array_get(t,0)),a.caml_array_set(t,0,h)}return 0},t.stable_sort=g,t.fast_sort=v,t.Floatarray={}},function(e,t,n){"use strict";var r=n(80),i=n(2),a=n(11),o=n(6),u=n(1);var l=[];function c(e){var t=e.length,n=a.caml_create_bytes(t);return a.caml_blit_bytes(e,0,n,0,t),n}function s(e,t,n){if(t<0||n<0||t>(e.length-n|0))throw[u.invalid_argument,"String.sub / Bytes.sub"];var r=a.caml_create_bytes(n);return a.caml_blit_bytes(e,t,r,0,n),r}function f(e,t){var n=e+t|0,r=t<0,i=n<0;if(e<0){if(r&&!i)throw[u.invalid_argument,"Bytes.extend"];return n}if(r)return n;if(i)throw[u.invalid_argument,"Bytes.extend"];return n}function d(e,t){if(e>=t)return e;throw[u.invalid_argument,"Bytes.concat"]}function p(e){var t=e-9|0;return t>4||t<0?23===t:2!==t}function g(e,t){var n=t.length;if(0===n)return t;for(var r=a.caml_create_bytes(n),o=0,u=n-1|0;o<=u;++o)r[o]=i._1(e,t[o]);return r}function h(e,t){if(0===t.length)return t;var n=c(t);return n[0]=i._1(e,t[0]),n}function m(e,t,n,r){for(;;){var i=n;if(i>=t)throw u.not_found;if(e[i]===r)return i;n=i+1|0}}function v(e,t,n,r){for(;;){var i=n;if(i>=t)return;if(e[i]===r)return i;n=i+1|0}}function y(e,t,n){for(;;){var r=t;if(r<0)throw u.not_found;if(e[r]===n)return r;t=r-1|0}}function b(e,t,n){for(;;){var r=t;if(r<0)return;if(e[r]===n)return r;t=r-1|0}}function _(e,t,n){var r=e.length;if(t<0||t>r)throw[u.invalid_argument,"String.contains_from / Bytes.contains_from"];try{return m(e,r,t,n),!0}catch(e){if(e===u.not_found)return!1;throw e}}var k=o.caml_bytes_compare;var w=o.caml_bytes_equal,S=a.bytes_to_string,x=a.bytes_of_string;t.make=function(e,t){var n=a.caml_create_bytes(e);return a.caml_fill_bytes(n,0,e,t),n},t.init=function(e,t){for(var n=a.caml_create_bytes(e),r=0,o=e-1|0;r<=o;++r)n[r]=i._1(t,r);return n},t.empty=l,t.copy=c,t.of_string=function(e){return c(a.bytes_of_string(e))},t.to_string=function(e){return a.bytes_to_string(c(e))},t.sub=s,t.sub_string=function(e,t,n){return a.bytes_to_string(s(e,t,n))},t.extend=function(e,t,n){var r=f(f(e.length,t),n),i=a.caml_create_bytes(r),u=t<0?[0|-t,0]:[0,t],l=u[1],c=u[0],s=o.caml_int_min(e.length-c|0,r-l|0);return s>0&&a.caml_blit_bytes(e,c,i,l,s),i},t.fill=function(e,t,n,r){if(t<0||n<0||t>(e.length-n|0))throw[u.invalid_argument,"String.fill / Bytes.fill"];return a.caml_fill_bytes(e,t,n,r)},t.blit=function(e,t,n,r,i){if(i<0||t<0||t>(e.length-i|0)||r<0||r>(n.length-i|0))throw[u.invalid_argument,"Bytes.blit"];return a.caml_blit_bytes(e,t,n,r,i)},t.blit_string=function(e,t,n,r,i){if(i<0||t<0||t>(e.length-i|0)||r<0||r>(n.length-i|0))throw[u.invalid_argument,"String.blit / Bytes.blit_string"];return a.caml_blit_string(e,t,n,r,i)},t.concat=function(e,t){if(!t)return l;for(var n=e.length,r=a.caml_create_bytes(function(e,t,n){for(;;){var r=n,i=e;if(r){var a=r[1],o=r[0];if(a){n=a,e=d((o.length+t|0)+i|0,i);continue}return o.length+i|0}return i}}(0,n,t)),i=0,o=e,u=n,c=t;;){var s=c,f=i;if(s){var p=s[1],g=s[0];if(p){a.caml_blit_bytes(g,0,r,f,g.length),a.caml_blit_bytes(o,0,r,f+g.length|0,u),c=p,i=(f+g.length|0)+u|0;continue}return a.caml_blit_bytes(g,0,r,f,g.length),r}return r}},t.cat=function(e,t){var n=e.length,r=t.length,i=a.caml_create_bytes(n+r|0);return a.caml_blit_bytes(e,0,i,0,n),a.caml_blit_bytes(t,0,i,n,r),i},t.iter=function(e,t){for(var n=0,r=t.length-1|0;n<=r;++n)i._1(e,t[n]);return 0},t.iteri=function(e,t){for(var n=0,r=t.length-1|0;n<=r;++n)i._2(e,n,t[n]);return 0},t.map=g,t.mapi=function(e,t){var n=t.length;if(0===n)return t;for(var r=a.caml_create_bytes(n),o=0,u=n-1|0;o<=u;++o)r[o]=i._2(e,o,t[o]);return r},t.trim=function(e){for(var t=e.length,n=0;n<t&&p(e[n]);)n=n+1|0;for(var r=t-1|0;r>=n&&p(e[r]);)r=r-1|0;return r>=n?s(e,n,1+(r-n|0)|0):l},t.escaped=function(e){for(var t=0,n=0,r=e.length-1|0;n<=r;++n){var i,o=e[n];if(o>=32){var u=o-34|0;i=u>58||u<0?u>=93?4:1:u>57||u<1?2:1}else i=o>=11?13!==o?4:2:o>=8?2:4;t=t+i|0}if(t===e.length)return c(e);var l=a.caml_create_bytes(t);t=0;for(var s=0,f=e.length-1|0;s<=f;++s){var d=e[s],p=0;if(d>=35)92!==d?d>=127?p=1:l[t]=d:p=2;else if(d>=32)d>=34?p=2:l[t]=d;else if(d>=14)p=1;else switch(d){case 8:l[t]=92,l[t=t+1|0]=98;break;case 9:l[t]=92,l[t=t+1|0]=116;break;case 10:l[t]=92,l[t=t+1|0]=110;break;case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 11:case 12:p=1;break;case 13:l[t]=92,l[t=t+1|0]=114}switch(p){case 1:l[t]=92,l[t=t+1|0]=48+(d/100|0)|0,l[t=t+1|0]=48+(d/10|0)%10|0,l[t=t+1|0]=48+d%10|0;break;case 2:l[t]=92,l[t=t+1|0]=d}t=t+1|0}return l},t.index=function(e,t){return m(e,e.length,0,t)},t.index_opt=function(e,t){return v(e,e.length,0,t)},t.rindex=function(e,t){return y(e,e.length-1|0,t)},t.rindex_opt=function(e,t){return b(e,e.length-1|0,t)},t.index_from=function(e,t,n){var r=e.length;if(t<0||t>r)throw[u.invalid_argument,"String.index_from / Bytes.index_from"];return m(e,r,t,n)},t.index_from_opt=function(e,t,n){var r=e.length;if(t<0||t>r)throw[u.invalid_argument,"String.index_from_opt / Bytes.index_from_opt"];return v(e,r,t,n)},t.rindex_from=function(e,t,n){if(t<-1||t>=e.length)throw[u.invalid_argument,"String.rindex_from / Bytes.rindex_from"];return y(e,t,n)},t.rindex_from_opt=function(e,t,n){if(t<-1||t>=e.length)throw[u.invalid_argument,"String.rindex_from_opt / Bytes.rindex_from_opt"];return b(e,t,n)},t.contains=function(e,t){return _(e,0,t)},t.contains_from=_,t.rcontains_from=function(e,t,n){if(t<0||t>=e.length)throw[u.invalid_argument,"String.rcontains_from / Bytes.rcontains_from"];try{return y(e,t,n),!0}catch(e){if(e===u.not_found)return!1;throw e}},t.uppercase=function(e){return g(r.uppercase,e)},t.lowercase=function(e){return g(r.lowercase,e)},t.capitalize=function(e){return h(r.uppercase,e)},t.uncapitalize=function(e){return h(r.lowercase,e)},t.uppercase_ascii=function(e){return g(r.uppercase_ascii,e)},t.lowercase_ascii=function(e){return g(r.lowercase_ascii,e)},t.capitalize_ascii=function(e){return h(r.uppercase_ascii,e)},t.uncapitalize_ascii=function(e){return h(r.lowercase_ascii,e)},t.compare=k,t.equal=w,t.unsafe_to_string=S,t.unsafe_of_string=x},function(e,t,n){"use strict";var r=n(11),i=n(1);t.chr=function(e){if(e<0||e>255)throw[i.invalid_argument,"Char.chr"];return e},t.escaped=function(e){var t=0;if(e>=40){if(92===e)return"\\\\";t=e>=127?1:2}else if(e>=32){if(e>=39)return"\\'";t=2}else if(e>=14)t=1;else switch(e){case 8:return"\\b";case 9:return"\\t";case 10:return"\\n";case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 11:case 12:t=1;break;case 13:return"\\r"}switch(t){case 1:var n=[0,0,0,0];return n[0]=92,n[1]=48+(e/100|0)|0,n[2]=48+(e/10|0)%10|0,n[3]=48+e%10|0,r.bytes_to_string(n);case 2:var i=[0];return i[0]=e,r.bytes_to_string(i)}},t.lowercase=function(e){return e>=65&&e<=90||e>=192&&e<=214||e>=216&&e<=222?e+32|0:e},t.uppercase=function(e){return e>=97&&e<=122||e>=224&&e<=246||e>=248&&e<=254?e-32|0:e},t.lowercase_ascii=function(e){return e>=65&&e<=90?e+32|0:e},t.uppercase_ascii=function(e){return e>=97&&e<=122?e-32|0:e},t.compare=function(e,t){return e-t|0},t.equal=function(e,t){return 0==(e-t|0)}},function(e,t,n){"use strict";var r=n(3);t.get=function(e,t){if(t in e)return r.some(e[t])},t.unsafeDeleteKey=function(e,t){return delete e[t],0},t.entries=function(e){for(var t=Object.keys(e),n=t.length,r=new Array(n),i=0,a=n-1|0;i<=a;++i){var o=t[i];r[i]=[o,e[o]]}return r},t.values=function(e){for(var t=Object.keys(e),n=t.length,r=new Array(n),i=0,a=n-1|0;i<=a;++i)r[i]=e[t[i]];return r},t.fromList=function(e){for(var t={},n=e;;){var r=n;if(!r)return t;var i=r[0];t[i[0]]=i[1],n=r[1]}},t.fromArray=function(e){for(var t={},n=0,r=e.length-1|0;n<=r;++n){var i=e[n];t[i[0]]=i[1]}return t},t.map=function(e,t){for(var n={},r=Object.keys(t),i=0,a=r.length-1|0;i<=a;++i){var o=r[i];n[o]=e(t[o])}return n}},function(e,t,n){"use strict";var r=n(2),i=n(16);function a(e,t){var n=e.length;if(0===n||1===n)return n;var r=e[0],i=e[1];if(!t(r,i))return t(i,r)?0|-function(e,t,n,r,i){for(;;){var a=n,o=t;if(a>=r)return a;var u=e[a];if(!i(u,o))return a;n=a+1|0,t=u}}(e,i,2,n,t):1;for(var a=e,o=i,u=2,l=n,c=t;;){var s=u,f=o;if(s>=l)return s;var d=a[s];if(!c(f,d))return s;u=s+1|0,o=d}}function o(e,t){var n=e.length;if(0===n)return!0;for(var r=e,i=0,a=t,o=n-1|0;;){var u=i;if(u===o)return!0;if(!(a(r[u],r[u+1|0])<=0))return!1;i=u+1|0}}function u(e,t,n,r,a,o,u,l,c){for(var s=t+n|0,f=a+o|0,d=t,p=e[t],g=a,h=r[a],m=l;;){var v=m,y=h,b=g,_=p,k=d;if(c(_,y)<=0){u[v]=_;var w=k+1|0;if(w<s){m=v+1|0,p=e[w],d=w;continue}return i.blitUnsafe(r,b,u,v+1|0,f-b|0)}u[v]=y;var S=b+1|0;if(!(S<f))return i.blitUnsafe(e,k,u,v+1|0,s-k|0);m=v+1|0,h=r[S],g=S}}function l(e,t,n,r,a,o,u,l,c){for(var s=t+n|0,f=a+o|0,d=t,p=e[t],g=a,h=r[a],m=l;;){var v=m,y=h,b=g,_=p,k=d,w=c(_,y);if(w<0){u[v]=_;var S=k+1|0,x=v+1|0;if(S<s){m=x,p=e[S],d=S;continue}return i.blitUnsafe(r,b,u,x,f-b|0),(x+f|0)-b|0}if(0===w){u[v]=_;var C=k+1|0,E=b+1|0,T=v+1|0;if(C<s&&E<f){m=T,h=r[E],g=E,p=e[C],d=C;continue}return C===s?(i.blitUnsafe(r,E,u,T,f-E|0),(T+f|0)-E|0):(i.blitUnsafe(e,C,u,T,s-C|0),(T+s|0)-C|0)}u[v]=y;var A=b+1|0,P=v+1|0;if(!(A<f))return i.blitUnsafe(e,k,u,P,s-k|0),(P+s|0)-k|0;m=P,h=r[A],g=A}}function c(e,t,n,r,i,a,o,u,l){for(var c=t+n|0,s=i+a|0,f=t,d=e[t],p=i,g=r[i],h=u;;){var m=h,v=p,y=d,b=f,_=l(y,g);if(_<0){var k=b+1|0;if(k<c){d=e[k],f=k;continue}return m}if(0===_){o[m]=y;var w=b+1|0,S=v+1|0,x=m+1|0;if(w<c&&S<s){h=x,g=r[S],p=S,d=e[w],f=w;continue}return x}var C=v+1|0;if(!(C<s))return m;g=r[C],p=C}}function s(e,t,n,r,a,o,u,l,c){for(var s=t+n|0,f=a+o|0,d=t,p=e[t],g=a,h=r[a],m=l;;){var v=m,y=g,b=p,_=d,k=c(b,h);if(k<0){u[v]=b;var w=v+1|0,S=_+1|0;if(S<s){m=w,p=e[S],d=S;continue}return w}if(0===k){var x=_+1|0,C=y+1|0;if(x<s&&C<f){h=r[C],g=C,p=e[x],d=x;continue}return x===s?v:(i.blitUnsafe(e,x,u,v,s-x|0),(v+s|0)-x|0)}var E=y+1|0;if(!(E<f))return i.blitUnsafe(e,_,u,v,s-_|0),(v+s|0)-_|0;h=r[E],g=E}}function f(e,t,n,r,i,a){for(var o=0,u=i-1|0;o<=u;++o){for(var l=e[t+o|0],c=(r+o|0)-1|0;c>=r&&a(n[c],l)>0;)n[c+1|0]=n[c],c=c-1|0;n[c+1|0]=l}return 0}function d(e,t,n,r,i,a){if(i<=5)return f(e,t,n,r,i,a);var o=i/2|0,l=i-o|0;return d(e,t+o|0,n,r+o|0,l,a),d(e,t,e,t+l|0,o,a),u(e,t+l|0,o,n,r+o|0,l,n,r,a)}function p(e,t){var n=e.length;if(n<=5)return f(e,0,e,0,n,t);var r=n/2|0,i=n-r|0,a=new Array(i);return d(e,r,a,0,i,t),d(e,0,e,i,r,t),u(e,i,r,a,0,i,e,0,t)}function g(e,t){var n=e.slice(0);return p(n,t),n}function h(e,t,n){var r=e.length;if(0===r)return-1;if(n(t,e[0])<0)return-1;if(n(t,e[r-1|0])>0)return 0|-(r+1|0);for(var i=e,a=0,o=r-1|0,u=t,l=n;;){var c=o,s=a,f=(s+c|0)/2|0,d=l(u,i[f]);if(0===d)return f;if(d<0){if(c===f)return 0===l(i[s],u)?s:0|-(c+1|0);o=f}else{if(s===f)return 0===l(i[c],u)?c:0|-(c+1|0);a=f}}}t.Int=0,t.$$String=0,t.strictlySortedLengthU=a,t.strictlySortedLength=function(e,t){return a(e,r.__2(t))},t.isSortedU=o,t.isSorted=function(e,t){return o(e,r.__2(t))},t.stableSortInPlaceByU=p,t.stableSortInPlaceBy=function(e,t){return p(e,r.__2(t))},t.stableSortByU=g,t.stableSortBy=function(e,t){return g(e,r.__2(t))},t.binarySearchByU=h,t.binarySearchBy=function(e,t,n){return h(e,t,r.__2(n))},t.unionU=l,t.union=function(e,t,n,i,a,o,u,c,s){return l(e,t,n,i,a,o,u,c,r.__2(s))},t.intersectU=c,t.intersect=function(e,t,n,i,a,o,u,l,s){return c(e,t,n,i,a,o,u,l,r.__2(s))},t.diffU=s,t.diff=function(e,t,n,i,a,o,u,l,c){return s(e,t,n,i,a,o,u,l,r.__2(c))}},function(e,t,n){"use strict";var r=n(3);function i(e,t){return void 0!==t?r.valFromOption(t):e}var a=i;t.some=function(e){return r.some(e)},t.isSome=function(e){return void 0!==e},t.isSomeValue=function(e,t,n){return void 0!==n&&e(t,r.valFromOption(n))},t.isNone=function(e){return void 0===e},t.getExn=function(e){if(void 0!==e)return r.valFromOption(e);throw new Error("getExn")},t.equal=function(e,t,n){return void 0!==t?void 0!==n&&e(r.valFromOption(t),r.valFromOption(n)):void 0===n},t.andThen=function(e,t){if(void 0!==t)return e(r.valFromOption(t))},t.map=function(e,t){if(void 0!==t)return r.some(e(r.valFromOption(t)))},t.getWithDefault=i,t.$$default=a,t.default=a,t.__esModule=!0,t.filter=function(e,t){if(void 0!==t){var n=r.valFromOption(t);return e(n)?r.some(n):void 0}},t.firstSome=function(e,t){return void 0!==e?e:void 0!==t?t:void 0}},function(e,t,n){"use strict";var r=n(36),i=r.Color.hex("F0F8FF"),a=r.Color.hex("FAEBD7"),o=r.Color.hex("00FFFF"),u=r.Color.hex("7FFFD4"),l=r.Color.hex("F0FFFF"),c=r.Color.hex("F5F5DC"),s=r.Color.hex("FFE4C4"),f=r.Color.hex("000000"),d=r.Color.hex("FFEBCD"),p=r.Color.hex("0000FF"),g=r.Color.hex("8A2BE2"),h=r.Color.hex("A52A2A"),m=r.Color.hex("DEB887"),v=r.Color.hex("5F9EA0"),y=r.Color.hex("7FFF00"),b=r.Color.hex("D2691E"),_=r.Color.hex("FF7F50"),k=r.Color.hex("6495ED"),w=r.Color.hex("FFF8DC"),S=r.Color.hex("DC143C"),x=r.Color.hex("00FFFF"),C=r.Color.hex("00008B"),E=r.Color.hex("008B8B"),T=r.Color.hex("B8860B"),A=r.Color.hex("A9A9A9"),P=r.Color.hex("006400"),O=r.Color.hex("A9A9A9"),F=r.Color.hex("BDB76B"),R=r.Color.hex("8B008B"),L=r.Color.hex("556B2F"),z=r.Color.hex("FF8C00"),N=r.Color.hex("9932CC"),D=r.Color.hex("8B0000"),j=r.Color.hex("E9967A"),I=r.Color.hex("8FBC8F"),B=r.Color.hex("483D8B"),M=r.Color.hex("2F4F4F"),q=r.Color.hex("2F4F4F"),U=r.Color.hex("00CED1"),$=r.Color.hex("9400D3"),W=r.Color.hex("FF1493"),V=r.Color.hex("00BFFF"),H=r.Color.hex("696969"),G=r.Color.hex("696969"),Q=r.Color.hex("1E90FF"),K=r.Color.hex("B22222"),Y=r.Color.hex("FFFAF0"),X=r.Color.hex("228B22"),Z=r.Color.hex("FF00FF"),J=r.Color.hex("DCDCDC"),ee=r.Color.hex("F8F8FF"),te=r.Color.hex("FFD700"),ne=r.Color.hex("DAA520"),re=r.Color.hex("808080"),ie=r.Color.hex("008000"),ae=r.Color.hex("ADFF2F"),oe=r.Color.hex("808080"),ue=r.Color.hex("F0FFF0"),le=r.Color.hex("FF69B4"),ce=r.Color.hex("CD5C5C"),se=r.Color.hex("4B0082"),fe=r.Color.hex("FFFFF0"),de=r.Color.hex("F0E68C"),pe=r.Color.hex("E6E6FA"),ge=r.Color.hex("FFF0F5"),he=r.Color.hex("7CFC00"),me=r.Color.hex("FFFACD"),ve=r.Color.hex("ADD8E6"),ye=r.Color.hex("F08080"),be=r.Color.hex("E0FFFF"),_e=r.Color.hex("FAFAD2"),ke=r.Color.hex("D3D3D3"),we=r.Color.hex("90EE90"),Se=r.Color.hex("D3D3D3"),xe=r.Color.hex("FFB6C1"),Ce=r.Color.hex("FFA07A"),Ee=r.Color.hex("20B2AA"),Te=r.Color.hex("87CEFA"),Ae=r.Color.hex("778899"),Pe=r.Color.hex("778899"),Oe=r.Color.hex("B0C4DE"),Fe=r.Color.hex("FFFFE0"),Re=r.Color.hex("00FF00"),Le=r.Color.hex("32CD32"),ze=r.Color.hex("FAF0E6"),Ne=r.Color.hex("FF00FF"),De=r.Color.hex("800000"),je=r.Color.hex("66CDAA"),Ie=r.Color.hex("0000CD"),Be=r.Color.hex("BA55D3"),Me=r.Color.hex("9370DB"),qe=r.Color.hex("3CB371"),Ue=r.Color.hex("7B68EE"),$e=r.Color.hex("00FA9A"),We=r.Color.hex("48D1CC"),Ve=r.Color.hex("C71585"),He=r.Color.hex("191970"),Ge=r.Color.hex("F5FFFA"),Qe=r.Color.hex("FFE4E1"),Ke=r.Color.hex("FFE4B5"),Ye=r.Color.hex("FFDEAD"),Xe=r.Color.hex("000080"),Ze=r.Color.hex("FDF5E6"),Je=r.Color.hex("808000"),et=r.Color.hex("6B8E23"),tt=r.Color.hex("FFA500"),nt=r.Color.hex("FF4500"),rt=r.Color.hex("DA70D6"),it=r.Color.hex("EEE8AA"),at=r.Color.hex("98FB98"),ot=r.Color.hex("AFEEEE"),ut=r.Color.hex("DB7093"),lt=r.Color.hex("FFEFD5"),ct=r.Color.hex("FFDAB9"),st=r.Color.hex("CD853F"),ft=r.Color.hex("FFC0CB"),dt=r.Color.hex("DDA0DD"),pt=r.Color.hex("B0E0E6"),gt=r.Color.hex("800080"),ht=r.Color.hex("663399"),mt=r.Color.hex("FF0000"),vt=r.Color.hex("BC8F8F"),yt=r.Color.hex("4169E1"),bt=r.Color.hex("8B4513"),_t=r.Color.hex("FA8072"),kt=r.Color.hex("F4A460"),wt=r.Color.hex("2E8B57"),St=r.Color.hex("FFF5EE"),xt=r.Color.hex("A0522D"),Ct=r.Color.hex("C0C0C0"),Et=r.Color.hex("87CEEB"),Tt=r.Color.hex("6A5ACD"),At=r.Color.hex("708090"),Pt=r.Color.hex("708090"),Ot=r.Color.hex("FFFAFA"),Ft=r.Color.hex("00FF7F"),Rt=r.Color.hex("4682B4"),Lt=r.Color.hex("D2B48C"),zt=r.Color.hex("008080"),Nt=r.Color.hex("D8BFD8"),Dt=r.Color.hex("FF6347"),jt=r.Color.hex("40E0D0"),It=r.Color.hex("EE82EE"),Bt=r.Color.hex("F5DEB3"),Mt=r.Color.hex("FFFFFF"),qt=r.Color.hex("F5F5F5"),Ut=r.Color.hex("FFFF00"),$t=r.Color.hex("9ACD3"),Wt=r.Color.transparent;t.aliceblue=i,t.antiquewhite=a,t.aqua=o,t.aquamarine=u,t.azure=l,t.beige=c,t.bisque=s,t.black=f,t.blanchedalmond=d,t.blue=p,t.blueviolet=g,t.brown=h,t.burlywood=m,t.cadetblue=v,t.chartreuse=y,t.chocolate=b,t.coral=_,t.cornflowerblue=k,t.cornsilk=w,t.crimson=S,t.cyan=x,t.darkblue=C,t.darkcyan=E,t.darkgoldenrod=T,t.darkgray=A,t.darkgreen=P,t.darkgrey=O,t.darkkhaki=F,t.darkmagenta=R,t.darkolivegreen=L,t.darkorange=z,t.darkorchid=N,t.darkred=D,t.darksalmon=j,t.darkseagreen=I,t.darkslateblue=B,t.darkslategray=M,t.darkslategrey=q,t.darkturquoise=U,t.darkviolet=$,t.deeppink=W,t.deepskyblue=V,t.dimgray=H,t.dimgrey=G,t.dodgerblue=Q,t.firebrick=K,t.floralwhite=Y,t.forestgreen=X,t.fuchsia=Z,t.gainsboro=J,t.ghostwhite=ee,t.gold=te,t.goldenrod=ne,t.gray=re,t.green=ie,t.greenyellow=ae,t.grey=oe,t.honeydew=ue,t.hotpink=le,t.indianred=ce,t.indigo=se,t.ivory=fe,t.khaki=de,t.lavender=pe,t.lavenderblush=ge,t.lawngreen=he,t.lemonchiffon=me,t.lightblue=ve,t.lightcoral=ye,t.lightcyan=be,t.lightgoldenrodyellow=_e,t.lightgray=ke,t.lightgreen=we,t.lightgrey=Se,t.lightpink=xe,t.lightsalmon=Ce,t.lightseagreen=Ee,t.lightskyblue=Te,t.lightslategray=Ae,t.lightslategrey=Pe,t.lightsteelblue=Oe,t.lightyellow=Fe,t.lime=Re,t.limegreen=Le,t.linen=ze,t.magenta=Ne,t.maroon=De,t.mediumaquamarine=je,t.mediumblue=Ie,t.mediumorchid=Be,t.mediumpurple=Me,t.mediumseagreen=qe,t.mediumslateblue=Ue,t.mediumspringgreen=$e,t.mediumturquoise=We,t.mediumvioletred=Ve,t.midnightblue=He,t.mintcream=Ge,t.mistyrose=Qe,t.moccasin=Ke,t.navajowhite=Ye,t.navy=Xe,t.oldlace=Ze,t.olive=Je,t.olivedrab=et,t.orange=tt,t.orangered=nt,t.orchid=rt,t.palegoldenrod=it,t.palegreen=at,t.paleturquoise=ot,t.palevioletred=ut,t.papayawhip=lt,t.peachpuff=ct,t.peru=st,t.pink=ft,t.plum=dt,t.powderblue=pt,t.purple=gt,t.rebeccapurple=ht,t.red=mt,t.rosybrown=vt,t.royalblue=yt,t.saddlebrown=bt,t.salmon=_t,t.sandybrown=kt,t.seagreen=wt,t.seashell=St,t.sienna=xt,t.silver=Ct,t.skyblue=Et,t.slateblue=Tt,t.slategray=At,t.slategrey=Pt,t.snow=Ot,t.springgreen=Ft,t.steelblue=Rt,t.tan=Lt,t.teal=zt,t.thistle=Nt,t.tomato=Dt,t.turquoise=jt,t.violet=It,t.wheat=Bt,t.white=Mt,t.whitesmoke=qt,t.yellow=Ut,t.yellowgreen=$t,t.transparent=Wt},function(e,t,n){"use strict";var r=n(2),i=n(3);function a(e,t){return void 0!==e?t(i.valFromOption(e)):0}function o(e,t,n){return void 0!==e?n(i.valFromOption(e)):t}function u(e,t){if(void 0!==e)return i.some(t(i.valFromOption(e)))}function l(e,t){if(void 0!==e)return t(i.valFromOption(e))}function c(e,t,n){return void 0!==e?void 0!==t&&n(i.valFromOption(e),i.valFromOption(t)):void 0===t}function s(e,t,n){return void 0!==e?void 0!==t?n(i.valFromOption(e),i.valFromOption(t)):1:void 0!==t?-1:0}t.forEachU=a,t.forEach=function(e,t){return a(e,r.__1(t))},t.getExn=function(e){if(void 0!==e)return i.valFromOption(e);throw new Error("getExn")},t.mapWithDefaultU=o,t.mapWithDefault=function(e,t,n){return o(e,t,r.__1(n))},t.mapU=u,t.map=function(e,t){return u(e,r.__1(t))},t.flatMapU=l,t.flatMap=function(e,t){return l(e,r.__1(t))},t.getWithDefault=function(e,t){return void 0!==e?i.valFromOption(e):t},t.isSome=function(e){return void 0!==e},t.isNone=function(e){return void 0===e},t.eqU=c,t.eq=function(e,t,n){return c(e,t,r.__2(n))},t.cmpU=s,t.cmp=function(e,t,n){return s(e,t,r.__2(n))}},function(e,t,n){"use strict";var r=n(4),i={heading:r.style([r.fontSize([25096,30]),0]),list:r.style([r.margin([25096,0]),[r.padding([25096,0]),[r.selector("li",[r.display(888960333),[r.listStyleType(-922086728),[r.marginBottom([25096,5]),[r.selector("a",[r.display(888960333),[r.color([5194459,"006600"]),0]]),[r.selector("span",[r.paddingLeft([25096,15]),0]),0]]]]]),0]]])};t.Styles=i},function(e,t,n){"use strict";var r=n(0),i=n(37),a=n(5),o=n(91);var u=function(e){var t=e.slug;return r.createElement("div",{className:"article-detail"},r.createElement(a.make,{children:r.createElement("article",{className:o.Styles.article+" markdown-body",dangerouslySetInnerHTML:{__html:i(n(92)("./"+t+"/index.md"))}})}))};t.make=u},function(e,t,n){const r=n(38),{defaults:i}=n(8),{block:a,inline:o}=n(89);function u(e){return e.replace(/---/g,"—").replace(/--/g,"–").replace(/(^|[-\u2014/(\[{"\s])'/g,"$1‘").replace(/'/g,"’").replace(/(^|[-\u2014/(\[{\u2018\s])"/g,"$1“").replace(/"/g,"”").replace(/\.{3}/g,"…")}function l(e){let t,n,r="";const i=e.length;for(t=0;t<i;t++)n=e.charCodeAt(t),Math.random()>.5&&(n="x"+n.toString(16)),r+="&#"+n+";";return r}e.exports=class e{constructor(e){this.tokens=[],this.tokens.links=Object.create(null),this.options=e||i,this.options.tokenizer=this.options.tokenizer||new r,this.tokenizer=this.options.tokenizer,this.tokenizer.options=this.options;const t={block:a.normal,inline:o.normal};this.options.pedantic?(t.block=a.pedantic,t.inline=o.pedantic):this.options.gfm&&(t.block=a.gfm,this.options.breaks?t.inline=o.breaks:t.inline=o.gfm),this.tokenizer.rules=t}static get rules(){return{block:a,inline:o}}static lex(t,n){return new e(n).lex(t)}lex(e){return e=e.replace(/\r\n|\r/g,"\n").replace(/\t/g,"    "),this.blockTokens(e,this.tokens,!0),this.inline(this.tokens),this.tokens}blockTokens(e,t=[],n=!0){let r,i,a;for(e=e.replace(/^ +$/gm,"");e;)if(r=this.tokenizer.space(e))e=e.substring(r.raw.length),r.type&&t.push(r);else if(r=this.tokenizer.code(e,t))e=e.substring(r.raw.length),t.push(r);else if(r=this.tokenizer.fences(e))e=e.substring(r.raw.length),t.push(r);else if(r=this.tokenizer.heading(e))e=e.substring(r.raw.length),t.push(r);else if(r=this.tokenizer.nptable(e))e=e.substring(r.raw.length),t.push(r);else if(r=this.tokenizer.hr(e))e=e.substring(r.raw.length),t.push(r);else if(r=this.tokenizer.blockquote(e))e=e.substring(r.raw.length),r.tokens=this.blockTokens(r.text,[],n),t.push(r);else if(r=this.tokenizer.list(e)){for(e=e.substring(r.raw.length),a=r.items.length,i=0;i<a;i++)r.items[i].tokens=this.blockTokens(r.items[i].text,[],!1);t.push(r)}else if(r=this.tokenizer.html(e))e=e.substring(r.raw.length),t.push(r);else if(n&&(r=this.tokenizer.def(e)))e=e.substring(r.raw.length),this.tokens.links[r.tag]||(this.tokens.links[r.tag]={href:r.href,title:r.title});else if(r=this.tokenizer.table(e))e=e.substring(r.raw.length),t.push(r);else if(r=this.tokenizer.lheading(e))e=e.substring(r.raw.length),t.push(r);else if(n&&(r=this.tokenizer.paragraph(e)))e=e.substring(r.raw.length),t.push(r);else if(r=this.tokenizer.text(e))e=e.substring(r.raw.length),t.push(r);else if(e){const t="Infinite loop on byte: "+e.charCodeAt(0);if(this.options.silent){console.error(t);break}throw new Error(t)}return t}inline(e){let t,n,r,i,a,o;const u=e.length;for(t=0;t<u;t++)switch(o=e[t],o.type){case"paragraph":case"text":case"heading":o.tokens=[],this.inlineTokens(o.text,o.tokens);break;case"table":for(o.tokens={header:[],cells:[]},i=o.header.length,n=0;n<i;n++)o.tokens.header[n]=[],this.inlineTokens(o.header[n],o.tokens.header[n]);for(i=o.cells.length,n=0;n<i;n++)for(a=o.cells[n],o.tokens.cells[n]=[],r=0;r<a.length;r++)o.tokens.cells[n][r]=[],this.inlineTokens(a[r],o.tokens.cells[n][r]);break;case"blockquote":this.inline(o.tokens);break;case"list":for(i=o.items.length,n=0;n<i;n++)this.inline(o.items[n].tokens)}return e}inlineTokens(e,t=[],n=!1,r=!1){let i;for(;e;)if(i=this.tokenizer.escape(e))e=e.substring(i.raw.length),t.push(i);else if(i=this.tokenizer.tag(e,n,r))e=e.substring(i.raw.length),n=i.inLink,r=i.inRawBlock,t.push(i);else if(i=this.tokenizer.link(e))e=e.substring(i.raw.length),"link"===i.type&&(i.tokens=this.inlineTokens(i.text,[],!0,r)),t.push(i);else if(i=this.tokenizer.reflink(e,this.tokens.links))e=e.substring(i.raw.length),"link"===i.type&&(i.tokens=this.inlineTokens(i.text,[],!0,r)),t.push(i);else if(i=this.tokenizer.strong(e))e=e.substring(i.raw.length),i.tokens=this.inlineTokens(i.text,[],n,r),t.push(i);else if(i=this.tokenizer.em(e))e=e.substring(i.raw.length),i.tokens=this.inlineTokens(i.text,[],n,r),t.push(i);else if(i=this.tokenizer.codespan(e))e=e.substring(i.raw.length),t.push(i);else if(i=this.tokenizer.br(e))e=e.substring(i.raw.length),t.push(i);else if(i=this.tokenizer.del(e))e=e.substring(i.raw.length),i.tokens=this.inlineTokens(i.text,[],n,r),t.push(i);else if(i=this.tokenizer.autolink(e,l))e=e.substring(i.raw.length),t.push(i);else if(n||!(i=this.tokenizer.url(e,l))){if(i=this.tokenizer.inlineText(e,r,u))e=e.substring(i.raw.length),t.push(i);else if(e){const t="Infinite loop on byte: "+e.charCodeAt(0);if(this.options.silent){console.error(t);break}throw new Error(t)}}else e=e.substring(i.raw.length),t.push(i);return t}}},function(e,t,n){const{noopTest:r,edit:i,merge:a}=n(9),o={newline:/^\n+/,code:/^( {4}[^\n]+\n*)+/,fences:/^ {0,3}(`{3,}(?=[^`\n]*\n)|~{3,})([^\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[~`]* *(?:\n+|$)|$)/,hr:/^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\* *){3,})(?:\n+|$)/,heading:/^ {0,3}(#{1,6}) +([^\n]*?)(?: +#+)? *(?:\n+|$)/,blockquote:/^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,list:/^( {0,3})(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,html:"^ {0,3}(?:<(script|pre|style)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?\\?>\\n*|<![A-Z][\\s\\S]*?>\\n*|<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\n*|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:\\n{2,}|$)|<(?!script|pre|style)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:\\n{2,}|$)|</(?!script|pre|style)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:\\n{2,}|$))",def:/^ {0,3}\[(label)\]: *\n? *<?([^\s>]+)>?(?:(?: +\n? *| *\n *)(title))? *(?:\n+|$)/,nptable:r,table:r,lheading:/^([^\n]+)\n {0,3}(=+|-+) *(?:\n+|$)/,_paragraph:/^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html)[^\n]+)*)/,text:/^[^\n]+/,_label:/(?!\s*\])(?:\\[\[\]]|[^\[\]])+/,_title:/(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/};o.def=i(o.def).replace("label",o._label).replace("title",o._title).getRegex(),o.bullet=/(?:[*+-]|\d{1,9}\.)/,o.item=/^( *)(bull) ?[^\n]*(?:\n(?!\1bull ?)[^\n]*)*/,o.item=i(o.item,"gm").replace(/bull/g,o.bullet).getRegex(),o.list=i(o.list).replace(/bull/g,o.bullet).replace("hr","\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def","\\n+(?="+o.def.source+")").getRegex(),o._tag="address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul",o._comment=/<!--(?!-?>)[\s\S]*?-->/,o.html=i(o.html,"i").replace("comment",o._comment).replace("tag",o._tag).replace("attribute",/ +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex(),o.paragraph=i(o._paragraph).replace("hr",o.hr).replace("heading"," {0,3}#{1,6} ").replace("|lheading","").replace("blockquote"," {0,3}>").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|!--)").replace("tag",o._tag).getRegex(),o.blockquote=i(o.blockquote).replace("paragraph",o.paragraph).getRegex(),o.normal=a({},o),o.gfm=a({},o.normal,{nptable:"^ *([^|\\n ].*\\|.*)\\n *([-:]+ *\\|[-| :]*)(?:\\n((?:(?!\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)",table:"^ *\\|(.+)\\n *\\|?( *[-:]+[-| :]*)(?:\\n *((?:(?!\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)"}),o.gfm.nptable=i(o.gfm.nptable).replace("hr",o.hr).replace("heading"," {0,3}#{1,6} ").replace("blockquote"," {0,3}>").replace("code"," {4}[^\\n]").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|!--)").replace("tag",o._tag).getRegex(),o.gfm.table=i(o.gfm.table).replace("hr",o.hr).replace("heading"," {0,3}#{1,6} ").replace("blockquote"," {0,3}>").replace("code"," {4}[^\\n]").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|!--)").replace("tag",o._tag).getRegex(),o.pedantic=a({},o.normal,{html:i("^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:\"[^\"]*\"|'[^']*'|\\s[^'\"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))").replace("comment",o._comment).replace(/tag/g,"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),def:/^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,heading:/^ *(#{1,6}) *([^\n]+?) *(?:#+ *)?(?:\n+|$)/,fences:r,paragraph:i(o.normal._paragraph).replace("hr",o.hr).replace("heading"," *#{1,6} *[^\n]").replace("lheading",o.lheading).replace("blockquote"," {0,3}>").replace("|fences","").replace("|list","").replace("|html","").getRegex()});const u={escape:/^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,autolink:/^<(scheme:[^\s\x00-\x1f<>]*|email)>/,url:r,tag:"^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",link:/^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,reflink:/^!?\[(label)\]\[(?!\s*\])((?:\\[\[\]]?|[^\[\]\\])+)\]/,nolink:/^!?\[(?!\s*\])((?:\[[^\[\]]*\]|\\[\[\]]|[^\[\]])*)\](?:\[\])?/,strong:/^__([^\s_])__(?!_)|^\*\*([^\s*])\*\*(?!\*)|^__([^\s][\s\S]*?[^\s])__(?!_)|^\*\*([^\s][\s\S]*?[^\s])\*\*(?!\*)/,em:/^_([^\s_])_(?!_)|^_([^\s_<][\s\S]*?[^\s_])_(?!_|[^\spunctuation])|^_([^\s_<][\s\S]*?[^\s])_(?!_|[^\spunctuation])|^\*([^\s*<\[])\*(?!\*)|^\*([^\s<"][\s\S]*?[^\s\[\*])\*(?![\]`punctuation])|^\*([^\s*"<\[][\s\S]*[^\s])\*(?!\*)/,code:/^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,br:/^( {2,}|\\)\n(?!\s*$)/,del:r,text:/^(`+|[^`])(?:[\s\S]*?(?:(?=[\\<!\[`*]|\b_|$)|[^ ](?= {2,}\n))|(?= {2,}\n))/,_punctuation:"!\"#$%&'()*+\\-./:;<=>?@\\[^_{|}~"};u.em=i(u.em).replace(/punctuation/g,u._punctuation).getRegex(),u._escapes=/\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g,u._scheme=/[a-zA-Z][a-zA-Z0-9+.-]{1,31}/,u._email=/[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/,u.autolink=i(u.autolink).replace("scheme",u._scheme).replace("email",u._email).getRegex(),u._attribute=/\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/,u.tag=i(u.tag).replace("comment",o._comment).replace("attribute",u._attribute).getRegex(),u._label=/(?:\[[^\[\]]*\]|\\.|`[^`]*`|[^\[\]\\`])*?/,u._href=/<(?:\\[<>]?|[^\s<>\\])*>|[^\s\x00-\x1f]*/,u._title=/"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/,u.link=i(u.link).replace("label",u._label).replace("href",u._href).replace("title",u._title).getRegex(),u.reflink=i(u.reflink).replace("label",u._label).getRegex(),u.normal=a({},u),u.pedantic=a({},u.normal,{strong:/^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,em:/^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/,link:i(/^!?\[(label)\]\((.*?)\)/).replace("label",u._label).getRegex(),reflink:i(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label",u._label).getRegex()}),u.gfm=a({},u.normal,{escape:i(u.escape).replace("])","~|])").getRegex(),_extended_email:/[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,url:/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,_backpedal:/(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,del:/^~+(?=\S)([\s\S]*?\S)~+/,text:/^(`+|[^`])(?:[\s\S]*?(?:(?=[\\<!\[`*~]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@))|(?= {2,}\n|[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@))/}),u.gfm.url=i(u.gfm.url,"i").replace("email",u.gfm._extended_email).getRegex(),u.breaks=a({},u.gfm,{br:i(u.br).replace("{2,}","*").getRegex(),text:i(u.gfm.text).replace("\\b_","\\b_| {2,}\\n").replace(/\{2,\}/g,"*").getRegex()}),e.exports={block:o,inline:u}},function(e,t,n){const r=n(39),i=n(40),a=n(41),{defaults:o}=n(8),{unescape:u}=n(9);e.exports=class e{constructor(e){this.options=e||o,this.options.renderer=this.options.renderer||new r,this.renderer=this.options.renderer,this.renderer.options=this.options,this.textRenderer=new i,this.slugger=new a}static parse(t,n){return new e(n).parse(t)}parse(e,t=!0){let n,r,i,a,o,l,c,s,f,d,p,g,h,m,v,y,b,_,k="";const w=e.length;for(n=0;n<w;n++)switch(d=e[n],d.type){case"space":continue;case"hr":k+=this.renderer.hr();continue;case"heading":k+=this.renderer.heading(this.parseInline(d.tokens),d.depth,u(this.parseInline(d.tokens,this.textRenderer)),this.slugger);continue;case"code":k+=this.renderer.code(d.text,d.lang,d.escaped);continue;case"table":for(s="",c="",a=d.header.length,r=0;r<a;r++)c+=this.renderer.tablecell(this.parseInline(d.tokens.header[r]),{header:!0,align:d.align[r]});for(s+=this.renderer.tablerow(c),f="",a=d.cells.length,r=0;r<a;r++){for(l=d.tokens.cells[r],c="",o=l.length,i=0;i<o;i++)c+=this.renderer.tablecell(this.parseInline(l[i]),{header:!1,align:d.align[i]});f+=this.renderer.tablerow(c)}k+=this.renderer.table(s,f);continue;case"blockquote":f=this.parse(d.tokens),k+=this.renderer.blockquote(f);continue;case"list":for(p=d.ordered,g=d.start,h=d.loose,a=d.items.length,f="",r=0;r<a;r++)v=d.items[r],y=v.checked,b=v.task,m="",v.task&&(_=this.renderer.checkbox(y),h?"text"===v.tokens[0].type?(v.tokens[0].text=_+" "+v.tokens[0].text,v.tokens[0].tokens&&v.tokens[0].tokens.length>0&&"text"===v.tokens[0].tokens[0].type&&(v.tokens[0].tokens[0].text=_+" "+v.tokens[0].tokens[0].text)):v.tokens.unshift({type:"text",text:_}):m+=_),m+=this.parse(v.tokens,h),f+=this.renderer.listitem(m,b,y);k+=this.renderer.list(f,p,g);continue;case"html":k+=this.renderer.html(d.text);continue;case"paragraph":k+=this.renderer.paragraph(this.parseInline(d.tokens));continue;case"text":for(f=d.tokens?this.parseInline(d.tokens):d.text;n+1<w&&"text"===e[n+1].type;)d=e[++n],f+="\n"+(d.tokens?this.parseInline(d.tokens):d.text);k+=t?this.renderer.paragraph(f):f;continue;default:{const e='Token with "'+d.type+'" type was not found.';if(this.options.silent)return void console.error(e);throw new Error(e)}}return k}parseInline(e,t){t=t||this.renderer;let n,r,i="";const a=e.length;for(n=0;n<a;n++)switch(r=e[n],r.type){case"escape":i+=t.text(r.text);break;case"html":i+=t.html(r.text);break;case"link":i+=t.link(r.href,r.title,this.parseInline(r.tokens,t));break;case"image":i+=t.image(r.href,r.title,r.text);break;case"strong":i+=t.strong(this.parseInline(r.tokens,t));break;case"em":i+=t.em(this.parseInline(r.tokens,t));break;case"codespan":i+=t.codespan(r.text);break;case"br":i+=t.br();break;case"del":i+=t.del(this.parseInline(r.tokens,t));break;case"text":i+=t.text(r.text);break;default:{const e='Token with "'+r.type+'" type was not found.';if(this.options.silent)return void console.error(e);throw new Error(e)}}return i}}},function(e,t,n){"use strict";var r=n(4),i={article:r.style([r.background([5194459,"fff"]),[r.selector("h1:first-child",[r.marginTop([25096,0]),[r.borderBottom([25096,0],12956715,582626130),[r.paddingBottom([25096,0]),0]]]),[r.selector("img",[r.width([-119887163,100]),0]),0]]])};t.Styles=i},function(e,t,n){var r={"./functional-programming-in-rust/index.md":93,"./infer-types-typescript/index.md":95,"./mutable-immutable-typescript/index.md":96,"./react-pattern-in-vue/index.md":97};function i(e){var t=a(e);return n(t)}function a(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}i.keys=function(){return Object.keys(r)},i.resolve=a,e.exports=i,i.id=92},function(e,t,n){var r=" <p><img src="+n(42)(n(94))+" alt=&quot;fp-in-rust&quot;></p> <h1 id=functional-programming-in-rust>Functional Programming in Rust</h1> <p>A month ago when I first developed a non-commercial project using <a href=https://reasonml.github.io/ >ReasonML</a>, I got a new experience, is a <em>functional programming</em>. This language is an alternative syntax from <a href=https://ocaml.org/ >OCaml</a>. OCaml itself is a purely functional language, the features offered are interesting. For example: type inference, strongly type system, algebraic datatypes, and many more. Interesting right?</p> <p>Now after trying that, I began to interest functional programming. Finally i tried to implement the functional paradigm in a different language, namely <a href=http://rustlang.org/ >Rust</a>.</p> <h3 id=introduction>Introduction</h3> <p>Functional programming (FP) is a programming paradigm which allows us to write expressive, concise, and elegant code. Functional programming also helps developers to manage code so that it doesn&#39;t <strong>DRY (Don&#39;t Repeat Yourself)</strong> that&#39;s mean doesn&#39;t write the same code over and over again. Other functional languages for example like Lisp, Clojure, Erlang, Haskell, R, and many more.</p> <h3 id=okay-but-why-rust>Okay, but why Rust?</h3> <p>The question is, is a <strong>Rust functional language?</strong> the answer is, no. Although Rust himself was inspired by <strong>ML family of language</strong>, Rust it&#39;s not functional. But fortunately Rust has several features that are similar to other functional languages, such as: algebraic datatypes, expressive types, and others.</p> <h3 id=tables-of-contents>Tables of Contents</h3> <ul> <li>Primitive Types</li> <li>Closures</li> <li>Currying</li> <li>Recursion</li> <li>Higher Order Functions(HOF)</li> <li>Lazy evaluations</li> </ul> <h2 id=a-idprimitiveaprimitive-types><a id=primitive></a>Primitive Types</h2> <p>In order not to jump right away, it would be nice if we had to know several data types in Rust. This also applies to all programming languages.</p> <h3 id=booleans>Booleans</h3> <p>The most basic datatype is the simple <code>true / false</code> value, in Rust it&#39;s called <code>bool</code></p> <pre><code class=language-rust>let x = true;\nlet y: bool = false;</code></pre> <h3 id=char>Char</h3> <p>The <code>char</code> data type has a single Unicode value. We can use <code>char</code> data type with a single tick (<code>&#39;</code>)</p> <pre><code class=language-rust>let x = &#39;x&#39;;\nlet two_hearts = &#39;💕&#39;;</code></pre> <p>Unlike some other languages, <code>char</code> in Rust is not one byte, but four.</p> <h3 id=numeric-types>Numeric Types</h3> <p>Rust has several numeric type category variants, such as signed(<code>i</code>) dan unsigned(<code>u</code>), fixed size (<code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>) dan variable(<code>isize</code>, <code>usize</code>) types.</p> <pre><code class=language-rust>let x = 42; // `x` has type `i32`.\nlet y = 1.0; // `y` has type `f64`.</code></pre> <h3 id=arrays>Arrays</h3> <p>Like many other programming languages, Rust also has an array data type. By default, arrays in Rust can&#39;t be changed. Unless you initialize it with <a href=https://doc.rust-lang.org/rust-by-example/scope/borrow/mut.html><code>mut</code></a></p> <pre><code class=language-rust>let a = [1, 2, 3]; // a: [i32; 3]\nlet mut m = [1, 2, 3]; // m: [i32; 3]</code></pre> <h3 id=functions>Functions</h3> <p>Functions also have data types! For example like:</p> <pre><code class=language-rust>fn foo(x: i32) -&gt; i32 { x }\nlet x: fn(i32) -&gt; i32 = foo;</code></pre> <p>In this case, the <code>foo ()</code> function has a return type <code>numeric: i32</code>, and returns the value<code>x</code>.</p> <blockquote> <p>For more information, you can check here: <a href=https://doc.rust-lang.org/1.29.0/book/first-edition/primitive-types.html>primitive types</a></p> </blockquote> <h2 id=a-idclosuresaclosures><a id=closures></a>Closures</h2> <blockquote> <p>*&quot;Closure is a mechanism by which an inner function will have access to the variables defined in its outer function’s lexical scope even after the outer function has returned.&quot;* </p> </blockquote> <p>Up to here understand? in short <em>closures</em> is an inner function that has access to retrieve a value throughout the scope both inside and outside.</p> <pre><code class=language-rust>fn fmt(prev_str: &amp;str) -&gt; String {\n    let mut new_str = String::new();\n\n    let closure_annotated = |next_str| -&gt; String {\n        new_str.push_str(prev_str);\n        new_str.push_str(next_str);\n        return new_str;\n    };\n\n    closure_annotated(&quot;dolor sit amet&quot;)\n}\n\nlet r_txt = &quot;Lorem ipsum &quot;;\nassert_eq!(&quot;Lorem ipsum dolor sit amet&quot;, fmt(r_txt));</code></pre> <p>In this case, in <code>new_str.push_str ()</code> section where <code>closure_annotated</code> accesses the<code>new_str</code> variable then changes the value and returns it outside the scope.</p> <h2 id=a-idcurryingacurrying><a id=currying></a>Currying</h2> <p>Currying is a process in functional programming in which we can transform a function with multiple arguments into a sequence of nesting functions. It returns a new function that expects the next argument inline.</p> <pre><code class=language-rust>#[derive(Debug)]\nstruct States&lt;&#39;a&gt; {\n    a: &amp;&#39;a i32,\n    b: &amp;&#39;a i32,\n}\n\ntrait Currying {\n    type ReturnType: Fn(i32) -&gt; i32;\n    fn add(self) -&gt; Self::ReturnType;\n}\n\nimpl Currying for States&lt;&#39;static&gt;{\n    type ReturnType = Box&lt;dyn Fn(i32) -&gt; i32&gt;;\n\n    fn add(self) -&gt; Self::ReturnType {\n        Box::new(move|x| {\n            x * self.a\n        })\n    }\n}\n\nlet r_value: States = States {\n    a: &amp;100,\n    b: &amp;100\n};\n\nlet r1 = r_value.add();\nlet r2 = r1(5);\n\nassert_eq!(500, r2);\n</code></pre> <p>There are 2 parameters here, namely <code>a</code>,<code>b</code> where each has a numeric data type, then in <code>trait</code> section is a <em>function interface</em>, a place for initializing functions. These traits are similar to <a href=https://www.typescriptlang.org/docs/handbook/interfaces.html>typescript interfaces</a>.</p> <h2 id=a-idrecursionarecursion><a id=recursion></a>Recursion</h2> <p>Simply, recursion is a <code>procedure / function</code> that calls itself, which functions to create / process the data that you want to return.</p> <pre><code class=language-rust>#[allow(non_camel_case_types)] \ntype i64_t = i64;\n\ntrait Factor {\n    fn factorial_tail_rec(val: i64_t) -&gt; Self;\n    fn factorial(num: i64_t) -&gt; Self;\n}\n\nimpl Factor for i64_t {\n    fn factorial_tail_rec(val: i64_t) -&gt; Self {\n        val\n    }\n\n    fn factorial(num: i64_t) -&gt; Self {\n        match num {\n            0 =&gt; 1,\n            _ =&gt; num * Self::factorial_tail_rec(num - 1)\n        }\n    }\n}\n\nlet result: i64_t = Factor::factorial(3); \nassert_eq!(6, result);</code></pre> <p>This is a factorial function, where if the argument value of the parameter num <code>! == 0</code>, then that value will be multiplied by each number below it. For example <code>(5! = 5 * 4 * 3 * 2 * 1 = 120)</code>.</p> <h2 id=a-idhofahigher-order-functionshof><a id=hof></a>Higher Order Functions(HOF)</h2> <p>Higher order functions are functions that use other functions as parameters or as a result of returns.</p> <pre><code class=language-rust>fn map&lt;F&gt;(arr: &amp;[i32], func: F) -&gt; Vec&lt;i32&gt; where F: Fn(&amp;i32) -&gt; i32{\n    let mut new_array: Vec&lt;i32&gt; = vec![];\n    for i in arr.iter() {\n        new_array.push(func(i))\n    }\n\n    return new_array\n}\n\nlet lists = vec![1, 4, 9, 16];\nlet result = map(&amp;lists, |i| *i + 2);\n\nassert_eq!(vec![3, 6, 11, 18], result)</code></pre> <p>So <code>func</code> and<code>map</code> are higher order functions, where this function is used to change every contents of an array. The return result is a new array of the same length as the modified <code>originalArray</code>.</p> <h2 id=a-idlazyalazy-evaluation><a id=lazy></a>Lazy Evaluation</h2> <p>Lazy evaluation or non-strict evaluation is a process of holding the evaluation of an <code>expression/function</code> until the value is needed. The goal is to avoid repeated evaluations.</p> <pre><code class=language-rust>struct State {\n    x: i32,\n}\n\ntrait Lazy {\n    fn add(&amp;self) -&gt; i32;\n    fn multiply(&amp;self) -&gt; i32;\n    fn add_or_multiply(&amp;self, add: bool) -&gt; i32;\n}\n\nimpl Lazy for State {\n    fn add(&amp;self) -&gt; i32 {\n        println!(&quot;executing add&quot;);\n        &amp;self.x + &amp;self.x\n    }\n\n    fn multiply(&amp;self) -&gt; i32 {\n        println!(&quot;executing multiply&quot;);\n        &amp;self.x * &amp;self.x\n    }\n\n    fn add_or_multiply(&amp;self, add: bool) -&gt; i32 { \n        match add {\n            true =&gt; self.add(),\n            false =&gt;  self.multiply(),\n        }\n    }\n}\n\nlet val: State = State {\n    x: 20\n};\n\nassert_eq!(40, val.add_or_multiply(true));\nassert_eq!(400, val.add_or_multiply(false));</code></pre> <h2 id=functional-programming-references>Functional Programming References</h2> <ul> <li><a href=https://deepu.tech/functional-programming-in-go/ >Functional Programming in Go</a></li> <li><a href=https://eloquentjavascript.net/1st_edition/chapter6.html>Eloquent Javascript Functional Programming</a></li> <li><a href=https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures>Closures Developer Mozilla</a> </li> </ul> <h2 id=motivation>Motivation</h2> <p>Functional programming (FP) provides many advantages, and its popularity has been increasing as a result. However, each programming paradigm comes with its own unique jargon and FP is no exception. By providing a glossary, i hope to make learning FP easier✌️</p> ";e.exports=r},function(e,t,n){"use strict";n.r(t),t.default=n.p+"2ca26068bdf3076efd108345f65a8a83.png"},function(e,t){e.exports=" <h1 id=infer-types---typescript>Infer Types - TypeScript</h1> <p>Ini ceritanya mau buat catatan episode berlanjut tentang TS mulai dari beginner sampai advanced hehe, untuk first time lagi coba latihan <a href=https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html>infer types</a>, iseng2 liat dokumentasi Rust, ada tipe data <a href=https://doc.rust-lang.org/std/result/index.html><code>Result</code></a> dan <a href=https://doc.rust-lang.org/std/option/index.html><code>Option</code></a>.</p> <h3 id=result>Result</h3> <p>Singkatnya, tipe data <code>Result</code> adalah tipe data yang mewakili 2 result yaitu <code>Ok()</code> sama <code>Err()</code> artinya resultnya ada 2, berhasil sama tidak. Jadi tipe data ini sangat useful untuk masalah menghandle error di <code>expression/function</code> kamu, contoh casenya mirip seperti <code>try catch</code> pada javascript.</p> <p>Berikut kodenya (Rust):</p> <pre><code class=language-rust>#[derive(Debug)]\nenum Version { Version1, Version2 }\n\nfn parse_version(header: &amp;[u8]) -&gt; Result&lt;Version, &amp;&#39;static str&gt; {\n    match header.get(0) {\n        None =&gt; Err(&quot;invalid header length&quot;),\n        Some(&amp;1) =&gt; Ok(Version::Version1),\n        Some(&amp;2) =&gt; Ok(Version::Version2),\n        Some(_) =&gt; Err(&quot;invalid version&quot;),\n    }\n}\n\nlet version = parse_version(&amp;[1, 2, 3, 4]);\nmatch version {\n    Ok(v) =&gt; println!(&quot;working with version: {:?}&quot;, v),\n    Err(e) =&gt; println!(&quot;error parsing header: {:?}&quot;, e),\n}</code></pre> <h3 id=option>Option</h3> <p>Nah kalo <code>Option</code>, sebenernya ini ibarat <code>null/undefined</code> di javascript, jadi merupakan data opsional alias (datanya bisa ada bisa engga), karena di Rust ga ada yg namanya tipe data null, <em>because it&#39;s not safe</em> hehe.</p> <p>Berikut kodenya (Rust):</p> <pre><code class=language-rust>let optional = None;\ncheck_optional(optional);\n\nlet optional = Some(Box::new(9000));\ncheck_optional(optional);\n\nfn check_optional(optional: Option&lt;Box&lt;i32&gt;&gt;) {\n    match optional {\n        Some(p) =&gt; println!(&quot;has value {}&quot;, p),\n        None =&gt; println!(&quot;has no value&quot;),\n    }\n}</code></pre> <p>Eh, wait artikelnya belum kelar, masi ada dibawahnya..................................................................................................................................................................................................................................................................</p> <h2 id=typescript>TypeScript</h2> <p>Nah dibagian ini kita coba ngimplementasiin kode diatas pake TypeScript, sebelumnya bisa baca ini dulu pake refreshing <a href=https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html>ts handbook, infer types</a>. </p> <p>Kali ini saya akan menjelaskan bagian terpentingnya saja, sisanya bisa dicari di docnya, atau discuss langsung di komentar yaaa;). Mulai dari <code>Result</code>, berikut kodenya:</p> <h3 id=result-ts>Result (TS)</h3> <pre><code class=language-ts>type Err = Error;\n\ntype Result&lt;A, B&gt; = \n    A extends Err ? B : A | B; \n\ntype TypeOfReturn&lt;T&gt; = ReturnType&lt;() =&gt; T&gt;;\n\nfunction Ok&lt;T&gt;(callable: () =&gt; T): TypeOfReturn&lt;T&gt; {\n    return callable()\n}\nfunction Err( callable: () =&gt; any): Error {\n    throw new Error(callable())\n}\nfunction guess(t: number): Result&lt;boolean, Error&gt;{\n   switch (t&lt;1 || t &gt; 10) {\n       case true: {\n           return Ok&lt;boolean&gt;(() =&gt; true)\n       }\n       case false: {\n           return Err(() =&gt; &quot;This is a terrible mistake!&quot;)\n       }\n   }\n};</code></pre> <pre><code class=language-ts>type Result&lt;A, B&gt; = \n    A extends Err ? B : A | B; </code></pre> <p>Tipe data <code>Result</code> punya 2 parameter, <code>A, B</code>, isinya berupa conditional types bahwa jika parameter A punya tipe data <code>Error</code>, jika <code>!true</code> make isi tipe data ini adalah sebuah union types <code>A | B</code>. </p> <p>Note: sebelumnya kalian baca ini juga yaa <a href=https://www.typescriptlang.org/docs/handbook/generics.html>generic types</a>.</p> <h3 id=option-ts>Option (TS)</h3> <pre><code class=language-ts>\ntype Option&lt;A, B&gt; =\n    A extends (infer A) ? A | B | undefined : never;\n\ntype TypeOfReturn&lt;T&gt; = ReturnType&lt;() =&gt; T&gt;;\ntype TypeOfReturnUndefined&lt;T&gt; = ReturnType&lt;() =&gt; T&gt; | ReturnType&lt;() =&gt; undefined&gt;;\n\nfunction Some&lt;T&gt;(callable: () =&gt; T): TypeOfReturn&lt;T&gt; {\n    return callable()\n}\nfunction None&lt;T&gt;(optionalCallable?: () =&gt; T | undefined): TypeOfReturnUndefined&lt;T&gt; {\n    return (optionalCallable === undefined) ? undefined : optionalCallable();\n}\n\nfunction check(n: number): Option&lt;number, boolean&gt; {\n    if (n &gt; 25) {\n        return Some&lt;number&gt;(() =&gt; n)\n    } else {\n        return None&lt;boolean&gt;(() =&gt; false)\n    }\n}</code></pre> <p>Kalo option, karena sifatnya <em>nullable</em> maka perlu tambahan <code>undefined</code>, jadi ini digunain ketika function <code>None()</code> dipanggil, sifatnya ada 2, bisa <code>undefined</code> ataupun ada sebuah nilai, ataupun expression didalamnya.</p> <p>Okay, semoga bermanfaat. Kalo mau coba2 kalian bisa rebuild code ini menjadi lebih singkat ya, atau mungkin ada yg bisa diperbaiki <em>feel free to discuss</em> ;)</p> <p>Gist github: <a href=https://gist.github.com/alfinsuryaS/81b6808eef4fbf9dab5f80212898aded>Challenge_01</a> | <a href=https://gist.github.com/alfinsuryaS/ff8e12ac5e9eca7ac3e186d3deb8f980>Challenge_01_1</a></p> "},function(e,t){e.exports=" <h1 id=mutableimmutable-typescript>Mutable/Immutable TypeScript</h1> <p>Hai semua! Welcome ya, semoga bisa banya memberikan kontribusi di blog ini. Okey, di thread ini kita akan membahas apa si itu mutable/immutable pada JavaScript/TypeScript. </p> <p>Ketika online interview di salah satu perusahaan di Jakarta, saya mendapatkan beberapa pertanyaan fundamental mengenai javascript, salah satunya adalah pertanyaan ini, &quot;Apa itu mutable dan immutable pada Javascript&quot;. Dari sini kita tahu kan bahwa hal-hal sepele seperti ini juga ternyata sangat penting kita pahami bebet bibit bobotnya bagaiamana. Maka dari itu pahami fundamentalnya terlebih dahulu, jangan loncat terlalu jauh ya, supaya lebih paham.</p> <h2 id=apa-itu-mutability-atau-immutability>Apa itu Mutability? atau Immutability?</h2> <p>Mutability dan immutability merupakan suatu konsep penting dalam dunia pemrograman. Mutability dan immutability pada dasarnya adalah sebuah objek dimana immutable objek adalah objek yang state/nilainya tidak dapat diubah, sedangkan mutable adalah sebaliknya, nilai/statenya dapat diubah.</p> <p>Contohnya ketika ada sebuah string dengan valuenya &quot;cat&quot;, jika kamu inisialize value tersebut immutable, maka ketika kamu mengubah/mengganti value &quot;cat&quot; menjadi &quot;rat&quot; itu tidak akan bisa, karena sifatnya yg immutable. Secara <strong>default</strong> di JavaScript semua variable yg dideklarasikan yg bukan constant bersifat <code>mutable</code>.</p> <p>Dicase kali ini, kita akan menggunakan TypeScript sebagai bantuan agar lebih strong hehe ;)</p> <h2 id=let-vs-const-vs-var><code>let</code> vs <code>const</code> vs <code>var</code></h2> <p>Ha, apa ini? let const var? Apa hubungannya dengan mutability dan immutability? Yap, tentunya kita sudah sering menggunakan ini ketika mendeklarasikan sebuah variable <code>let</code>, <code>const</code> dan <code>var</code> tapi tak jarang kita missconception dengan ketiga variable ini.</p> <h3 id=sifat>Sifat</h3> <p>Coba lihat kode berikut ini: </p> <pre><code class=language-ts>let num1 = 2 + 3;\nconst num2 = 5 + 9;\nvar num3 = 30;\n\n(function () {\n    num1 = 32; // Ok\n    num2 = 10; // Err\n    num3 = 50; // Ok\n})();</code></pre> <p>Di kode tersebut, terdapat 3 variable <code>num1</code>, <code>num2</code>, dan <code>num3</code>, dan di dalam scope anonymous function kita ingin mengubah nilai dari masing-masing variable tersebut, dan hasilnya kamu akan lihat pada saat compile time, dibagian <code>num2 = ..</code> muncul error seperti ini <em><code>Cannot assign to &#39;num2&#39; because it is a constant</code></em>. </p> <p>Dari sana sudah jelas kan, bahwa variable constant <code>num2</code> nilainya <strong>tidak dapat diubah</strong> alias <code>immutable</code>, sedangkan yang lainnya seperti yang sudah dijelaskan diatas, bahwa secara default semua variable bersifat <code>mutable</code> alias bisa diubah.</p> <h3 id=scope>Scope</h3> <p>Coba lihat kode berikut ini: </p> <pre><code class=language-ts>{\n    let txt1 = &quot;Text from javasript&quot;; // local scope\n    const txt2 = &quot;Text from javasript&quot;; // local scope\n    var txt3 = &quot;Text from javasript&quot;; //global scope\n}\n\ntxt1; //Err\ntxt2; // Err\ntxt3; // Ok</code></pre> <p>Berdasarkan scopenya <code>let</code> dan <code>const</code> adalah <strong>local scope</strong>, sedangkan <code>var</code> scopenya adalah <strong>global scope</strong>. Maka ketika kita ingin mengakses variable <code>txt1</code> dan <code>txt2</code> kita akan mendapati error, karena kedua variable tersebut berada di dalam anonymous scope. </p> <h2 id=string>String</h2> <p>Coba lihat kode berikut ini:</p> <pre><code class=language-ts>let val1 = &quot;Value&quot;\nconst val2 = &quot;Value&quot;\n\n{\n    val1 = &quot;Value1&quot; // Ok\n    val2 = &quot;Value2&quot; // Err\n}</code></pre> <p>Seperti yang dijelaskan sebelumnya, bahwa nilai constant tidak dapat diubah, jadi nilai dari <code>val2</code> tidak dapat diubah.</p> <h2 id=object>Object</h2> <p>Coba lihat kode berikut ini:</p> <pre><code class=language-ts>type ArrayImmutable&lt;T&gt; = ReadonlyArray&lt;T&gt;;\ntype ArrayImmutableInline&lt;T&gt; = readonly T[]; \n\nlet array_mut = [6, 7, 8, 9, 10];\nlet array_immutable: ArrayImmutableInline&lt;number&gt; = [1, 2, 3, 4, 5];\nlet array_immutable2: ArrayImmutable&lt;number&gt; = [11, 12, 13, 14, 15];\n\narray_mut[0] = 2; //Ok\narray_immutable[0] = 5; //Err:\narray_immutable2[0] = 20; // Err</code></pre> <p>Di typescript sendiri kita bisa menggunakan <code>ReadonlyArray&lt;T&gt;</code> atau <code>readonly T[]</code> untuk membuat nilai/value array agar bersifat <code>immutable</code>. </p> <p>Nah, secara default type <code>readonly</code> ini hanya berlaku pada object saja, contohnya kita ingin membuat seperti ini <code>let txt readonly string = &quot;value&quot;</code>, maka yg terjadi adalah error karena <code>readonly</code> cuma bisa dipakai di object saja. </p> <p>Coba lihat kode berikut ini:</p> <pre><code class=language-ts>interface IObj {\n    readonly[t: number]: number;\n}\n\nlet obj: IObj = {\n    0: 123,\n    1: 456,\n    2: 789\n};\n\nobj[1] = 654; // Err</code></pre> <p>Sekian dari saya, semoga bermanfaat ya. Kalo ada yang mau ditanyakan silahkan di komentar, atau pm langsung. Semangat! Don&#39;t give up!.</p> "},function(e,t,n){var r=" <p><img src="+n(42)(n(98))+" alt=&quot;main&quot;></p> <h1 id=react-pattern-in-vueinclude-typescript-🔥>React Pattern in Vue(include: TypeScript) 🔥</h1> <p>Ketika pertama kali kamu ingin belajar suatu teknologi khususnya frontend, biasanya kamu bingung mau mulai dari mana, salah satu alasannya karena kamu dihadapkan dengan banyak pilihan stack, contohnya: Vue, Angular, React, dll. Tentu saja ini membingungkan, maka dari itu supaya tahu bagaimana stack2 itu bekerja, caranya adalah harus langsung mencobanya. Yang perlu diingat semua teknologi punya pros dan consnya masing2.</p> <p>Nah, dalam tulisan ini, kita ga akan ngebahas mana yang terbaik, karena semua digunakan sesuai dengan kebutuhan, yang akan kita bahas disini adalah bagaimana para React developer bisa dengan mudah ngoding di Vue dengan kode yang mirip/sama (97%). Tulisan ini cocok buat kamu bagi para react dev yang lagi ingin bermigrasi ke vue atau sekedar mau belajar.</p> <p>So, ini perjalanan panjang! Baca doa dulu biar adem! 😃</p> <h3 id=persiapan-project>Persiapan Project</h3> <p>Pertama yang harus kita lakukan adalah mengatur project, mulai dengan membuat struktur direktori terlebih dahulu.</p> <p><strong>1. Struktur direktori root</strong></p> <p>Ini struktur direktori yang kita pakai dalam project ini, didalam folder komponen ada 2 folder yaitu container dan presentational. Kedua folder ini nantinya dipakai untuk membedakan mana komponen logic dan mana komponen view. </p> <pre><code>├── src\n| ├── assets\n| ├── components\n|   ├── container\n|   ├── presentational\n├── redux\n| ├── action\n| ├── reducer\n├─</code></pre><p>Kamu bisa bebas mengatur struktur direktori ini sesuai hati nurani kamu, yang penting kamu suka, nyaman dan aman.</p> <p><strong>2. Menggunakan JSX &amp; TypeScript</strong></p> <p>So, mari kita mulai dengan menginstal beberapa dependensi yang diperlukan. Kita dapat melakukan ini dengan mengetikkan perintah:</p> <pre><code class=language-shell>npm i --save-dev typescript babel-preset-vca-jsx\nnpm i --save-dev @babel/plugin-syntax-dynamic-import @babel/plugin-transform-runtime \nnpm i --save-dev @babel/preset-typescript @types/webpack-env source-map-loader \nnpm uninstall babel-plugin-transform-runtime </code></pre> <p>Kita perlu menghapus package ini <code>babel-plugin-transform-runtime</code>, karena kita sudah menginstal versi yang terbaru <code>@babel/plugin-transform-runtime</code></p> <p>Dan selanjutnya, kita harus mengatur beberapa konfigurasi tambahan karena beberapa packages memerlukan versi Babel yang support.</p> <p>Catatan: Kebetulan saya make boilerplate ini: <a href=https://vuejs-templates.github.io/webpack/ >Vue Webpack Template</a> kamu bisa memilih boilerplate apa saja.</p> <p>Update babel core &amp; babel loader</p> <pre><code class=language-shell>npm i --save-dev babel-core@^7.0.0-0 babel-loader@^8.0.6 \nnpm i --save-dev @babel/core@^7.6.4 @babel/preset-env@^7.6.3 </code></pre> <p>Setelah menginstal semua dependensi, kita harus mengatur konfigurasi tambahan pada <code>.babelrc</code> buka file ini, dan tambahkan config <a href=https://gist.github.com/alfinsuryaS/1deb295c5ab3ec51b322298960ea8b52>.babelrc</a> dan kita juga mengatur webpack loadernya <a href=https://gist.github.com/alfinsuryaS/43d09d7d4e2def9d5a4df0c7623c1870>webpack config</a></p> <p><strong>Catatan:</strong> Untuk typescript loader, ada alternative lain, seperti <a href=https://github.com/s-panferov/awesome-typescript-loader>Awesome TypeScript Loader</a></p> <p>Dan jangan lupa, kamu juga harus menambahkan beberapa config di <code>.eslintrc.js</code></p> <pre><code class=language-js>rules: {\n    &#39;import/extensions&#39;: [&#39;error&#39;, &#39;always&#39;, {\n      jsx: &#39;never&#39;,\n      ts: &#39;never&#39;,\n      tsx: &#39;never&#39;\n    }],\n}</code></pre> <p>Dan selanjutnya, buat file baru <code>tsconfig.json</code> lalu ikutin config ini <a href=https://gist.github.com/alfinsuryaS/ea24b0e729b7a23fcb9d0ea07b71780e>tsconfig.json</a></p> <p>Setelah semua config ditambahkan, hooray! ini waktunya ganti extension seluruh file project kamu dari <code>.jsx/.js</code> ke<code>.tsx/.ts</code></p> <p><strong>Catatan:</strong> Untuk bagian kedua ini memang cukup ribet, kalo mau langsung di skip boleh, kamu bisa pake boilerplate yang saya buat <a href=https://github.com/alfinsuryaS/vue-react>Project Boilerplate</a></p> <p><strong>3. Install dependensi tambahan</strong></p> <pre><code class=language-shell>npm i --save @vue/composition-api vuejs-redux redux @types/redux </code></pre> <h3 id=konsep-utama>Konsep Utama</h3> <p>Sebagai frontend tools yang sangat populer, react dan vue memiliki fitur yang sama, seperti two-way-databinding, templating, routing, components, dan masih banyak lagi.</p> <p>Serupa tapi tak sama, ada beberapa perbedaan antara kedua tools ini, yaitu dalam hal penulisan sintaks, rendering komponen, pengelolaan kondisi dan data. Oleh karena itu, pada bagian ini kita akan mengupas satu per satu cara menerapkan pattern React di Vue.</p> <p><strong>Komponen and Props</strong> Komponen adalah jenis fungsi khusus seperti fungsi JavaScript yang akan menampilkan sebuah element dan dapat digunakan sebagai bagian terpisah dan dapat digunakan kembali. Dalam merender komponen, keduanya sangat berbeda. React mendefinisikan komponen sebagai class atau fungsi, kalo Vue berdasarkan objek.</p> <pre><code>export default createComponent({\n    name: &#39;ComponentProps&#39;,\n    props: {\n        name: String,\n        authorName: Array as () =&gt; string[]\n    },\n    setup(props) {\n        return () =&gt; (\n            &lt;div className=&quot;components-props&quot;&gt;\n                &lt;h2&gt;{props.name}&lt;/h2&gt;\n                &lt;p&gt;{props.authorName}&lt;/p&gt;\n            &lt;/div&gt;\n        )\n    }\n})</code></pre><p>Kita tidak perlu menggunakan <code>template</code> lagi, right?🙂</p> <pre><code>render () {\n  return (\n      &lt;ComponentProps \n         name=&quot;Your name here&quot; \n         commentId={[&#39;Name1&#39;, &#39;Name2&#39;]} \n      /&gt;\n  )\n}</code></pre><p><strong>Render Pengkondisian</strong> Cara kerjanya mirip seperti pengkondisian di javascript biasa, kita bisa menggunakan <code>if else</code> ataupun <code>ternary operator</code></p> <pre><code>export default createComponent({\n    name: &#39;ConditionalRendering&#39;,\n    props: {\n        show: Boolean\n    },\n    setup(props) {\n        return () =&gt; props.show ? &lt;p&gt;True Condition&lt;/p&gt; : &lt;p&gt;False Condition&lt;/p&gt;\n    }\n})</code></pre><pre><code class=language-ts>render() {\n   return &lt;ConditionalRendering show={false}/&gt;\n}</code></pre> <p><strong>Menangani Event</strong> Di Vue JS, saat menangani event, vue memberikan kita arahan untuk menggunakan <code>v-on</code>. Nah karena kita sudah menggunakan JSX, jadi kita tidak membutuhkan itu lagi, kita bisa menggunakan attribut JSX biasa seperti di React :)</p> <pre><code>export default createComponent({\n    setup(props) {\n        return () =&gt; (\n            &lt;button onClick={props.handleButtonClick}&gt;\n                Click Event\n            &lt;/button&gt;\n        )\n    },\n    props: {\n        handleButtonClick: Function as () =&gt; void\n    }\n})</code></pre><pre><code class=language-ts>render () {\n  return (\n       &lt;HandlingEvent \n          handleButtonClick={() =&gt; alert(&quot;Click event. This works!&quot;)} \n       /&gt;\n  )\n}</code></pre> <p><strong>Children</strong> Children komponen digunakan untuk menampilkan apapun yang kamu wrap antara tag pembuka dan penutup. Untuk mengakses komponen ini, kita dapat menggunakan fungsi <code>slots</code>.</p> <pre><code>export default Vue.component(&#39;Children&#39;, {\n    render() {\n        return (\n            &lt;div className=&quot;children&quot;&gt;\n                {this.$slots.default}\n            &lt;/div&gt;\n        )\n    }\n})</code></pre><pre><code>render () {\n  return (\n     &lt;div className=&#39;container&#39;&gt;\n        &lt;Children&gt;\n          {/* what is placed here is passed as children */}\n        &lt;/Children&gt;\n     &lt;/div&gt;\n  )\n}</code></pre><h3 id=siklus-kehidupan--hooks>Siklus Kehidupan &amp; Hooks</h3> <p>Siklus hidup adalah metode yang mengatur tahapan siklus hidup dalam suatu komponen, dan memiliki fungsi masing-masing.</p> <ul> <li><code>setup</code>: dipanggil setelah resolusi properti awal ketika instance komponen dibuat. Dari segi siklus, ia dipanggil sebelum hooks <code>beforeCreate</code>.</li> <li><code>onBeforeMount</code>: fungsi yang dijalankan sebelum proses rendering dijalankan.</li> <li><code>onMounted</code>: fungsi yang dipanggil hanya sekali setelah rendering pertama selesai. Biasanya fungsi ini digunakan untuk menghandle side effect dalam operasi request ajax.</li> <li><code>onUnmounted</code>: fungsi yang dijalankan untuk menghilangkan atau menghapus komponen dari DOM. </li> </ul> <pre><code class=language-ts>import {\n    createComponent,\n    reactive as useState,\n    onBeforeMount as componentWillMount,\n    onMounted as componentDidMount,\n    onUnmounted as componentWillUnmount\n} from &#39;@vue/composition-api&#39;;\n\nconst LifecycleHooks = createComponent({\n    setup() {\n        const state = useState&lt;{ loading: boolean, users: object }&gt;({\n            loading: false,\n            users: []\n        })\n\n        componentWillMount(() =&gt; {\n            console.log(&quot;Component before mount&quot;)\n        })\n\n        componentDidMount(() =&gt; {\n            const API_URL = &#39;https://jsonplaceholder.typicode.com/users&#39;\n            fetch(API_URL)\n                .then(res =&gt; res.json() as Promise&lt;any&gt;)\n                .then(data =&gt; {\n                    state.users = data,\n                        state.loading = !state.loading;\n                })\n                .catch((err: Error) =&gt; {\n                    throw err\n                })\n            console.log(&quot;Component Mounted&quot;)\n        });\n\n        componentWillUnmount(() =&gt; {\n            console.log(&quot;Component Will Unmount&quot;)\n        })\n\n        return () =&gt; (\n            &lt;div className=&quot;lifecycle-hooks&quot;&gt;\n                {state.loading ? JSON.stringify(state.users) : &lt;span&gt;Loading...&lt;/span&gt;}\n            &lt;/div&gt;\n        )\n    }\n})\n\nexport default LifecycleHooks</code></pre> <ul> <li><code>reactive</code>: fungsi ini mirip dengan <code>Vue.observable()</code>pada Vue 2, fungsi ini mengembalikan sebuah object baru, dan mengembalikan proxy reaktif dari aslinya.</li> <li><code>watch</code>: *&quot;function expects a function&quot;* itu istilahnya. Fungsi ini melacak variabel reaktif didalam suatu komponen. Ketika nilai dari variable reaktif tersebut diganti/update, maka fungsi dijalankan kembali atau dirender ulang.</li> </ul> <pre><code>import {\n    createComponent,\n    reactive as useState,\n    watch as useEffect\n} from &#39;@vue/composition-api&#39;;\n\nconst LifecycleHooks = createComponent({\n    setup() {\n        const state = useState&lt;{ count: number }&gt;({\n            count: 0\n        })\n\n        /* =&gt; Re-run it whenever the dependencies have changed */\n        useEffect(() =&gt; state.count, (nextState, prevState) =&gt; {\n            console.log(nextState, &#39;&lt;= this is nextState&#39;)\n            console.log(prevState, &#39;&lt;= this is prevState&#39;);\n        })\n\n        return () =&gt; (\n            &lt;div className=&quot;lifecycle-hooks&quot;&gt;\n                &lt;button onClick={() =&gt; state.count++}&gt;\n                    Update Value\n                &lt;/button&gt;\n            &lt;/div&gt;\n        )\n    }\n})</code></pre><h3 id=redux--vue>Redux &amp; Vue</h3> <p>Tentunya kamu pasti sudah tau apa itu Redux right?, ya! kamu jackpot! Redux adalah sebuah library state management untuk aplikasi javascript. Ga kayak vuex, redux bisa digunakan framework apapun.</p> <p>Redux mempunyai 4 konsep: <code>reducers</code>, <code>actions</code>, <code>action creators</code>, dan <code>store</code>. State pada Redux sifatnya immutable dan pure functions. Berikut adalah beberapa hal yang perlu diketahui lebih lanjut tentang redux di vue:</p> <p><strong>Actions</strong> Actions adalah objek Javascript sederhana yang tugasnya adalah mengirim/mengembalikan data dari aplikasi kamu ke store. Jika diberikan perumpamaan, maka action adalah orang yang memberikan perintah untuk melakukan suatu pekerjaan dan memberikan hal-hal yang diberikan untuk dapat menunjang pekerjaan itu.</p> <pre><code class=language-javascript>export const INCREMENT = &#39;INCREMENT&#39;\nexport const DECREMENT = &#39;DECREMENT&#39;\nexport const RESET = &#39;RESET&#39;\n\n\nexport const increment = () =&gt; {\n    return { \n        type: INCREMENT \n        // your payload here\n    }\n}\n\nexport const decrement = () =&gt; {\n    return { \n        type: DECREMENT \n    }\n}\n\nexport const reset = () =&gt; {\n    return { \n        type: RESET \n    }\n}</code></pre> <p><strong>Reducers</strong> Reducers mempunyai peran sebagai penentu bagaimana keadaan aplikasi berubah sesuai dengan perintah yang diberikan lalu dikirim ke store. Kamu bisa membuat banyak reducer, lalu mengkombinasikannya menjadi satu root reducer.</p> <pre><code class=language-javascript>type Action = { type: &#39;INCREMENT&#39; } | { type: &#39;DECREMENT&#39; } | { type: &#39;RESET&#39; };\n\nconst Counter = (state: number = 0, action: Action) =&gt; {\n    switch (action.type) {\n        case &#39;INCREMENT&#39;: {\n            return state + 1;\n        }\n        case &#39;DECREMENT&#39;: {\n            return state - 1;\n        }\n        case &#39;RESET&#39;: {\n            return state\n        }\n        default: return state\n    }\n}\n\nexport default Counter</code></pre> <p>Fungsi <code>combineReducers</code> untuk memanggil semua reducer yang kamu buat. Ini tentunya sangat useful:)</p> <pre><code>import { combineReducers } from &#39;redux&#39;\nimport userReducer from &#39;./reducer/user.reducer&#39;\n\nexport default combineReducers({\n    user: userReducer\n    // your another reducer here\n})</code></pre><p><strong>Store</strong> A <code>store</code> tempat menyimpan state/data dari aplikasi kamu. Store, memegang seluruh cabang dari aplikasi kamu. Hanya ada satu store di Redux.</p> <pre><code class=language-javascript>import Vue from &#39;vue&#39;\nimport { createStore } from &#39;redux&#39;\n\nimport Provider from &#39;vuejs-redux&#39;;\nimport RootReducer from &#39;./rootReducer&#39;\n\nconst store = createStore(RootReducer);\n\nexport default Vue.component(&#39;Provider&#39;, {\n    render() {\n        return (\n            &lt;Provider \n                mapStateToProps={this.mapStateToProps} \n                mapDispatchToProps={this.mapDispatchToProps} \n                store={store}&gt; \n                {this.$scopedSlots.default}\n            &lt;/Provider&gt;\n        )\n    },\n\n    props: [&#39;mapStateToProps&#39;, &#39;mapDispatchToProps&#39;],\n\n    components: {\n        Provider\n    }\n})</code></pre> <p>Kamu juga bisa membuat custom provider yang menerima <code>mapStateToProps</code> and <code>mapDispatchToProps</code> sebagai props and mengimport store serta meneruskannya ke setiap <code>Provider</code>.</p> <pre><code class=language-javascript>import Vue from &#39;vue&#39;;\nimport ContextConsumer from &#39;./redux&#39;;\nimport * as actions from &#39;./redux/action/user.action&#39;;\n\nimport ComponentContainer from &#39;./components/container/component-wrap&#39;;\n\nexport default Vue.component(&#39;App&#39;, {\n  render() {\n   return (\n      &lt;ContextConsumer \n          mapStateToProps={this.mapStateToProps} \n          mapDispatchToProps={this.mapDispatchToProps}&gt;\n            {({ incrementAction, userData }) =&gt; (\n                &lt;ComponentContainer&gt;\n                    &lt;SingleComponent\n                      value={userData.user}\n                      handleClick={incrementAction} \n                    /&gt;\n                &lt;/ComponentContainer&gt;\n            )}\n      &lt;/ContextConsumer&gt;\n    )\n  },\n\n  components: {\n    ContextConsumer\n  },\n\n  methods: {\n    mapStateToProps(state) {\n      return {\n        userData: state\n      }\n    },\n    mapDispatchToProps(dispatch) {\n      return {\n        incrementAction: () =&gt; dispatch(actions.increment())\n      }\n    }\n  }\n})</code></pre> <h3 id=higher-order-components>Higher-Order Components</h3> <p>Higher-order component (HOC) adalah sebuah konsep/teknik/pattern advanced di React yang dapat digunakan terus-menerus alias (reusable). HOCs bukan bagian dari React API. </p> <p>Jika kamu paham dengan konsep higher-order functions (HOF), tentunya akan sangat mudah membuat HOC, karena HOC adalah implementasi dari HOF :)</p> <pre><code class=language-javascript>import Vue from &#39;vue&#39;\n\nconst useDataFetchingHOC = (WrappedComponent: JSX.IntrinsicElements) =&gt; (urlParam: string) =&gt; {\n    return Vue.component(&#39;HOCFetch&#39;, {\n        data: () =&gt; ({\n            fetchData: null\n        }),\n        mounted: function() {\n            fetch(urlParam)\n                .then(response =&gt; {\n                    if (!response.ok) { throw new Error(response.statusText) }\n                    return response.json() as Promise&lt;any&gt;;\n                })\n                .then(data =&gt; this.fetchData = data)\n                .catch((err: Error) =&gt; {\n                    throw err\n                })\n        },\n\n        render(createElement) {\n            return !this.fetchData ? createElement(&#39;span&#39;, &#39;Loading Fetch...&#39;) :\n                createElement(WrappedComponent, {\n                    attrs: this.$attrs,\n                    props: this.$props,\n                    on: this.$listeners\n            })\n        }\n    })\n};\n\nexport default useDataFetchingHOC</code></pre> <pre><code class=language-javascript>import { createComponent } from &#39;@vue/composition-api&#39;\nimport useDataFetchingHOC from &#39;../presentational/hoc-component&#39;\n\nconst dataSourceUrl = &quot;https://jsonplaceholder.typicode.com/users&quot;;\n\nconst ContentSite = createComponent({\n    setup() {\n      return () =&gt; (\n        &lt;div className=&quot;content&quot;&gt;\n          &lt;p&gt;Yes, i&#39;m in HOC&lt;/p&gt;\n        &lt;/div&gt;\n      )\n    }\n  })\n\nexport default useDataFetchingHOC(ContentSite)(dataSourceUrl)\n</code></pre> <p><strong>Terimakasih sudah membaca!</strong> Terima kasih telah membaca, saya harap kamu menikmati artikel ini, dan bisa memberi inspirasi baru untuk pekerjaan kamu. Yang pasti, Vue dan React adalah tools front-end yang sangat keren, dan sangat diminati oleh banyak pengguna. Jadi, teruslah mencoba dan mempelajari hal-hal baru, dan jangan lupa selalu percaya diri!😎</p> <p>Source code: <a href=https://github.com/alfinsuryaS/vue-react>Github</a></p> ";e.exports=r},function(e,t,n){"use strict";n.r(t),t.default=n.p+"09dd46153e4984459ceb4d139bfee322.png"},function(e,t,n){"use strict";var r=n(0),i=n(7),a=n(5),o=n(100);var u=function(e){return r.createElement("div",{className:"about"},r.createElement(a.make,{children:null},r.createElement("div",{className:"about-header"},r.createElement("h1",{className:o.Styles.title},i.textEl("Alfin Surya"))),r.createElement("div",{className:o.Styles.img_author},r.createElement("img",{src:"../../../assets/img/author.jpg"})),r.createElement("div",{className:o.Styles.content},r.createElement("em",void 0,i.textEl("Front-End Engineer")),r.createElement("p",void 0,i.textEl("I'm Alfin Surya, an designer, frontend/web developer currently residing in Bali. Specializing in developing websites and web applications.")),r.createElement("p",void 0,i.textEl("Being a Polyglot engineer comfortable working across the stack, but with a front-end focus. Interest in types, functional programming and low-level language as a backend service like Rust and Golang.\n                    Always open to learning new technologies as long as there interesting projects to be involved in. ")),r.createElement("h2",void 0,i.textEl("Skills")),r.createElement("p",void 0,i.textEl("Quick to internalize new concepts. Highly motivated and resourceful self-learner. Thrives in fast-paced, high-intensity environments without sacrificing attention to detail. Effective, diplomatic communicator in difficult or delicate situations.")),r.createElement("h2",void 0,i.textEl("Techs")),r.createElement("p",void 0,i.textEl("Productive when working with a range of languages including Javascript, TypeScript, ReasonML, React, Angular and Rust, as well as modern ecosystem tools such as Git/Github, Linux(Basic), RESTFUL API design, and many more.")),r.createElement("div",{className:o.Styles.work_experience},r.createElement("h2",void 0,i.textEl("Work Experience")),r.createElement("div",{className:"work-experience__item"},r.createElement("div",{className:"work-experience-header"},r.createElement("span",void 0,r.createElement("b",void 0,i.textEl("Fantasktic, Inc"))),r.createElement("span",void 0,i.textEl("Frontend Developer")),r.createElement("span",void 0,i.textEl("Jan - Apr 2020 (Full-time)")),r.createElement("span",{className:"province"},i.textEl("Bali Province, Indonesia"))),r.createElement("div",{className:"work-experience-content"},i.textEl("In this company, my responsibility is migration non WordPress site or existing site to a new host to the WordPress platform."))),r.createElement("div",{className:"work-experience__item"},r.createElement("div",{className:"work-experience-header"},r.createElement("span",void 0,r.createElement("b",void 0,i.textEl("Jeg Studio"))),r.createElement("span",void 0,i.textEl("Web Designer")),r.createElement("span",void 0,i.textEl("June - August 2018 (Internship)")),r.createElement("span",{className:"province"},i.textEl("Bali Province, Indonesia"))),r.createElement("div",{className:"work-experience-content"},i.textEl("At Jeg Studio our goal is to built unique news and magazine WordPress themes and make it amazing-looking that are naturally easy to use and customize, without any compromise on performance.")))),r.createElement("h2",void 0,i.textEl("Contributions")),r.createElement("div",{className:o.Styles.contributions},r.createElement("div",{className:"contributions-item"},r.createElement("h4",void 0,i.textEl("Speaker")),r.createElement("span",{className:"event-name"},i.textEl("ReactJS Indonesia")),r.createElement("span",{className:"event-data"},i.textEl("Nov 2019")),r.createElement("p",void 0,i.textEl("An online meetup held by ReactJS ID Community, where I filled in the topic of 'How to build your own Jest - Pure JavaScript'")))))))};t.make=u},function(e,t,n){"use strict";var r=n(4),i={title:r.style([r.marginTop([25096,0]),[r.marginBottom([25096,15]),[r.$$float(-944764921),0]]]),img_author:r.style([r.$$float(-379319332),[r.width([25096,120]),[r.height([25096,145]),[r.marginLeft([25096,15]),0]]]]),content:r.style([r.clear(-944764921),[r.overflow(-1065951377),0]]),work_experience:r.style([r.selector(".work-experience__item",[r.marginBottom([25096,30]),[r.selector(".work-experience-header",[r.marginBottom([25096,20]),[r.selector("span",[r.display(888960333),0]),[r.selector(".province",[r.opacity(.5),0]),0]]]),0]]),0]),contributions:r.style([r.selector(".contributions-item",[r.marginBottom([25096,30]),[r.selector("h4",[r.fontSize([25096,18]),[r.fontStyle(107228912),[r.display(888960333),[r.marginBottom([25096,5]),0]]]]),[r.selector("span",[r.display(888960333),0]),[r.selector(".event-name",[r.lineHeight([22632,1.5]),0]),0]]]]),0])};t.Styles=i},function(e,t,n){"use strict";var r=n(102);t.make=r},function(e,t,n){"use strict";var r=n(0),i=n(43),a=n(25);e.exports=function(e){var t=e.children;return r.createElement(i.Provider,{store:a.store},t)}},function(e,t,n){"use strict";var r=n(0),i=n(7),a=n(5),o=n(104);var u=function(e){return r.createElement("footer",{className:o.Styles.footer},r.createElement(a.make,{children:r.createElement("span",{className:o.Styles.footer_copyright},i.textEl("2019  Alfin Surya. Unless otherwise noted, these posts are made available under a Creative Commons Attribution License."))}))};t.make=u},function(e,t,n){"use strict";var r=n(4),i={footer:r.style([r.paddingTop([25096,25]),[r.paddingBottom([25096,20]),0]]),footer_copyright:r.style([r.fontSize([25096,13]),[r.lineHeight([22632,1.2]),[r.display(888960333),0]]])};t.Styles=i},function(e,t,n){"use strict";var r=n(0),i=n(24),a=n(7),o=n(5),u=n(106);var l=function(e){return r.createElement("nav",{className:u.Styles.nav},r.createElement(o.make,{children:r.createElement("div",{className:u.Styles.ul},r.createElement("ul",{className:u.Styles.brand},r.createElement("li",void 0,r.createElement(i.make,{href:"/",children:null},a.textEl("NATSERRACT"),r.createElement("span",void 0,a.textEl("Thoughts and links about everything"))))),r.createElement("ul",{className:"menu-list"},r.createElement("div",{className:"menu-list-left"},r.createElement("li",void 0,r.createElement(i.make,{href:"/",children:a.textEl("Home")})),r.createElement("li",void 0,r.createElement(i.make,{href:"/#/about",children:a.textEl("About")})),r.createElement("li",void 0,r.createElement(i.make,{href:"/#/contributing",children:a.textEl("Contributing")}))),r.createElement("div",{className:"menu-list-right"},r.createElement("li",void 0,r.createElement("a",{href:"https://github.com/natserract",target:"blank"},r.createElement("i",{className:"icon-github"}))),r.createElement("li",void 0,r.createElement("a",{href:"https://www.linkedin.com/in/alfinsurya/",target:"blank"},r.createElement("i",{className:"icon-linkedin"}))),r.createElement("li",void 0,r.createElement("a",{href:"mailto:alfins132@gmail.com",target:"blank"},r.createElement("i",{className:"icon-envelope"}))))))}))};t.make=l},function(e,t,n){"use strict";var r=n(4),i={nav:r.style([r.background([5194459,"ffffff"]),[r.zIndex(1e3),[r.minHeight([25096,70]),[r.display(-1010954439),[r.alignItems(98248149),[r.padding2([25096,10],[25096,0]),[r.selector("> div",[r.paddingBottom([25096,15]),[r.borderBottom([25096,1],12956715,[5194459,"dcf1d5"]),0]]),0]]]]]]]),ul:r.style([r.display(-1010954439),[r.flexDirection(-963948842),[r.alignItems(98248149),[r.selector("ul",[r.width([-119887163,100]),[r.margin([25096,0]),[r.padding([25096,0]),0]]]),[r.selector("ul.menu-list",[r.marginTop([25096,15]),[r.display(-1010954439),[r.justifyContent(516682146),[r.selector(".menu-list-right",[r.selector("li",[r.paddingRight([25096,15]),0]),0]),0]]]]),[r.selector("li",[r.display(-147785676),[r.listStyleType(-922086728),[r.paddingRight([25096,20]),[r.selector("a",[r.textDecoration(-922086728),[r.color([5194459,"047a04"]),[r.fontSize([25096,14]),0]]]),0]]]]),0]]]]]]),brand:r.style([r.selector("li",[r.color([5194459,"006600"]),[r.fontWeight(-1055161979),[r.fontStyle(107228912),[r.selector("a",[r.fontSize([25096,33]),[r.selector("span",[r.display(888960333),[r.fontSize([25096,12]),[r.fontWeight(-184774442),[r.opacity(.7),0]]]]),0]]),0]]]]),0])};t.Styles=i},function(e,t,n){"use strict";var r=n(14);t.appRoutesConfig=function(e){var t=r.useUrl(void 0,0)[1].split("/"),n=t.length;if(n>=4)return 3;switch(n){case 0:return 3;case 1:return""===t[0]?0:3;case 2:if(""!==t[0])return 3;switch(t[1]){case"about":return 1;case"contributing":return 2;default:return 3}case 3:return""===t[0]&&"post"===t[1]?[t[2]]:3}}},function(e,t,n){"use strict";t.globalStyles="\n    html, body {\n        height: 100%;\n    }\n    body {\n        margin: 0 auto;\n        padding: 0;\n        font-family: sans-serif;\n        font-weight: 300;\n        font-size: 16px;\n        font-family: serif;\n        height: 100%;\n        background: #dcf1d5;\n        color: #224326;\n        line-height: 1.3;\n    }\n    a {\n        color: #047a04;\n    }\n   \n    img {\n        width: 100%;\n        max-width: 100%;\n    }\n"},function(e,t,n){"use strict";var r=n(0),i=n(37),a=n(5),o=n(110);var u=function(e){return r.createElement("div",{className:"contributing-guide"},r.createElement(a.make,{children:r.createElement("article",{className:o.Styles.article+" markdown-body",dangerouslySetInnerHTML:{__html:i(n(111))}})}))};t.make=u},function(e,t,n){"use strict";var r=n(4),i={article:r.style([r.background([5194459,"fff"]),[r.selector("h1:first-child",[r.marginTop([25096,0]),[r.borderBottom([25096,0],12956715,582626130),[r.paddingBottom([25096,0]),0]]]),[r.selector("img",[r.width([-119887163,100]),0]),0]]])};t.Styles=i},function(e,t){e.exports="<h1 id=contributing>Contributing</h1> <p>When contributing to this repository, please first discuss the change you wish to make via issue, email, or any other method with the owners of this repository before making a change.</p> <h2 id=pull-request-process>Pull Request Process</h2> <ol> <li><p>Make sure every post you make is useful for others and doesn&#39;t contain SARA content (Suku, Agama, Ras, dan Antargolongan).</p> </li> <li><p>Create a new directory in the <a href=https://github.com/natserract/natserract.github.io/tree/master/posts>posts</a> directory, then create new file namely <code>index.md</code> for entry point. Remember directory name should be lowercase.</p> </li> <li><p>Don&#39;t forget to fill description format, in the first line <code>index.md</code>, for example:</p> <pre><code class=language-html> &lt;! --- Description: Functional programming in Rust --&gt;</code></pre> </li> <li><p>For assets such as images, must be placed in one directory in your post directory.</p> </li> <li><p>Post content using markdown file, you can see more here <a href=https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet>markdown cheatsheet</a>.</p> </li> </ol> "},function(e,t,n){"use strict";n.r(t),n.d(t,"cache",(function(){return D})),n.d(t,"css",(function(){return z})),n.d(t,"cx",(function(){return P})),n.d(t,"flush",(function(){return T})),n.d(t,"getRegisteredStyles",(function(){return F})),n.d(t,"hydrate",(function(){return A})),n.d(t,"injectGlobal",(function(){return R})),n.d(t,"keyframes",(function(){return L})),n.d(t,"merge",(function(){return O})),n.d(t,"sheet",(function(){return N}));var r=function(){function e(e){this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.before=null}var t=e.prototype;return t.insert=function(e){if(this.ctr%(this.isSpeedy?65e3:1)==0){var t,n=function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t}(this);t=0===this.tags.length?this.before:this.tags[this.tags.length-1].nextSibling,this.container.insertBefore(n,t),this.tags.push(n)}var r=this.tags[this.tags.length-1];if(this.isSpeedy){var i=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(r);try{var a=105===e.charCodeAt(1)&&64===e.charCodeAt(0);i.insertRule(e,a?0:i.cssRules.length)}catch(e){0}}else r.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){return e.parentNode.removeChild(e)})),this.tags=[],this.ctr=0},e}();var i=function(e){function t(e,t,r){var i=t.trim().split(g);t=i;var a=i.length,o=e.length;switch(o){case 0:case 1:var u=0;for(e=0===o?"":e[0]+" ";u<a;++u)t[u]=n(e,t[u],r).trim();break;default:var l=u=0;for(t=[];u<a;++u)for(var c=0;c<o;++c)t[l++]=n(e[c]+" ",i[u],r).trim()}return t}function n(e,t,n){var r=t.charCodeAt(0);switch(33>r&&(r=(t=t.trim()).charCodeAt(0)),r){case 38:return t.replace(h,"$1"+e.trim());case 58:return e.trim()+t.replace(h,"$1"+e.trim());default:if(0<1*n&&0<t.indexOf("\f"))return t.replace(h,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+t}function r(e,t,n,a){var o=e+";",u=2*t+3*n+4*a;if(944===u){e=o.indexOf(":",9)+1;var l=o.substring(e,o.length-1).trim();return l=o.substring(0,e).trim()+l+";",1===P||2===P&&i(l,1)?"-webkit-"+l+l:l}if(0===P||2===P&&!i(o,1))return o;switch(u){case 1015:return 97===o.charCodeAt(10)?"-webkit-"+o+o:o;case 951:return 116===o.charCodeAt(3)?"-webkit-"+o+o:o;case 963:return 110===o.charCodeAt(5)?"-webkit-"+o+o:o;case 1009:if(100!==o.charCodeAt(4))break;case 969:case 942:return"-webkit-"+o+o;case 978:return"-webkit-"+o+"-moz-"+o+o;case 1019:case 983:return"-webkit-"+o+"-moz-"+o+"-ms-"+o+o;case 883:if(45===o.charCodeAt(8))return"-webkit-"+o+o;if(0<o.indexOf("image-set(",11))return o.replace(C,"$1-webkit-$2")+o;break;case 932:if(45===o.charCodeAt(4))switch(o.charCodeAt(5)){case 103:return"-webkit-box-"+o.replace("-grow","")+"-webkit-"+o+"-ms-"+o.replace("grow","positive")+o;case 115:return"-webkit-"+o+"-ms-"+o.replace("shrink","negative")+o;case 98:return"-webkit-"+o+"-ms-"+o.replace("basis","preferred-size")+o}return"-webkit-"+o+"-ms-"+o+o;case 964:return"-webkit-"+o+"-ms-flex-"+o+o;case 1023:if(99!==o.charCodeAt(8))break;return"-webkit-box-pack"+(l=o.substring(o.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+o+"-ms-flex-pack"+l+o;case 1005:return d.test(o)?o.replace(f,":-webkit-")+o.replace(f,":-moz-")+o:o;case 1e3:switch(t=(l=o.substring(13).trim()).indexOf("-")+1,l.charCodeAt(0)+l.charCodeAt(t)){case 226:l=o.replace(b,"tb");break;case 232:l=o.replace(b,"tb-rl");break;case 220:l=o.replace(b,"lr");break;default:return o}return"-webkit-"+o+"-ms-"+l+o;case 1017:if(-1===o.indexOf("sticky",9))break;case 975:switch(t=(o=e).length-10,u=(l=(33===o.charCodeAt(t)?o.substring(0,t):o).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|l.charCodeAt(7))){case 203:if(111>l.charCodeAt(8))break;case 115:o=o.replace(l,"-webkit-"+l)+";"+o;break;case 207:case 102:o=o.replace(l,"-webkit-"+(102<u?"inline-":"")+"box")+";"+o.replace(l,"-webkit-"+l)+";"+o.replace(l,"-ms-"+l+"box")+";"+o}return o+";";case 938:if(45===o.charCodeAt(5))switch(o.charCodeAt(6)){case 105:return l=o.replace("-items",""),"-webkit-"+o+"-webkit-box-"+l+"-ms-flex-"+l+o;case 115:return"-webkit-"+o+"-ms-flex-item-"+o.replace(w,"")+o;default:return"-webkit-"+o+"-ms-flex-line-pack"+o.replace("align-content","").replace(w,"")+o}break;case 973:case 989:if(45!==o.charCodeAt(3)||122===o.charCodeAt(4))break;case 931:case 953:if(!0===x.test(e))return 115===(l=e.substring(e.indexOf(":")+1)).charCodeAt(0)?r(e.replace("stretch","fill-available"),t,n,a).replace(":fill-available",":stretch"):o.replace(l,"-webkit-"+l)+o.replace(l,"-moz-"+l.replace("fill-",""))+o;break;case 962:if(o="-webkit-"+o+(102===o.charCodeAt(5)?"-ms-"+o:"")+o,211===n+a&&105===o.charCodeAt(13)&&0<o.indexOf("transform",10))return o.substring(0,o.indexOf(";",27)+1).replace(p,"$1-webkit-$2")+o}return o}function i(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10);return n=e.substring(n+1,e.length-1),L(2!==t?r:r.replace(S,"$1"),n,t)}function a(e,t){var n=r(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(k," or ($1)").substring(4):"("+t+")"}function o(e,t,n,r,i,a,o,u,c,s){for(var f,d=0,p=t;d<R;++d)switch(f=F[d].call(l,e,p,n,r,i,a,o,u,c,s)){case void 0:case!1:case!0:case null:break;default:p=f}if(p!==t)return p}function u(e){return void 0!==(e=e.prefix)&&(L=null,e?"function"!=typeof e?P=1:(P=2,L=e):P=0),u}function l(e,n){var u=e;if(33>u.charCodeAt(0)&&(u=u.trim()),u=[u],0<R){var l=o(-1,n,u,u,T,E,0,0,0,0);void 0!==l&&"string"==typeof l&&(n=l)}var f=function e(n,u,l,f,d){for(var p,g,h,b,k,w=0,S=0,x=0,C=0,F=0,L=0,N=h=p=0,D=0,j=0,I=0,B=0,M=l.length,q=M-1,U="",$="",W="",V="";D<M;){if(g=l.charCodeAt(D),D===q&&0!==S+C+x+w&&(0!==S&&(g=47===S?10:47),C=x=w=0,M++,q++),0===S+C+x+w){if(D===q&&(0<j&&(U=U.replace(s,"")),0<U.trim().length)){switch(g){case 32:case 9:case 59:case 13:case 10:break;default:U+=l.charAt(D)}g=59}switch(g){case 123:for(p=(U=U.trim()).charCodeAt(0),h=1,B=++D;D<M;){switch(g=l.charCodeAt(D)){case 123:h++;break;case 125:h--;break;case 47:switch(g=l.charCodeAt(D+1)){case 42:case 47:e:{for(N=D+1;N<q;++N)switch(l.charCodeAt(N)){case 47:if(42===g&&42===l.charCodeAt(N-1)&&D+2!==N){D=N+1;break e}break;case 10:if(47===g){D=N+1;break e}}D=N}}break;case 91:g++;case 40:g++;case 34:case 39:for(;D++<q&&l.charCodeAt(D)!==g;);}if(0===h)break;D++}switch(h=l.substring(B,D),0===p&&(p=(U=U.replace(c,"").trim()).charCodeAt(0)),p){case 64:switch(0<j&&(U=U.replace(s,"")),g=U.charCodeAt(1)){case 100:case 109:case 115:case 45:j=u;break;default:j=O}if(B=(h=e(u,j,h,g,d+1)).length,0<R&&(k=o(3,h,j=t(O,U,I),u,T,E,B,g,d,f),U=j.join(""),void 0!==k&&0===(B=(h=k.trim()).length)&&(g=0,h="")),0<B)switch(g){case 115:U=U.replace(_,a);case 100:case 109:case 45:h=U+"{"+h+"}";break;case 107:h=(U=U.replace(m,"$1 $2"))+"{"+h+"}",h=1===P||2===P&&i("@"+h,3)?"@-webkit-"+h+"@"+h:"@"+h;break;default:h=U+h,112===f&&($+=h,h="")}else h="";break;default:h=e(u,t(u,U,I),h,f,d+1)}W+=h,h=I=j=N=p=0,U="",g=l.charCodeAt(++D);break;case 125:case 59:if(1<(B=(U=(0<j?U.replace(s,""):U).trim()).length))switch(0===N&&(p=U.charCodeAt(0),45===p||96<p&&123>p)&&(B=(U=U.replace(" ",":")).length),0<R&&void 0!==(k=o(1,U,u,n,T,E,$.length,f,d,f))&&0===(B=(U=k.trim()).length)&&(U="\0\0"),p=U.charCodeAt(0),g=U.charCodeAt(1),p){case 0:break;case 64:if(105===g||99===g){V+=U+l.charAt(D);break}default:58!==U.charCodeAt(B-1)&&($+=r(U,p,g,U.charCodeAt(2)))}I=j=N=p=0,U="",g=l.charCodeAt(++D)}}switch(g){case 13:case 10:47===S?S=0:0===1+p&&107!==f&&0<U.length&&(j=1,U+="\0"),0<R*z&&o(0,U,u,n,T,E,$.length,f,d,f),E=1,T++;break;case 59:case 125:if(0===S+C+x+w){E++;break}default:switch(E++,b=l.charAt(D),g){case 9:case 32:if(0===C+w+S)switch(F){case 44:case 58:case 9:case 32:b="";break;default:32!==g&&(b=" ")}break;case 0:b="\\0";break;case 12:b="\\f";break;case 11:b="\\v";break;case 38:0===C+S+w&&(j=I=1,b="\f"+b);break;case 108:if(0===C+S+w+A&&0<N)switch(D-N){case 2:112===F&&58===l.charCodeAt(D-3)&&(A=F);case 8:111===L&&(A=L)}break;case 58:0===C+S+w&&(N=D);break;case 44:0===S+x+C+w&&(j=1,b+="\r");break;case 34:case 39:0===S&&(C=C===g?0:0===C?g:C);break;case 91:0===C+S+x&&w++;break;case 93:0===C+S+x&&w--;break;case 41:0===C+S+w&&x--;break;case 40:if(0===C+S+w){if(0===p)switch(2*F+3*L){case 533:break;default:p=1}x++}break;case 64:0===S+x+C+w+N+h&&(h=1);break;case 42:case 47:if(!(0<C+w+x))switch(S){case 0:switch(2*g+3*l.charCodeAt(D+1)){case 235:S=47;break;case 220:B=D,S=42}break;case 42:47===g&&42===F&&B+2!==D&&(33===l.charCodeAt(B+2)&&($+=l.substring(B,D+1)),b="",S=0)}}0===S&&(U+=b)}L=F,F=g,D++}if(0<(B=$.length)){if(j=u,0<R&&(void 0!==(k=o(2,$,j,n,T,E,B,f,d,f))&&0===($=k).length))return V+$+W;if($=j.join(",")+"{"+$+"}",0!=P*A){switch(2!==P||i($,2)||(A=0),A){case 111:$=$.replace(y,":-moz-$1")+$;break;case 112:$=$.replace(v,"::-webkit-input-$1")+$.replace(v,"::-moz-$1")+$.replace(v,":-ms-input-$1")+$}A=0}}return V+$+W}(O,u,n,0,0);return 0<R&&(void 0!==(l=o(-2,f,u,u,T,E,f.length,0,0,0))&&(f=l)),"",A=0,E=T=1,f}var c=/^\0+/g,s=/[\0\r\f]/g,f=/: */g,d=/zoo|gra/,p=/([,: ])(transform)/g,g=/,\r+?/g,h=/([\t\r\n ])*\f?&/g,m=/@(k\w+)\s*(\S*)\s*/,v=/::(place)/g,y=/:(read-only)/g,b=/[svh]\w+-[tblr]{2}/,_=/\(\s*(.*)\s*\)/g,k=/([\s\S]*?);/g,w=/-self|flex-/g,S=/[^]*?(:[rp][el]a[\w-]+)[^]*/,x=/stretch|:\s*\w+\-(?:conte|avail)/,C=/([^-])(image-set\()/,E=1,T=1,A=0,P=1,O=[],F=[],R=0,L=null,z=0;return l.use=function e(t){switch(t){case void 0:case null:R=F.length=0;break;default:if("function"==typeof t)F[R++]=t;else if("object"==typeof t)for(var n=0,r=t.length;n<r;++n)e(t[n]);else z=0|!!t}return e},l.set=u,void 0!==e&&u(e),l};function a(e){e&&o.current.insert(e+"}")}var o={current:null},u=function(e,t,n,r,i,u,l,c,s,f){switch(e){case 1:switch(t.charCodeAt(0)){case 64:return o.current.insert(t+";"),"";case 108:if(98===t.charCodeAt(2))return""}break;case 2:if(0===c)return t+"/*|*/";break;case 3:switch(c){case 102:case 112:return o.current.insert(n[0]+t),"";default:return t+(0===f?"/*|*/":"")}case-2:t.split("/*|*/}").forEach(a)}},l=function(e){void 0===e&&(e={});var t,n=e.key||"css";void 0!==e.prefix&&(t={prefix:e.prefix});var a=new i(t);var l,c={};l=e.container||document.head;var s,f=document.querySelectorAll("style[data-emotion-"+n+"]");Array.prototype.forEach.call(f,(function(e){e.getAttribute("data-emotion-"+n).split(" ").forEach((function(e){c[e]=!0})),e.parentNode!==l&&l.appendChild(e)})),a.use(e.stylisPlugins)(u),s=function(e,t,n,r){var i=t.name;o.current=n,a(e,t.styles),r&&(d.inserted[i]=!0)};var d={key:n,sheet:new r({key:n,container:l,nonce:e.nonce,speedy:e.speedy}),nonce:e.nonce,inserted:c,registered:{},insert:s};return d};var c=function(e){for(var t,n=0,r=0,i=e.length;i>=4;++r,i-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(i){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)},s={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var f=/[A-Z]|^ms/g,d=/_EMO_([^_]+?)_([^]*?)_EMO_/g,p=function(e){return 45===e.charCodeAt(1)},g=function(e){return null!=e&&"boolean"!=typeof e},h=function(e){var t={};return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}((function(e){return p(e)?e:e.replace(f,"-$&").toLowerCase()})),m=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(d,(function(e,t,n){return y={name:t,styles:n,next:y},t}))}return 1===s[e]||p(e)||"number"!=typeof t||0===t?t:t+"px"};function v(e,t,n,r){if(null==n)return"";if(void 0!==n.__emotion_styles)return n;switch(typeof n){case"boolean":return"";case"object":if(1===n.anim)return y={name:n.name,styles:n.styles,next:y},n.name;if(void 0!==n.styles){var i=n.next;if(void 0!==i)for(;void 0!==i;)y={name:i.name,styles:i.styles,next:y},i=i.next;return n.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var i=0;i<n.length;i++)r+=v(e,t,n[i],!1);else for(var a in n){var o=n[a];if("object"!=typeof o)null!=t&&void 0!==t[o]?r+=a+"{"+t[o]+"}":g(o)&&(r+=h(a)+":"+m(a,o)+";");else if(!Array.isArray(o)||"string"!=typeof o[0]||null!=t&&void 0!==t[o[0]]){var u=v(e,t,o,!1);switch(a){case"animation":case"animationName":r+=h(a)+":"+u+";";break;default:r+=a+"{"+u+"}"}}else for(var l=0;l<o.length;l++)g(o[l])&&(r+=h(a)+":"+m(a,o[l])+";")}return r}(e,t,n);case"function":if(void 0!==e){var a=y,o=n(e);return y=a,v(e,t,o,r)}break;case"string":}if(null==t)return n;var u=t[n];return void 0===u||r?n:u}var y,b=/label:\s*([^\s;\n{]+)\s*;/g;var _=function(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var r=!0,i="";y=void 0;var a=e[0];null==a||void 0===a.raw?(r=!1,i+=v(n,t,a,!1)):i+=a[0];for(var o=1;o<e.length;o++)i+=v(n,t,e[o],46===i.charCodeAt(i.length-1)),r&&(i+=a[o]);b.lastIndex=0;for(var u,l="";null!==(u=b.exec(i));)l+="-"+u[1];return{name:c(i)+l,styles:i,next:y}};function k(e,t,n){var r="";return n.split(" ").forEach((function(n){void 0!==e[n]?t.push(e[n]):r+=n+" "})),r}var w=function(e,t,n){var r=e.key+"-"+t.name;if(!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles),void 0===e.inserted[t.name]){var i=t;do{e.insert("."+r,i,e.sheet,!0);i=i.next}while(void 0!==i)}};function S(e,t){if(void 0===e.inserted[t.name])return e.insert("",t,e.sheet,!0)}function x(e,t,n){var r=[],i=k(e,r,n);return r.length<2?n:i+t(r)}var C=function e(t){for(var n="",r=0;r<t.length;r++){var i=t[r];if(null!=i){var a=void 0;switch(typeof i){case"boolean":break;case"object":if(Array.isArray(i))a=e(i);else for(var o in a="",i)i[o]&&o&&(a&&(a+=" "),a+=o);break;default:a=i}a&&(n&&(n+=" "),n+=a)}}return n},E=function(e){var t=l(e);t.sheet.speedy=function(e){this.isSpeedy=e},t.compat=!0;var n=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];var i=_(n,t.registered,void 0);return w(t,i,!1),t.key+"-"+i.name};return{css:n,cx:function(){for(var e=arguments.length,r=new Array(e),i=0;i<e;i++)r[i]=arguments[i];return x(t.registered,n,C(r))},injectGlobal:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];var i=_(n,t.registered);S(t,i)},keyframes:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];var i=_(n,t.registered),a="animation-"+i.name;return S(t,{name:i.name,styles:"@keyframes "+a+"{"+i.styles+"}"}),a},hydrate:function(e){e.forEach((function(e){t.inserted[e]=!0}))},flush:function(){t.registered={},t.inserted={},t.sheet.flush()},sheet:t.sheet,cache:t,getRegisteredStyles:k.bind(null,t.registered),merge:x.bind(null,t.registered,n)}}(),T=E.flush,A=E.hydrate,P=E.cx,O=E.merge,F=E.getRegisteredStyles,R=E.injectGlobal,L=E.keyframes,z=E.css,N=E.sheet,D=E.cache}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,